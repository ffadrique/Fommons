<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_xml_encoder.f90">
    <context>
        <time>2025-03-09T18:18:31</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Fommons</project>
        <name>m_xml_encoder.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_xml_encoder" type="module">
            <main>
                <lines>
                    <source percent="51.68">77</source>
                    <comments percent="28.19">42</comments>
                    <empty percent="20.13">30</empty>
                    <total>149</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="xml_decode_character" type="function">
                    <statistics>
                        <lines>
                            <source percent="40.54">15</source>
                            <comments percent="24.32">9</comments>
                            <empty percent="35.14">13</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_encode_character" type="function">
                    <statistics>
                        <lines>
                            <source percent="41.18">14</source>
                            <comments percent="23.53">8</comments>
                            <empty percent="35.29">12</empty>
                            <total>34</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_encoder_decode_character" type="function">
                    <statistics>
                        <lines>
                            <source percent="38.71">12</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="35.48">11</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_encoder_decode_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_encoder_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">4</source>
                            <comments percent="27.27">3</comments>
                            <empty percent="36.36">4</empty>
                            <total>11</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_encoder_encode_character" type="function">
                    <statistics>
                        <lines>
                            <source percent="38.71">12</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="35.48">11</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_encoder_encode_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_encoder_type" type="function">
                    <statistics>
                        <lines>
                            <source percent="40.00">14</source>
                            <comments percent="25.71">9</comments>
                            <empty percent="34.29">12</empty>
                            <total>35</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="43.96">160</source>
                    <comments percent="26.65">97</comments>
                    <empty percent="29.40">107</empty>
                    <total>364</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>5</maximum>
                    <average>2.50</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>3</maximum>
                    <average>1.88</average>
                </nesting>
                <methods>8</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="43.96">160</source>
            <comments percent="26.65">97</comments>
            <empty percent="29.40">107</empty>
            <total>364</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>5</maximum>
            <average>2.50</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>3</maximum>
            <average>1.88</average>
        </nesting>
        <methods>8</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_xml_encoder</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : XML stream encoder</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of Fommons.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             Fommons is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             Fommons is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with Fommons.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use m_object</line>
        <line t="X" i="30" b="0" n="0">  use m_string</line>
        <line t="X" i="31" b="0" n="0"></line>
        <line t="C" i="32" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="33" b="0" n="0"></line>
        <line t="X" i="34" b="0" n="0">  implicit none</line>
        <line t="X" i="35" b="0" n="0"></line>
        <line t="C" i="36" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="37" b="0" n="0"></line>
        <line t="X" i="38" b="0" n="0">  private</line>
        <line t="X" i="39" b="0" n="0">  public t_xml_encoder</line>
        <line t="X" i="40" b="0" n="0">  public xml_encoder</line>
        <line t="X" i="41" b="0" n="0"></line>
        <line t="X" i="42" b="0" n="0">  public xml_encode_none</line>
        <line t="X" i="43" b="0" n="0">  public xml_encode_name</line>
        <line t="X" i="44" b="0" n="0">  public xml_encode_decimal</line>
        <line t="X" i="45" b="0" n="0">  public xml_encode_hexadecimal</line>
        <line t="X" i="46" b="0" n="0"></line>
        <line t="X" i="47" b="0" n="0">  public xml_default_encoder</line>
        <line t="X" i="48" b="0" n="0"></line>
        <line t="C" i="49" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="50" b="0" n="0"></line>
        <line t="C" i="51" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="52" b="0" n="0"></line>
        <line t="C" i="53" b="0" n="0">! Encoding type</line>
        <line t="X" i="54" b="0" n="0">  integer, parameter :: xml_encode_none        = 0</line>
        <line t="X" i="55" b="0" n="0">  integer, parameter :: xml_encode_name        = 1</line>
        <line t="X" i="56" b="0" n="0">  integer, parameter :: xml_encode_decimal     = 2</line>
        <line t="X" i="57" b="0" n="0">  integer, parameter :: xml_encode_hexadecimal = 3</line>
        <line t="X" i="58" b="0" n="0"></line>
        <line t="C" i="59" b="0" n="0">! Characters for the encoding</line>
        <line t="X" i="60" b="0" n="0">  character, parameter :: xml_coding_lead  = '&amp;'</line>
        <line t="X" i="61" b="0" n="0">  character, parameter :: xml_coding_trail = ';'</line>
        <line t="X" i="62" b="0" n="0">  character, parameter :: xml_coding_dec_prefix = '#'</line>
        <line t="X" i="63" b="0" n="0">  character(len=2), parameter :: xml_coding_hex_prefix = '#x'</line>
        <line t="X" i="64" b="0" n="0"></line>
        <line t="C" i="65" b="0" n="0">! The encoding table</line>
        <line t="T" i="66" b="0" n="0">  type, extends(t_object) :: t_xml_coding</line>
        <line t="X" i="67" b="0" n="0">    private</line>
        <line t="X" i="68" b="0" n="0">    character(len=2) :: dec  = ''</line>
        <line t="X" i="69" b="0" n="0">    character(len=2) :: hex  = ''</line>
        <line t="X" i="70" b="0" n="0">    character        :: char = ''</line>
        <line t="X" i="71" b="0" n="0">    character(len=4) :: name = ''</line>
        <line t="T" i="72" b="0" n="0">  end type t_xml_coding</line>
        <line t="X" i="73" b="0" n="0">  type(t_xml_coding), parameter, dimension(*) :: xml_coding = (/ &amp;</line>
        <line t="X" i="74" b="0" n="0">    t_xml_coding( '34', '22', '&amp;', 'amp ' ), &amp;</line>
        <line t="X" i="75" b="0" n="0">    t_xml_coding( '38', '26', '"', 'quot' ), &amp;</line>
        <line t="X" i="76" b="0" n="0">    t_xml_coding( '39', '27', "'", 'apos' ), &amp;</line>
        <line t="X" i="77" b="0" n="0">    t_xml_coding( '60', '3C', '&lt;', 'lt  ' ), &amp;</line>
        <line t="X" i="78" b="0" n="0">    t_xml_coding( '62', '3E', '&gt;', 'gt  ' ) /)</line>
        <line t="X" i="79" b="0" n="0"></line>
        <line t="C" i="80" b="0" n="0">! The encoding implementation</line>
        <line t="T" i="81" b="0" n="0">  type t_xml_code</line>
        <line t="X" i="82" b="0" n="0">    private</line>
        <line t="X" i="83" b="0" n="0">    character        :: char = ''</line>
        <line t="X" i="84" b="0" n="0">    character(len=8) :: code = ''</line>
        <line t="T" i="85" b="0" n="0">  end type t_xml_code</line>
        <line t="T" i="86" b="0" n="0"></line>
        <line t="T" i="87" b="0" n="0"></line>
        <line t="C" i="88" b="0" n="0">! Attirbute type (associated to an XML tag)</line>
        <line t="T" i="89" b="0" n="0">  type, extends(t_object) :: t_xml_encoder</line>
        <line t="X" i="90" b="0" n="0">    private</line>
        <line t="X" i="91" b="0" n="0"></line>
        <line t="C" i="92" b="0" n="0">!     Encode type</line>
        <line t="X" i="93" b="0" n="0">      integer :: type = xml_encode_name</line>
        <line t="X" i="94" b="0" n="0"></line>
        <line t="C" i="95" b="0" n="0">!     The code mappings</line>
        <line t="X" i="96" b="0" n="0">      type(t_xml_code), dimension(size(xml_coding)) :: code = t_xml_code()</line>
        <line t="X" i="97" b="0" n="0"></line>
        <line t="X" i="98" b="0" n="0">    contains</line>
        <line t="X" i="99" b="0" n="0"></line>
        <line t="C" i="100" b="0" n="0">!     Encoding/decoding interfaces</line>
        <line t="X" i="101" b="0" n="0">      generic :: encode =&gt; xml_encoder_encode_string, &amp;</line>
        <line t="X" i="102" b="0" n="0">                           xml_encoder_encode_character</line>
        <line t="X" i="103" b="0" n="0">      procedure, private :: xml_encoder_encode_string</line>
        <line t="X" i="104" b="0" n="0">      procedure, private :: xml_encoder_encode_character</line>
        <line t="X" i="105" b="0" n="0">      generic :: decode =&gt; xml_encoder_decode_string, &amp;</line>
        <line t="X" i="106" b="0" n="0">                           xml_encoder_decode_character</line>
        <line t="X" i="107" b="0" n="0">      procedure, private :: xml_encoder_decode_string</line>
        <line t="X" i="108" b="0" n="0">      procedure, private :: xml_encoder_decode_character</line>
        <line t="X" i="109" b="0" n="0"></line>
        <line t="T" i="110" b="0" n="0">  end type t_xml_encoder</line>
        <line t="T" i="111" b="0" n="0"></line>
        <line t="C" i="112" b="0" n="0">! Constructor interface</line>
        <line t="X" i="113" b="0" n="0">  interface xml_encoder</line>
        <line t="X" i="114" b="0" n="0">    module procedure xml_encoder_default</line>
        <line t="X" i="115" b="0" n="0">    module procedure xml_encoder_type</line>
        <line t="X" i="116" b="0" n="0">  end interface xml_encoder</line>
        <line t="X" i="117" b="0" n="0"></line>
        <line t="C" i="118" b="0" n="0">! Name encoder</line>
        <line t="X" i="119" b="0" n="0">  type(t_xml_code), dimension(5), parameter :: xml_code_name = (/ &amp;</line>
        <line t="X" i="120" b="0" n="0">    t_xml_code( xml_coding(1)%char, xml_coding_lead//trim(xml_coding(1)%name)//xml_coding_trail ), &amp;</line>
        <line t="X" i="121" b="0" n="0">    t_xml_code( xml_coding(2)%char, xml_coding_lead//trim(xml_coding(2)%name)//xml_coding_trail ), &amp;</line>
        <line t="X" i="122" b="0" n="0">    t_xml_code( xml_coding(3)%char, xml_coding_lead//trim(xml_coding(3)%name)//xml_coding_trail ), &amp;</line>
        <line t="X" i="123" b="0" n="0">    t_xml_code( xml_coding(4)%char, xml_coding_lead//trim(xml_coding(4)%name)//xml_coding_trail ), &amp;</line>
        <line t="X" i="124" b="0" n="0">    t_xml_code( xml_coding(5)%char, xml_coding_lead//trim(xml_coding(5)%name)//xml_coding_trail ) /)</line>
        <line t="X" i="125" b="0" n="0"></line>
        <line t="C" i="126" b="0" n="0">! Decimal encoder</line>
        <line t="X" i="127" b="0" n="0">  type(t_xml_code), dimension(5), parameter :: xml_code_decimal = (/ &amp;</line>
        <line t="X" i="128" b="0" n="0">    t_xml_code( xml_coding(1)%char, xml_coding_lead//xml_coding_dec_prefix//trim(xml_coding(1)%dec)//xml_coding_trail ), &amp;</line>
        <line t="X" i="129" b="0" n="0">    t_xml_code( xml_coding(2)%char, xml_coding_lead//xml_coding_dec_prefix//trim(xml_coding(2)%dec)//xml_coding_trail ), &amp;</line>
        <line t="X" i="130" b="0" n="0">    t_xml_code( xml_coding(3)%char, xml_coding_lead//xml_coding_dec_prefix//trim(xml_coding(3)%dec)//xml_coding_trail ), &amp;</line>
        <line t="X" i="131" b="0" n="0">    t_xml_code( xml_coding(4)%char, xml_coding_lead//xml_coding_dec_prefix//trim(xml_coding(4)%dec)//xml_coding_trail ), &amp;</line>
        <line t="X" i="132" b="0" n="0">    t_xml_code( xml_coding(5)%char, xml_coding_lead//xml_coding_dec_prefix//trim(xml_coding(5)%dec)//xml_coding_trail ) /)</line>
        <line t="X" i="133" b="0" n="0"></line>
        <line t="C" i="134" b="0" n="0">! HExadecimal encoder</line>
        <line t="X" i="135" b="0" n="0">  type(t_xml_code), dimension(5), parameter :: xml_code_hexadecimal = (/ &amp;</line>
        <line t="X" i="136" b="0" n="0">    t_xml_code( xml_coding(1)%char, xml_coding_lead//xml_coding_hex_prefix//trim(xml_coding(1)%hex)//xml_coding_trail ), &amp;</line>
        <line t="X" i="137" b="0" n="0">    t_xml_code( xml_coding(2)%char, xml_coding_lead//xml_coding_hex_prefix//trim(xml_coding(2)%hex)//xml_coding_trail ), &amp;</line>
        <line t="X" i="138" b="0" n="0">    t_xml_code( xml_coding(3)%char, xml_coding_lead//xml_coding_hex_prefix//trim(xml_coding(3)%hex)//xml_coding_trail ), &amp;</line>
        <line t="X" i="139" b="0" n="0">    t_xml_code( xml_coding(4)%char, xml_coding_lead//xml_coding_hex_prefix//trim(xml_coding(4)%hex)//xml_coding_trail ), &amp;</line>
        <line t="X" i="140" b="0" n="0">    t_xml_code( xml_coding(5)%char, xml_coding_lead//xml_coding_hex_prefix//trim(xml_coding(5)%hex)//xml_coding_trail ) /)</line>
        <line t="X" i="141" b="0" n="0"></line>
        <line t="C" i="142" b="0" n="0">! Default encoder</line>
        <line t="X" i="143" b="0" n="0">  type(t_xml_encoder), parameter :: xml_default_encoder = t_xml_encoder( xml_encode_name, xml_code_name )</line>
        <line t="X" i="144" b="0" n="0"></line>
        <line t="C" i="145" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="146" b="0" n="0"></line>
        <line t="X" i="147" b="0" n="0">contains</line>
        <line t="X" i="148" b="0" n="0"></line>
        <line t="C" i="149" b="0" n="0">! Constructor</line>
        <line k="xml_encoder_default" t="F" i="150" b="1" n="1">elemental function xml_encoder_default () result(res)</line>
        <line t="F" i="151" b="1" n="1"></line>
        <line t="C" i="152" b="1" n="1">! The returned encoder</line>
        <line t="X" i="153" b="1" n="1">  type(t_xml_encoder) :: res</line>
        <line t="X" i="154" b="1" n="1"></line>
        <line t="C" i="155" b="1" n="1">! Construct with default type</line>
        <line t="X" i="156" b="1" n="1">  res = xml_default_encoder</line>
        <line t="X" i="157" b="1" n="1"></line>
        <line t="EF" i="158" b="1" n="1">end function xml_encoder_default</line>
        <line t="EF" i="159" b="1" n="1"></line>
        <line t="EF" i="160" b="1" n="1"></line>
        <line t="C" i="161" b="1" n="1">! Constructor</line>
        <line k="xml_encoder_type" t="F" i="162" b="1" n="1">elemental function xml_encoder_type( type ) result(res)</line>
        <line t="F" i="163" b="1" n="1"></line>
        <line t="C" i="164" b="1" n="1">! The encoding type</line>
        <line t="X" i="165" b="1" n="1">  integer, intent(in) :: type</line>
        <line t="X" i="166" b="1" n="1"></line>
        <line t="C" i="167" b="1" n="1">! The returned encoder</line>
        <line t="X" i="168" b="1" n="1">  type(t_xml_encoder) :: res</line>
        <line t="X" i="169" b="1" n="1"></line>
        <line t="C" i="170" b="1" n="1">! Initialise the coders</line>
        <line t="X" i="171" b="1" n="1">  res%type = type</line>
        <line t="X" i="172" b="1" n="1"></line>
        <line t="C" i="173" b="1" n="1">! Check the encoding to be applied</line>
        <line t="X" i="174" b="1" n="2">  select case( res%type )</line>
        <line t="X" i="175" b="1" n="2"></line>
        <line t="C" i="176" b="1" n="2">!   No encoding</line>
        <line t="X" i="177" b="2" n="2">    case( xml_encode_none )</line>
        <line t="X" i="178" b="2" n="2"></line>
        <line t="C" i="179" b="2" n="2">!   Name encoding</line>
        <line t="X" i="180" b="3" n="2">    case( xml_encode_name )</line>
        <line t="X" i="181" b="3" n="2">      res%code = xml_code_name</line>
        <line t="X" i="182" b="3" n="2"></line>
        <line t="C" i="183" b="3" n="2">!   Decimal encoding</line>
        <line t="X" i="184" b="4" n="2">    case( xml_encode_decimal )</line>
        <line t="X" i="185" b="4" n="2">      res%code = xml_code_decimal</line>
        <line t="X" i="186" b="4" n="2"></line>
        <line t="C" i="187" b="4" n="2">!   Hexadecimal encoding</line>
        <line t="X" i="188" b="5" n="2">    case( xml_encode_hexadecimal )</line>
        <line t="X" i="189" b="5" n="2">      res%code = xml_code_hexadecimal</line>
        <line t="X" i="190" b="5" n="2"></line>
        <line t="X" i="191" b="5" n="1">  end select</line>
        <line t="X" i="192" b="5" n="1"></line>
        <line t="EF" i="193" b="5" n="1">end function xml_encoder_type</line>
        <line t="EF" i="194" b="1" n="1"></line>
        <line t="EF" i="195" b="1" n="1"></line>
        <line t="C" i="196" b="1" n="1">! Encode a character string to be XML compliant</line>
        <line k="xml_encoder_encode_string" t="F" i="197" b="1" n="1">elemental function xml_encoder_encode_string( this, str ) result(res)</line>
        <line t="F" i="198" b="1" n="1"></line>
        <line t="C" i="199" b="1" n="1">! The encoder</line>
        <line t="X" i="200" b="1" n="1">  class(t_xml_encoder), intent(in) :: this</line>
        <line t="X" i="201" b="1" n="1"></line>
        <line t="C" i="202" b="1" n="1">! The input character string</line>
        <line t="X" i="203" b="1" n="1">  type(t_string), intent(in) :: str</line>
        <line t="X" i="204" b="1" n="1"></line>
        <line t="C" i="205" b="1" n="1">! The encoded string</line>
        <line t="X" i="206" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="207" b="1" n="1"></line>
        <line t="C" i="208" b="1" n="1">! Encode for all characters</line>
        <line t="X" i="209" b="1" n="1">  res = this%xml_encoder_encode_character( str%character() )</line>
        <line t="X" i="210" b="1" n="1"></line>
        <line t="EF" i="211" b="1" n="1">end function xml_encoder_encode_string</line>
        <line t="EF" i="212" b="1" n="1"></line>
        <line t="EF" i="213" b="1" n="1"></line>
        <line t="C" i="214" b="1" n="1">! Encode a character string to be XML compliant</line>
        <line k="xml_encoder_encode_character" t="F" i="215" b="1" n="1">pure function xml_encoder_encode_character( this, str ) result(res)</line>
        <line t="F" i="216" b="1" n="1"></line>
        <line t="C" i="217" b="1" n="1">! The encoder</line>
        <line t="X" i="218" b="1" n="1">  class(t_xml_encoder), intent(in) :: this</line>
        <line t="X" i="219" b="1" n="1"></line>
        <line t="C" i="220" b="1" n="1">! The input character string</line>
        <line t="X" i="221" b="1" n="1">  character(len=*), intent(in) :: str</line>
        <line t="X" i="222" b="1" n="1"></line>
        <line t="C" i="223" b="1" n="1">! The encoded string</line>
        <line t="X" i="224" b="1" n="1">  character(len=:), allocatable :: res</line>
        <line t="X" i="225" b="1" n="1"></line>
        <line t="C" i="226" b="1" n="1">! Local variables</line>
        <line t="X" i="227" b="1" n="1">  integer :: i</line>
        <line t="X" i="228" b="1" n="1"></line>
        <line t="C" i="229" b="1" n="1">! Initialise</line>
        <line t="X" i="230" b="1" n="1">  res = str</line>
        <line t="X" i="231" b="1" n="1"></line>
        <line t="C" i="232" b="1" n="1">! Check is encoding enabled</line>
        <line t="X" i="233" b="2" n="2">  if( this%type /= xml_encode_none ) then</line>
        <line t="X" i="234" b="2" n="2"></line>
        <line t="C" i="235" b="2" n="2">!   Encode for all characters</line>
        <line t="X" i="236" b="3" n="3">    do i = 1, size(this%code)</line>
        <line t="X" i="237" b="3" n="3">      res = xml_encode_character( res, this%code(i) )</line>
        <line t="X" i="238" b="3" n="2">    end do</line>
        <line t="X" i="239" b="3" n="2"></line>
        <line t="X" i="240" b="3" n="1">  end if</line>
        <line t="X" i="241" b="3" n="1"></line>
        <line t="EF" i="242" b="3" n="1">end function xml_encoder_encode_character</line>
        <line t="EF" i="243" b="1" n="1"></line>
        <line t="EF" i="244" b="1" n="1"></line>
        <line t="C" i="245" b="1" n="1">! Encode one character</line>
        <line k="xml_encode_character" t="F" i="246" b="1" n="1">recursive pure function xml_encode_character( str, code ) result(res)</line>
        <line t="F" i="247" b="1" n="1"></line>
        <line t="C" i="248" b="1" n="1">! The input character string</line>
        <line t="X" i="249" b="1" n="1">  character(len=*), intent(in) :: str</line>
        <line t="X" i="250" b="1" n="1"></line>
        <line t="C" i="251" b="1" n="1">! The character to encode</line>
        <line t="X" i="252" b="1" n="1">  type(t_xml_code), intent(in) :: code</line>
        <line t="X" i="253" b="1" n="1"></line>
        <line t="C" i="254" b="1" n="1">! The encoded string</line>
        <line t="X" i="255" b="1" n="1">  character(len=:), allocatable :: res</line>
        <line t="X" i="256" b="1" n="1"></line>
        <line t="C" i="257" b="1" n="1">! Local variables</line>
        <line t="X" i="258" b="1" n="1">  integer :: idx</line>
        <line t="X" i="259" b="1" n="1"></line>
        <line t="C" i="260" b="1" n="1">! Find the character in the input string</line>
        <line t="X" i="261" b="1" n="1">  idx = index( str, code%char )</line>
        <line t="X" i="262" b="2" n="2">  if( idx &gt; 0 ) then</line>
        <line t="X" i="263" b="2" n="2"></line>
        <line t="C" i="264" b="2" n="2">!   Replace the character by its encoding</line>
        <line t="X" i="265" b="2" n="2">    res = str(1:idx-1) // &amp;</line>
        <line t="X" i="266" b="2" n="2">          trim(code%code) // &amp;</line>
        <line t="X" i="267" b="2" n="2">          xml_encode_character( str(idx+1:), code )</line>
        <line t="X" i="268" b="2" n="2"></line>
        <line t="X" i="269" b="3" n="2">  else</line>
        <line t="X" i="270" b="3" n="2"></line>
        <line t="C" i="271" b="3" n="2">!   No more to encode; exit reursion</line>
        <line t="X" i="272" b="3" n="2">    res = str</line>
        <line t="X" i="273" b="3" n="2"></line>
        <line t="X" i="274" b="3" n="1">  end if</line>
        <line t="X" i="275" b="3" n="1"></line>
        <line t="EF" i="276" b="3" n="1">end function xml_encode_character</line>
        <line t="EF" i="277" b="1" n="1"></line>
        <line t="EF" i="278" b="1" n="1"></line>
        <line t="C" i="279" b="1" n="1">! Decode a character string from XML compliant</line>
        <line k="xml_encoder_decode_string" t="F" i="280" b="1" n="1">elemental function xml_encoder_decode_string( this, str ) result(res)</line>
        <line t="F" i="281" b="1" n="1"></line>
        <line t="C" i="282" b="1" n="1">! The encoder</line>
        <line t="X" i="283" b="1" n="1">  class(t_xml_encoder), intent(in) :: this</line>
        <line t="X" i="284" b="1" n="1"></line>
        <line t="C" i="285" b="1" n="1">! The input character string</line>
        <line t="X" i="286" b="1" n="1">  type(t_string), intent(in) :: str</line>
        <line t="X" i="287" b="1" n="1"></line>
        <line t="C" i="288" b="1" n="1">! The decoded string</line>
        <line t="X" i="289" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="290" b="1" n="1"></line>
        <line t="C" i="291" b="1" n="1">! Decode for all characters</line>
        <line t="X" i="292" b="1" n="1">  res = this%xml_encoder_decode_character( str%character() )</line>
        <line t="X" i="293" b="1" n="1"></line>
        <line t="EF" i="294" b="1" n="1">end function xml_encoder_decode_string</line>
        <line t="EF" i="295" b="1" n="1"></line>
        <line t="EF" i="296" b="1" n="1"></line>
        <line t="C" i="297" b="1" n="1">! Decode a character string from XML compliant</line>
        <line k="xml_encoder_decode_character" t="F" i="298" b="1" n="1">pure function xml_encoder_decode_character( this, str ) result(res)</line>
        <line t="F" i="299" b="1" n="1"></line>
        <line t="C" i="300" b="1" n="1">! The encoder</line>
        <line t="X" i="301" b="1" n="1">  class(t_xml_encoder), intent(in) :: this</line>
        <line t="X" i="302" b="1" n="1"></line>
        <line t="C" i="303" b="1" n="1">! The input character string</line>
        <line t="X" i="304" b="1" n="1">  character(len=*), intent(in) :: str</line>
        <line t="X" i="305" b="1" n="1"></line>
        <line t="C" i="306" b="1" n="1">! The decoded string</line>
        <line t="X" i="307" b="1" n="1">  character(len=:), allocatable :: res</line>
        <line t="X" i="308" b="1" n="1"></line>
        <line t="C" i="309" b="1" n="1">! Local variables</line>
        <line t="X" i="310" b="1" n="1">  integer :: i</line>
        <line t="X" i="311" b="1" n="1"></line>
        <line t="C" i="312" b="1" n="1">! Initialise</line>
        <line t="X" i="313" b="1" n="1">  res = str</line>
        <line t="X" i="314" b="1" n="1"></line>
        <line t="C" i="315" b="1" n="1">! Check is encoding enabled</line>
        <line t="X" i="316" b="2" n="2">  if( this%type /= xml_encode_none ) then</line>
        <line t="X" i="317" b="2" n="2"></line>
        <line t="C" i="318" b="2" n="2">!   Decode for all characters</line>
        <line t="X" i="319" b="3" n="3">    do i = 1, size(this%code)</line>
        <line t="X" i="320" b="3" n="3">      res = xml_decode_character( res, this%code(i) )</line>
        <line t="X" i="321" b="3" n="2">    end do</line>
        <line t="X" i="322" b="3" n="2"></line>
        <line t="X" i="323" b="3" n="1">  end if</line>
        <line t="X" i="324" b="3" n="1"></line>
        <line t="EF" i="325" b="3" n="1">end function xml_encoder_decode_character</line>
        <line t="EF" i="326" b="1" n="1"></line>
        <line t="EF" i="327" b="1" n="1"></line>
        <line t="C" i="328" b="1" n="1">! Decode one encoded string</line>
        <line k="xml_decode_character" t="F" i="329" b="1" n="1">recursive pure function xml_decode_character( str, code ) result(res)</line>
        <line t="F" i="330" b="1" n="1"></line>
        <line t="C" i="331" b="1" n="1">! The input character string</line>
        <line t="X" i="332" b="1" n="1">  character(len=*), intent(in) :: str</line>
        <line t="X" i="333" b="1" n="1"></line>
        <line t="C" i="334" b="1" n="1">! The character to decode</line>
        <line t="X" i="335" b="1" n="1">  type(t_xml_code), intent(in) :: code</line>
        <line t="X" i="336" b="1" n="1"></line>
        <line t="C" i="337" b="1" n="1">! The decoded string</line>
        <line t="X" i="338" b="1" n="1">  character(len=:), allocatable :: res</line>
        <line t="X" i="339" b="1" n="1"></line>
        <line t="C" i="340" b="1" n="1">! Local variables</line>
        <line t="X" i="341" b="1" n="1">  integer :: idx, codelen</line>
        <line t="X" i="342" b="1" n="1"></line>
        <line t="C" i="343" b="1" n="1">! Initialise</line>
        <line t="X" i="344" b="1" n="1">  codelen = len_trim(code%code)</line>
        <line t="X" i="345" b="1" n="1"></line>
        <line t="C" i="346" b="1" n="1">! Find the encoded string in the input string</line>
        <line t="X" i="347" b="1" n="1">  idx = index( str, trim(code%code) )</line>
        <line t="X" i="348" b="2" n="2">  if( idx &gt; 0 ) then</line>
        <line t="X" i="349" b="2" n="2"></line>
        <line t="C" i="350" b="2" n="2">!   Recusrively replace the encoded string by its character</line>
        <line t="X" i="351" b="2" n="2">    res = str(1:idx-1) // &amp;</line>
        <line t="X" i="352" b="2" n="2">          code%char // &amp;</line>
        <line t="X" i="353" b="2" n="2">          xml_decode_character( str(idx+codelen:), code )</line>
        <line t="X" i="354" b="2" n="2"></line>
        <line t="X" i="355" b="3" n="2">  else</line>
        <line t="X" i="356" b="3" n="2"></line>
        <line t="C" i="357" b="3" n="2">!   No more to encode; exit recursion</line>
        <line t="X" i="358" b="3" n="2">    res = str</line>
        <line t="X" i="359" b="3" n="2"></line>
        <line t="X" i="360" b="3" n="1">  end if</line>
        <line t="X" i="361" b="3" n="1"></line>
        <line t="EF" i="362" b="3" n="1">end function xml_decode_character</line>
        <line t="EF" i="363" b="1" n="1"></line>
        <line t="M" i="364" b="1" n="1">end module m_xml_encoder</line>
        <line t="M" i="365" b="1" n="1"></line>
    </code>
</fmx>