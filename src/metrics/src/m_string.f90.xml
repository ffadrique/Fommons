<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_string.f90">
    <context>
        <time>2025-03-09T18:18:31</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Fommons</project>
        <name>m_string.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_string" type="module">
            <main>
                <lines>
                    <source percent="67.18">219</source>
                    <comments percent="18.71">61</comments>
                    <empty percent="14.11">46</empty>
                    <total>326</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="char_alloc_assign_from_string" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_concat_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_concat_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_equal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_greater_equal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_greater_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_less_equal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_less_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="char_nonequal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_adjustl" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_adjustr" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_array" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_array_selected" type="function">
                    <statistics>
                        <lines>
                            <source percent="34.48">10</source>
                            <comments percent="27.59">8</comments>
                            <empty percent="37.93">11</empty>
                            <total>29</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_array_selected_with_end" type="function">
                    <statistics>
                        <lines>
                            <source percent="34.38">11</source>
                            <comments percent="28.13">9</comments>
                            <empty percent="37.50">12</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_assign" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_assign_from_char" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_assign_from_string" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.50">13</source>
                            <comments percent="42.50">17</comments>
                            <empty percent="25.00">10</empty>
                            <total>40</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_concat_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_concat_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_equal_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_equal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_equals" type="function">
                    <statistics>
                        <lines>
                            <source percent="47.83">11</source>
                            <comments percent="21.74">5</comments>
                            <empty percent="30.43">7</empty>
                            <total>23</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_from_array" type="function">
                    <statistics>
                        <lines>
                            <source percent="37.50">6</source>
                            <comments percent="25.00">4</comments>
                            <empty percent="37.50">6</empty>
                            <total>16</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_from_array_selected" type="function">
                    <statistics>
                        <lines>
                            <source percent="43.75">14</source>
                            <comments percent="25.00">8</comments>
                            <empty percent="31.25">10</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_from_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="25.00">6</comments>
                            <empty percent="41.67">10</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_from_char_selected" type="function">
                    <statistics>
                        <lines>
                            <source percent="41.94">13</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="32.26">10</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_from_empty" type="function">
                    <statistics>
                        <lines>
                            <source percent="35.29">6</source>
                            <comments percent="29.41">5</comments>
                            <empty percent="35.29">6</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_from_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_from_string_selected" type="function">
                    <statistics>
                        <lines>
                            <source percent="41.94">13</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="32.26">10</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_greater_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_greater_equal_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_greater_equal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_greater_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_index_c" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_index_s" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_is_initialised" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_join_char" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="38.46">10</source>
                            <comments percent="26.92">7</comments>
                            <empty percent="34.62">9</empty>
                            <total>26</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_join_string" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_len" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_len_strip" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_len_trim" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_less" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_less_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_less_equal_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_less_equal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_less_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_lowercase" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_match_c" type="function">
                    <statistics>
                        <lines>
                            <source percent="40.56">58</source>
                            <comments percent="28.67">41</comments>
                            <empty percent="30.77">44</empty>
                            <total>143</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>18</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_match_s" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_nonequal_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_nonequal_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_pattern_compress" type="function">
                    <statistics>
                        <lines>
                            <source percent="50.00">43</source>
                            <comments percent="24.42">21</comments>
                            <empty percent="25.58">22</empty>
                            <total>86</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>10</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_read" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="46.67">14</source>
                            <comments percent="23.33">7</comments>
                            <empty percent="30.00">9</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_replace_c" type="function">
                    <statistics>
                        <lines>
                            <source percent="44.83">13</source>
                            <comments percent="24.14">7</comments>
                            <empty percent="31.03">9</empty>
                            <total>29</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_replace_s" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_scan_c" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_scan_s" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_split" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="50.62">41</source>
                            <comments percent="22.22">18</comments>
                            <empty percent="27.16">22</empty>
                            <total>81</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>12</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_strip" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_to_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_to_char_selected" type="function">
                    <statistics>
                        <lines>
                            <source percent="41.94">13</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="32.26">10</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_token_count" type="function">
                    <statistics>
                        <lines>
                            <source percent="53.57">30</source>
                            <comments percent="21.43">12</comments>
                            <empty percent="25.00">14</empty>
                            <total>56</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>8</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_trim" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_uppercase" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_verify_c" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_verify_s" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="string_write" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="48.15">13</source>
                            <comments percent="22.22">6</comments>
                            <empty percent="29.63">8</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="43.04">838</source>
                    <comments percent="25.53">497</comments>
                    <empty percent="31.43">612</empty>
                    <total>1947</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>18</maximum>
                    <average>2.01</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>6</maximum>
                    <average>1.48</average>
                </nesting>
                <methods>67</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="43.04">838</source>
            <comments percent="25.53">497</comments>
            <empty percent="31.43">612</empty>
            <total>1947</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>18</maximum>
            <average>2.01</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>6</maximum>
            <average>1.48</average>
        </nesting>
        <methods>67</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_string</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Dynamic character string</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of Fommons.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             Fommons is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             Fommons is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with Fommons.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use m_util_convert</line>
        <line t="X" i="30" b="0" n="0">  use m_object</line>
        <line t="X" i="31" b="0" n="0"></line>
        <line t="C" i="32" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="33" b="0" n="0"></line>
        <line t="X" i="34" b="0" n="0">  implicit none</line>
        <line t="X" i="35" b="0" n="0"></line>
        <line t="C" i="36" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="37" b="0" n="0"></line>
        <line t="X" i="38" b="0" n="0">  private</line>
        <line t="X" i="39" b="0" n="0">  public t_string</line>
        <line t="X" i="40" b="0" n="0">  public string</line>
        <line t="X" i="41" b="0" n="0"></line>
        <line t="X" i="42" b="0" n="0">  public len, len_trim, trim, adjustl, adjustr, strip, len_strip, &amp;</line>
        <line t="X" i="43" b="0" n="0">         index, scan, verify, &amp;</line>
        <line t="X" i="44" b="0" n="0">         lge, lgt, lle, llt</line>
        <line t="X" i="45" b="0" n="0"></line>
        <line t="X" i="46" b="0" n="0">  public operator(+), character, match, replace, lowercase, uppercase</line>
        <line t="X" i="47" b="0" n="0"></line>
        <line t="C" i="48" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="49" b="0" n="0"></line>
        <line t="C" i="50" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="51" b="0" n="0"></line>
        <line t="C" i="52" b="0" n="0">! String type</line>
        <line t="T" i="53" b="0" n="0">  type, extends(t_object) :: t_string</line>
        <line t="X" i="54" b="0" n="0">    private</line>
        <line t="X" i="55" b="0" n="0"></line>
        <line t="C" i="56" b="0" n="0">!     String buffer</line>
        <line t="X" i="57" b="0" n="0">      character(len=:), allocatable :: buffer</line>
        <line t="X" i="58" b="0" n="0"></line>
        <line t="X" i="59" b="0" n="0">    contains</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="C" i="61" b="0" n="0">!     Initialisation status</line>
        <line t="X" i="62" b="0" n="0">      procedure :: is_initialised =&gt; string_is_initialised</line>
        <line t="X" i="63" b="0" n="0"></line>
        <line t="C" i="64" b="0" n="0">!     Assignement operator</line>
        <line t="X" i="65" b="0" n="0">      generic :: assignment(=) =&gt; string_assign_from_char, &amp;</line>
        <line t="C" i="66" b="0" n="0">!                                  string_assign_from_array, &amp;</line>
        <line t="X" i="67" b="0" n="0">                                  string_assign_from_string, &amp;</line>
        <line t="X" i="68" b="0" n="0">                                  char_alloc_assign_from_string</line>
        <line t="X" i="69" b="0" n="0">      procedure, private :: string_assign_from_char</line>
        <line t="C" i="70" b="0" n="0">!      procedure, private :: string_assign_from_array</line>
        <line t="X" i="71" b="0" n="0">      procedure, private :: string_assign_from_string</line>
        <line t="X" i="72" b="0" n="0">      procedure, private, pass(right) :: char_alloc_assign_from_string</line>
        <line t="X" i="73" b="0" n="0"></line>
        <line t="C" i="74" b="0" n="0">!     Concatenation operators</line>
        <line t="X" i="75" b="0" n="0">      generic :: operator(+) =&gt; string_concat_string, &amp;</line>
        <line t="X" i="76" b="0" n="0">                                string_concat_char, &amp;</line>
        <line t="X" i="77" b="0" n="0">                                char_concat_string</line>
        <line t="X" i="78" b="0" n="0">      generic :: operator(//) =&gt; string_concat_string, &amp;</line>
        <line t="X" i="79" b="0" n="0">                                 string_concat_char, &amp;</line>
        <line t="X" i="80" b="0" n="0">                                 char_concat_string</line>
        <line t="X" i="81" b="0" n="0">      procedure, private :: string_concat_string</line>
        <line t="X" i="82" b="0" n="0">      procedure, private :: string_concat_char</line>
        <line t="X" i="83" b="0" n="0">      procedure, private, pass(right) :: char_concat_string</line>
        <line t="X" i="84" b="0" n="0"></line>
        <line t="C" i="85" b="0" n="0">!     Tokenize functions</line>
        <line t="X" i="86" b="0" n="0">      procedure, private :: token_count =&gt; string_token_count</line>
        <line t="X" i="87" b="0" n="0">      procedure :: split =&gt; string_split</line>
        <line t="X" i="88" b="0" n="0">      generic :: join =&gt; string_join_char, string_join_string</line>
        <line t="X" i="89" b="0" n="0">      procedure, private :: string_join_char</line>
        <line t="X" i="90" b="0" n="0">      procedure, private :: string_join_string</line>
        <line t="X" i="91" b="0" n="0"></line>
        <line t="C" i="92" b="0" n="0">!     Equality overriding</line>
        <line t="X" i="93" b="0" n="0">      procedure :: equals =&gt; string_equals</line>
        <line t="X" i="94" b="0" n="0"></line>
        <line t="C" i="95" b="0" n="0">!     Equality operator</line>
        <line t="X" i="96" b="0" n="0">      generic :: operator(==) =&gt; string_equal_string, &amp;</line>
        <line t="X" i="97" b="0" n="0">                                 string_equal_char, &amp;</line>
        <line t="X" i="98" b="0" n="0">                                 char_equal_string</line>
        <line t="X" i="99" b="0" n="0">      procedure, private :: string_equal_string</line>
        <line t="X" i="100" b="0" n="0">      procedure, private :: string_equal_char</line>
        <line t="X" i="101" b="0" n="0">      procedure, private, pass(right) :: char_equal_string</line>
        <line t="X" i="102" b="0" n="0"></line>
        <line t="C" i="103" b="0" n="0">!     Inequality operator</line>
        <line t="X" i="104" b="0" n="0">      generic :: operator(/=) =&gt; string_nonequal_string, &amp;</line>
        <line t="X" i="105" b="0" n="0">                                 string_nonequal_char, &amp;</line>
        <line t="X" i="106" b="0" n="0">                                 char_nonequal_string</line>
        <line t="X" i="107" b="0" n="0">      procedure, private :: string_nonequal_string</line>
        <line t="X" i="108" b="0" n="0">      procedure, private :: string_nonequal_char</line>
        <line t="X" i="109" b="0" n="0">      procedure, private, pass(right) :: char_nonequal_string</line>
        <line t="X" i="110" b="0" n="0"></line>
        <line t="C" i="111" b="0" n="0">!     Comparison (greater than) operator</line>
        <line t="X" i="112" b="0" n="0">      generic :: operator(&gt;) =&gt; string_greater_string, &amp;</line>
        <line t="X" i="113" b="0" n="0">                                string_greater_char, &amp;</line>
        <line t="X" i="114" b="0" n="0">                                char_greater_string</line>
        <line t="X" i="115" b="0" n="0">      procedure, private :: string_greater_string</line>
        <line t="X" i="116" b="0" n="0">      procedure, private :: string_greater_char</line>
        <line t="X" i="117" b="0" n="0">      procedure, private, pass(right) :: char_greater_string</line>
        <line t="X" i="118" b="0" n="0"></line>
        <line t="C" i="119" b="0" n="0">!     Comparison (greater than or equal) operator</line>
        <line t="X" i="120" b="0" n="0">      generic :: operator(&gt;=) =&gt; string_greater_equal_string, &amp;</line>
        <line t="X" i="121" b="0" n="0">                                 string_greater_equal_char, &amp;</line>
        <line t="X" i="122" b="0" n="0">                                 char_greater_equal_string</line>
        <line t="X" i="123" b="0" n="0">      procedure, private :: string_greater_equal_string</line>
        <line t="X" i="124" b="0" n="0">      procedure, private :: string_greater_equal_char</line>
        <line t="X" i="125" b="0" n="0">      procedure, private, pass(right) :: char_greater_equal_string</line>
        <line t="X" i="126" b="0" n="0"></line>
        <line t="C" i="127" b="0" n="0">!     Comparison (less than) operator</line>
        <line t="X" i="128" b="0" n="0">      generic :: operator(&lt;) =&gt; string_less_string, &amp;</line>
        <line t="X" i="129" b="0" n="0">                                string_less_char, &amp;</line>
        <line t="X" i="130" b="0" n="0">                                char_less_string</line>
        <line t="X" i="131" b="0" n="0">      procedure, private :: string_less_string</line>
        <line t="X" i="132" b="0" n="0">      procedure, private :: string_less_char</line>
        <line t="X" i="133" b="0" n="0">      procedure, private, pass(right) :: char_less_string</line>
        <line t="X" i="134" b="0" n="0"></line>
        <line t="C" i="135" b="0" n="0">!     Comparison (less than or equal) operator</line>
        <line t="X" i="136" b="0" n="0">      generic :: operator(&lt;=) =&gt; string_less_equal_string, &amp;</line>
        <line t="X" i="137" b="0" n="0">                                 string_less_equal_char, &amp;</line>
        <line t="X" i="138" b="0" n="0">                                 char_less_equal_string</line>
        <line t="X" i="139" b="0" n="0">      procedure, private :: string_less_equal_string</line>
        <line t="X" i="140" b="0" n="0">      procedure, private :: string_less_equal_char</line>
        <line t="X" i="141" b="0" n="0">      procedure, private, pass(right) :: char_less_equal_string</line>
        <line t="X" i="142" b="0" n="0"></line>
        <line t="C" i="143" b="0" n="0">!     Conversion to intrinsic character</line>
        <line t="X" i="144" b="0" n="0">      generic :: character =&gt; string_to_char, &amp;</line>
        <line t="X" i="145" b="0" n="0">                              string_to_char_selected</line>
        <line t="X" i="146" b="0" n="0">      procedure, private :: string_to_char</line>
        <line t="X" i="147" b="0" n="0">      procedure, private :: string_to_char_selected</line>
        <line t="X" i="148" b="0" n="0"></line>
        <line t="C" i="149" b="0" n="0">!     String replacement</line>
        <line t="X" i="150" b="0" n="0">      procedure :: replace =&gt; string_replace_s</line>
        <line t="X" i="151" b="0" n="0"></line>
        <line t="C" i="152" b="0" n="0">!     Aliases to make the type compatible with intrinsic character</line>
        <line t="X" i="153" b="0" n="0">      generic :: len =&gt; string_len</line>
        <line t="X" i="154" b="0" n="0">      procedure, private :: string_len</line>
        <line t="X" i="155" b="0" n="0">      generic :: len_trim =&gt; string_len_trim</line>
        <line t="X" i="156" b="0" n="0">      procedure, private :: string_len_trim</line>
        <line t="X" i="157" b="0" n="0">      generic :: trim =&gt; string_trim</line>
        <line t="X" i="158" b="0" n="0">      procedure, private :: string_trim</line>
        <line t="X" i="159" b="0" n="0">      generic :: adjustl =&gt; string_adjustl</line>
        <line t="X" i="160" b="0" n="0">      procedure, private :: string_adjustl</line>
        <line t="X" i="161" b="0" n="0">      generic :: adjustr =&gt; string_adjustr</line>
        <line t="X" i="162" b="0" n="0">      procedure, private :: string_adjustr</line>
        <line t="X" i="163" b="0" n="0">      generic :: index =&gt; string_index_c, &amp;</line>
        <line t="X" i="164" b="0" n="0">                          string_index_s</line>
        <line t="X" i="165" b="0" n="0">      procedure, private :: string_index_c</line>
        <line t="X" i="166" b="0" n="0">      procedure, private :: string_index_s</line>
        <line t="X" i="167" b="0" n="0">      generic :: scan =&gt; string_scan_c, &amp;</line>
        <line t="X" i="168" b="0" n="0">                         string_scan_s</line>
        <line t="X" i="169" b="0" n="0">      procedure, private :: string_scan_c</line>
        <line t="X" i="170" b="0" n="0">      procedure, private :: string_scan_s</line>
        <line t="X" i="171" b="0" n="0">      generic :: verify =&gt; string_verify_c, &amp;</line>
        <line t="X" i="172" b="0" n="0">                           string_verify_s</line>
        <line t="X" i="173" b="0" n="0">      procedure, private :: string_verify_c</line>
        <line t="X" i="174" b="0" n="0">      procedure, private :: string_verify_s</line>
        <line t="X" i="175" b="0" n="0"></line>
        <line t="C" i="176" b="0" n="0">!     Character intrinsic function extensions</line>
        <line t="X" i="177" b="0" n="0">      generic :: len_strip =&gt; string_len_strip</line>
        <line t="X" i="178" b="0" n="0">      procedure, private :: string_len_strip</line>
        <line t="X" i="179" b="0" n="0">      procedure :: strip =&gt; string_strip</line>
        <line t="X" i="180" b="0" n="0"></line>
        <line t="C" i="181" b="0" n="0">!     Character compatibility interfaces</line>
        <line t="X" i="182" b="0" n="0">      generic :: lgt =&gt; string_greater_string, &amp;</line>
        <line t="X" i="183" b="0" n="0">                        string_greater_char</line>
        <line t="X" i="184" b="0" n="0">      generic :: lge =&gt; string_greater_equal_string, &amp;</line>
        <line t="X" i="185" b="0" n="0">                        string_greater_equal_char</line>
        <line t="X" i="186" b="0" n="0">      generic :: llt =&gt; string_less_string, &amp;</line>
        <line t="X" i="187" b="0" n="0">                        string_less_char</line>
        <line t="X" i="188" b="0" n="0">      generic :: lle =&gt; string_less_equal_string, &amp;</line>
        <line t="X" i="189" b="0" n="0">                        string_less_equal_char</line>
        <line t="X" i="190" b="0" n="0"></line>
        <line t="C" i="191" b="0" n="0">!     Pattern matching with wildcards</line>
        <line t="X" i="192" b="0" n="0">      generic :: match =&gt; string_match_s</line>
        <line t="X" i="193" b="0" n="0">      procedure, private :: string_match_s</line>
        <line t="X" i="194" b="0" n="0"></line>
        <line t="C" i="195" b="0" n="0">!     Lowercase and uppercase</line>
        <line t="X" i="196" b="0" n="0">      generic :: lowercase =&gt; string_lowercase</line>
        <line t="X" i="197" b="0" n="0">      procedure, private :: string_lowercase</line>
        <line t="X" i="198" b="0" n="0">      generic :: uppercase =&gt; string_uppercase</line>
        <line t="X" i="199" b="0" n="0">      procedure, private :: string_uppercase</line>
        <line t="X" i="200" b="0" n="0"></line>
        <line t="C" i="201" b="0" n="0">!     Interface to array</line>
        <line t="X" i="202" b="0" n="0">      generic :: array =&gt; string_array, &amp;</line>
        <line t="X" i="203" b="0" n="0">                          string_array_selected, &amp;</line>
        <line t="X" i="204" b="0" n="0">                          string_array_selected_with_end</line>
        <line t="X" i="205" b="0" n="0">      procedure, private :: string_array</line>
        <line t="X" i="206" b="0" n="0">      procedure, private :: string_array_selected</line>
        <line t="X" i="207" b="0" n="0">      procedure, private :: string_array_selected_with_end</line>
        <line t="X" i="208" b="0" n="0"></line>
        <line t="C" i="209" b="0" n="0">!     Read/write interafaces</line>
        <line t="X" i="210" b="0" n="0">      generic :: read =&gt; string_read</line>
        <line t="X" i="211" b="0" n="0">      procedure, private :: string_read</line>
        <line t="X" i="212" b="0" n="0">      generic :: write =&gt; string_write</line>
        <line t="X" i="213" b="0" n="0">      procedure, private :: string_write</line>
        <line t="X" i="214" b="0" n="0"></line>
        <line t="C" i="215" b="0" n="0">!     Methods to make t_string quicksortable</line>
        <line t="X" i="216" b="0" n="0">      procedure :: less =&gt; string_less</line>
        <line t="X" i="217" b="0" n="0">      procedure :: assign =&gt; string_assign</line>
        <line t="X" i="218" b="0" n="0">      procedure :: string =&gt; string_to_char</line>
        <line t="X" i="219" b="0" n="0"></line>
        <line t="T" i="220" b="0" n="0">  end type t_string</line>
        <line t="T" i="221" b="0" n="0"></line>
        <line t="C" i="222" b="0" n="0">! Constructor interface</line>
        <line t="X" i="223" b="0" n="0">  interface string</line>
        <line t="X" i="224" b="0" n="0">    module procedure string_from_empty</line>
        <line t="X" i="225" b="0" n="0">    module procedure string_from_char</line>
        <line t="X" i="226" b="0" n="0">    module procedure string_from_char_selected</line>
        <line t="X" i="227" b="0" n="0">    module procedure string_from_array</line>
        <line t="X" i="228" b="0" n="0">    module procedure string_from_array_selected</line>
        <line t="X" i="229" b="0" n="0">    module procedure string_from_string</line>
        <line t="X" i="230" b="0" n="0">    module procedure string_from_string_selected</line>
        <line t="X" i="231" b="0" n="0">  end interface string</line>
        <line t="X" i="232" b="0" n="0"></line>
        <line t="C" i="233" b="0" n="0">! Interfaces to allow character + character</line>
        <line t="X" i="234" b="0" n="0">  interface operator(+)</line>
        <line t="X" i="235" b="0" n="0">    module procedure char_concat_char</line>
        <line t="X" i="236" b="0" n="0">  end interface operator(+)</line>
        <line t="X" i="237" b="0" n="0"></line>
        <line t="C" i="238" b="0" n="0">! The blank character</line>
        <line t="X" i="239" b="0" n="0">  character, parameter :: blank = ' '</line>
        <line t="X" i="240" b="0" n="0"></line>
        <line t="C" i="241" b="0" n="0">! Wildcard for pattern matching</line>
        <line t="X" i="242" b="0" n="0">  character, parameter :: single_wildcard   = '?'</line>
        <line t="X" i="243" b="0" n="0">  character, parameter :: multiple_wildcard = '*'</line>
        <line t="X" i="244" b="0" n="0"></line>
        <line t="C" i="245" b="0" n="0">! Interfaces for character intrinsic function extensions</line>
        <line t="X" i="246" b="0" n="0">  interface len_strip</line>
        <line t="X" i="247" b="0" n="0">    module procedure string_len_strip</line>
        <line t="X" i="248" b="0" n="0">  end interface len_strip</line>
        <line t="X" i="249" b="0" n="0">  interface strip</line>
        <line t="X" i="250" b="0" n="0">    module procedure string_strip</line>
        <line t="X" i="251" b="0" n="0">  end interface strip</line>
        <line t="X" i="252" b="0" n="0">  interface character</line>
        <line t="X" i="253" b="0" n="0">    module procedure string_to_char</line>
        <line t="X" i="254" b="0" n="0">    module procedure string_to_char_selected</line>
        <line t="X" i="255" b="0" n="0">  end interface character</line>
        <line t="X" i="256" b="0" n="0">  interface replace</line>
        <line t="X" i="257" b="0" n="0">    module procedure string_replace_c</line>
        <line t="X" i="258" b="0" n="0">    module procedure string_replace_s</line>
        <line t="X" i="259" b="0" n="0">  end interface replace</line>
        <line t="X" i="260" b="0" n="0">  interface match</line>
        <line t="X" i="261" b="0" n="0">    module procedure string_match_c</line>
        <line t="X" i="262" b="0" n="0">    module procedure string_match_s</line>
        <line t="X" i="263" b="0" n="0">  end interface match</line>
        <line t="X" i="264" b="0" n="0"></line>
        <line t="C" i="265" b="0" n="0">! Aliases to make the type compatible with intrinsic character string</line>
        <line t="X" i="266" b="0" n="0">  interface len</line>
        <line t="X" i="267" b="0" n="0">    module procedure string_len</line>
        <line t="X" i="268" b="0" n="0">  end interface len</line>
        <line t="X" i="269" b="0" n="0">  interface len_trim</line>
        <line t="X" i="270" b="0" n="0">    module procedure string_len_trim</line>
        <line t="X" i="271" b="0" n="0">  end interface len_trim</line>
        <line t="X" i="272" b="0" n="0">  interface trim</line>
        <line t="X" i="273" b="0" n="0">    module procedure string_trim</line>
        <line t="X" i="274" b="0" n="0">  end interface trim</line>
        <line t="X" i="275" b="0" n="0">  interface adjustl</line>
        <line t="X" i="276" b="0" n="0">    module procedure string_adjustl</line>
        <line t="X" i="277" b="0" n="0">  end interface adjustl</line>
        <line t="X" i="278" b="0" n="0">  interface adjustr</line>
        <line t="X" i="279" b="0" n="0">    module procedure string_adjustr</line>
        <line t="X" i="280" b="0" n="0">  end interface adjustr</line>
        <line t="X" i="281" b="0" n="0">  interface index</line>
        <line t="X" i="282" b="0" n="0">    module procedure string_index_c</line>
        <line t="X" i="283" b="0" n="0">    module procedure string_index_s</line>
        <line t="X" i="284" b="0" n="0">  end interface index</line>
        <line t="X" i="285" b="0" n="0">  interface scan</line>
        <line t="X" i="286" b="0" n="0">    module procedure string_scan_c</line>
        <line t="X" i="287" b="0" n="0">    module procedure string_scan_s</line>
        <line t="X" i="288" b="0" n="0">  end interface scan</line>
        <line t="X" i="289" b="0" n="0">  interface verify</line>
        <line t="X" i="290" b="0" n="0">    module procedure string_verify_c</line>
        <line t="X" i="291" b="0" n="0">    module procedure string_verify_s</line>
        <line t="X" i="292" b="0" n="0">  end interface verify</line>
        <line t="X" i="293" b="0" n="0">  interface lgt</line>
        <line t="X" i="294" b="0" n="0">    module procedure string_greater_string</line>
        <line t="X" i="295" b="0" n="0">    module procedure string_greater_char</line>
        <line t="X" i="296" b="0" n="0">    module procedure char_greater_string</line>
        <line t="X" i="297" b="0" n="0">  end interface lgt</line>
        <line t="X" i="298" b="0" n="0">  interface lge</line>
        <line t="X" i="299" b="0" n="0">    module procedure string_greater_equal_string</line>
        <line t="X" i="300" b="0" n="0">    module procedure string_greater_equal_char</line>
        <line t="X" i="301" b="0" n="0">    module procedure char_greater_equal_string</line>
        <line t="X" i="302" b="0" n="0">  end interface lge</line>
        <line t="X" i="303" b="0" n="0">  interface llt</line>
        <line t="X" i="304" b="0" n="0">    module procedure string_less_string</line>
        <line t="X" i="305" b="0" n="0">    module procedure string_less_char</line>
        <line t="X" i="306" b="0" n="0">    module procedure char_less_string</line>
        <line t="X" i="307" b="0" n="0">  end interface llt</line>
        <line t="X" i="308" b="0" n="0">  interface lle</line>
        <line t="X" i="309" b="0" n="0">    module procedure string_less_equal_string</line>
        <line t="X" i="310" b="0" n="0">    module procedure string_less_equal_char</line>
        <line t="X" i="311" b="0" n="0">    module procedure char_less_equal_string</line>
        <line t="X" i="312" b="0" n="0">  end interface lle</line>
        <line t="X" i="313" b="0" n="0"></line>
        <line t="C" i="314" b="0" n="0">! Additional convenience interfaces</line>
        <line t="X" i="315" b="0" n="0">  interface lowercase</line>
        <line t="X" i="316" b="0" n="0">    module procedure string_lowercase</line>
        <line t="X" i="317" b="0" n="0">  end interface lowercase</line>
        <line t="X" i="318" b="0" n="0">  interface uppercase</line>
        <line t="X" i="319" b="0" n="0">    module procedure string_uppercase</line>
        <line t="X" i="320" b="0" n="0">  end interface uppercase</line>
        <line t="X" i="321" b="0" n="0"></line>
        <line t="C" i="322" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="323" b="0" n="0"></line>
        <line t="X" i="324" b="0" n="0">contains</line>
        <line t="X" i="325" b="0" n="0"></line>
        <line t="C" i="326" b="0" n="0">! Constructor for empty string of given size</line>
        <line k="string_from_empty" t="F" i="327" b="1" n="1">elemental function string_from_empty( n ) result(this)</line>
        <line t="F" i="328" b="1" n="1"></line>
        <line t="C" i="329" b="1" n="1">! The string size in bytes</line>
        <line t="X" i="330" b="1" n="1">  integer, intent(in) :: n</line>
        <line t="X" i="331" b="1" n="1"></line>
        <line t="C" i="332" b="1" n="1">! The string</line>
        <line t="X" i="333" b="1" n="1">  type(t_string) :: this</line>
        <line t="X" i="334" b="1" n="1"></line>
        <line t="C" i="335" b="1" n="1">! Allocate the string</line>
        <line t="X" i="336" b="1" n="1">  allocate( character(len=n) :: this%buffer )</line>
        <line t="X" i="337" b="1" n="1"></line>
        <line t="C" i="338" b="1" n="1">! Initialise to blanks</line>
        <line t="X" i="339" b="1" n="1">  this%buffer = blank</line>
        <line t="X" i="340" b="1" n="1"></line>
        <line t="EF" i="341" b="1" n="1">end function string_from_empty</line>
        <line t="EF" i="342" b="1" n="1"></line>
        <line t="EF" i="343" b="1" n="1"></line>
        <line t="C" i="344" b="1" n="1">! Constructor from character</line>
        <line k="string_from_char" t="F" i="345" b="1" n="1">elemental function string_from_char( c ) result(res)</line>
        <line t="F" i="346" b="1" n="1"></line>
        <line t="C" i="347" b="1" n="1">! The character string to use as initialisation (optional)</line>
        <line t="X" i="348" b="1" n="1">  character(len=*), optional, intent(in) :: c</line>
        <line t="X" i="349" b="1" n="1"></line>
        <line t="C" i="350" b="1" n="1">! The string</line>
        <line t="X" i="351" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="352" b="1" n="1"></line>
        <line t="C" i="353" b="1" n="1">! Check input character string</line>
        <line t="X" i="354" b="2" n="2">  if( present(c) ) then</line>
        <line t="X" i="355" b="2" n="2"></line>
        <line t="C" i="356" b="2" n="2">!   Initialise from input</line>
        <line t="X" i="357" b="2" n="2">    res%buffer = c</line>
        <line t="X" i="358" b="2" n="2"></line>
        <line t="X" i="359" b="3" n="2">  else</line>
        <line t="X" i="360" b="3" n="2"></line>
        <line t="C" i="361" b="3" n="2">!   Initialisation by default</line>
        <line t="C" i="362" b="3" n="2"></line>
        <line t="X" i="363" b="3" n="1">  end if</line>
        <line t="X" i="364" b="3" n="1"></line>
        <line t="EF" i="365" b="3" n="1">end function string_from_char</line>
        <line t="EF" i="366" b="1" n="1"></line>
        <line t="EF" i="367" b="1" n="1"></line>
        <line t="C" i="368" b="1" n="1">! Constructor from part of character</line>
        <line k="string_from_char_selected" t="F" i="369" b="1" n="1">elemental function string_from_char_selected( c, start, end ) result(res)</line>
        <line t="F" i="370" b="1" n="1"></line>
        <line t="C" i="371" b="1" n="1">! The character string to use as initialisation (optional)</line>
        <line t="X" i="372" b="1" n="1">  character(len=*), intent(in) :: c</line>
        <line t="X" i="373" b="1" n="1"></line>
        <line t="C" i="374" b="1" n="1">! The first character to select</line>
        <line t="X" i="375" b="1" n="1">  integer, intent(in) :: start</line>
        <line t="X" i="376" b="1" n="1"></line>
        <line t="C" i="377" b="1" n="1">! The last character to select (defaults to last)</line>
        <line t="X" i="378" b="1" n="1">  integer, optional, intent(in) :: end</line>
        <line t="X" i="379" b="1" n="1"></line>
        <line t="C" i="380" b="1" n="1">! The string</line>
        <line t="X" i="381" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="382" b="1" n="1"></line>
        <line t="C" i="383" b="1" n="1">! Local variables</line>
        <line t="X" i="384" b="1" n="1">  integer :: iend</line>
        <line t="X" i="385" b="1" n="1"></line>
        <line t="C" i="386" b="1" n="1">! Select the indexes</line>
        <line t="X" i="387" b="2" n="2">  if( present(end) ) then</line>
        <line t="X" i="388" b="2" n="2">    iend = min( end, len(c) )</line>
        <line t="X" i="389" b="3" n="2">  else</line>
        <line t="X" i="390" b="3" n="2">    iend = len(c)</line>
        <line t="X" i="391" b="3" n="1">  end if</line>
        <line t="X" i="392" b="3" n="1"></line>
        <line t="C" i="393" b="3" n="1">! Initialise from input</line>
        <line t="X" i="394" b="3" n="1">  res%buffer = c(start:iend)</line>
        <line t="X" i="395" b="3" n="1"></line>
        <line t="EF" i="396" b="3" n="1">end function string_from_char_selected</line>
        <line t="EF" i="397" b="1" n="1"></line>
        <line t="EF" i="398" b="1" n="1"></line>
        <line t="C" i="399" b="1" n="1">! Constructor from character array</line>
        <line k="string_from_array" t="F" i="400" b="1" n="1">pure function string_from_array( c ) result(res)</line>
        <line t="F" i="401" b="1" n="1"></line>
        <line t="C" i="402" b="1" n="1">! The character string to use as initialisation (optional)</line>
        <line t="X" i="403" b="1" n="1">  character, dimension(:), intent(in) :: c</line>
        <line t="X" i="404" b="1" n="1"></line>
        <line t="C" i="405" b="1" n="1">! The string</line>
        <line t="X" i="406" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="407" b="1" n="1"></line>
        <line t="C" i="408" b="1" n="1">! Initialise from input</line>
        <line t="X" i="409" b="1" n="1">  allocate( character(len=size(c)) :: res%buffer )</line>
        <line t="X" i="410" b="1" n="1">  res%buffer = transfer( c, res%buffer )</line>
        <line t="X" i="411" b="1" n="1"></line>
        <line t="EF" i="412" b="1" n="1">end function string_from_array</line>
        <line t="EF" i="413" b="1" n="1"></line>
        <line t="EF" i="414" b="1" n="1"></line>
        <line t="C" i="415" b="1" n="1">! Constructor from part of character array</line>
        <line k="string_from_array_selected" t="F" i="416" b="1" n="1">pure function string_from_array_selected( c, start, end ) result(res)</line>
        <line t="F" i="417" b="1" n="1"></line>
        <line t="C" i="418" b="1" n="1">! The character string to use as initialisation (optional)</line>
        <line t="X" i="419" b="1" n="1">  character, dimension(:), intent(in) :: c</line>
        <line t="X" i="420" b="1" n="1"></line>
        <line t="C" i="421" b="1" n="1">! The first character to select</line>
        <line t="X" i="422" b="1" n="1">  integer, intent(in) :: start</line>
        <line t="X" i="423" b="1" n="1"></line>
        <line t="C" i="424" b="1" n="1">! The last character to select (defaults to last)</line>
        <line t="X" i="425" b="1" n="1">  integer, optional, intent(in) :: end</line>
        <line t="X" i="426" b="1" n="1"></line>
        <line t="C" i="427" b="1" n="1">! The string</line>
        <line t="X" i="428" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="429" b="1" n="1"></line>
        <line t="C" i="430" b="1" n="1">! Local variables</line>
        <line t="X" i="431" b="1" n="1">  integer :: iend</line>
        <line t="X" i="432" b="1" n="1"></line>
        <line t="C" i="433" b="1" n="1">! Select the indexes</line>
        <line t="X" i="434" b="2" n="2">  if( present(end) ) then</line>
        <line t="X" i="435" b="2" n="2">    iend = min( end, size(c) )</line>
        <line t="X" i="436" b="3" n="2">  else</line>
        <line t="X" i="437" b="3" n="2">    iend = size(c)</line>
        <line t="X" i="438" b="3" n="1">  end if</line>
        <line t="X" i="439" b="3" n="1"></line>
        <line t="C" i="440" b="3" n="1">! Initialise from input</line>
        <line t="X" i="441" b="3" n="1">  allocate( character(iend-start+1) :: res%buffer )</line>
        <line t="X" i="442" b="3" n="1">  res%buffer = transfer( c(start:iend), res%buffer )</line>
        <line t="X" i="443" b="3" n="1"></line>
        <line t="EF" i="444" b="3" n="1">end function string_from_array_selected</line>
        <line t="EF" i="445" b="1" n="1"></line>
        <line t="EF" i="446" b="1" n="1"></line>
        <line t="C" i="447" b="1" n="1">! Constructor from string</line>
        <line k="string_from_string" t="F" i="448" b="1" n="1">elemental function string_from_string( s0 ) result(res)</line>
        <line t="F" i="449" b="1" n="1"></line>
        <line t="C" i="450" b="1" n="1">! The character string to use as initialisation (optional)</line>
        <line t="X" i="451" b="1" n="1">  class(t_string), intent(in) :: s0</line>
        <line t="X" i="452" b="1" n="1"></line>
        <line t="C" i="453" b="1" n="1">! The string</line>
        <line t="X" i="454" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="455" b="1" n="1"></line>
        <line t="C" i="456" b="1" n="1">! Initialise from input</line>
        <line t="X" i="457" b="1" n="1">  res%buffer = s0%buffer</line>
        <line t="X" i="458" b="1" n="1"></line>
        <line t="EF" i="459" b="1" n="1">end function string_from_string</line>
        <line t="EF" i="460" b="1" n="1"></line>
        <line t="EF" i="461" b="1" n="1"></line>
        <line t="C" i="462" b="1" n="1">! Constructor from part of string</line>
        <line k="string_from_string_selected" t="F" i="463" b="1" n="1">elemental function string_from_string_selected( s0, start, end ) result(res)</line>
        <line t="F" i="464" b="1" n="1"></line>
        <line t="C" i="465" b="1" n="1">! The character string to use as initialisation (optional)</line>
        <line t="X" i="466" b="1" n="1">  class(t_string), intent(in) :: s0</line>
        <line t="X" i="467" b="1" n="1"></line>
        <line t="C" i="468" b="1" n="1">! The first character to select</line>
        <line t="X" i="469" b="1" n="1">  integer, intent(in) :: start</line>
        <line t="X" i="470" b="1" n="1"></line>
        <line t="C" i="471" b="1" n="1">! The last character to select (defaults to last)</line>
        <line t="X" i="472" b="1" n="1">  integer, optional, intent(in) :: end</line>
        <line t="X" i="473" b="1" n="1"></line>
        <line t="C" i="474" b="1" n="1">! The string</line>
        <line t="X" i="475" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="476" b="1" n="1"></line>
        <line t="C" i="477" b="1" n="1">! Local variables</line>
        <line t="X" i="478" b="1" n="1">  integer :: iend</line>
        <line t="X" i="479" b="1" n="1"></line>
        <line t="C" i="480" b="1" n="1">! Select the indexes</line>
        <line t="X" i="481" b="2" n="2">  if( present(end) ) then</line>
        <line t="X" i="482" b="2" n="2">    iend = min( end, len(s0%buffer) )</line>
        <line t="X" i="483" b="3" n="2">  else</line>
        <line t="X" i="484" b="3" n="2">    iend = len(s0%buffer)</line>
        <line t="X" i="485" b="3" n="1">  end if</line>
        <line t="X" i="486" b="3" n="1"></line>
        <line t="C" i="487" b="3" n="1">! Initialise from input</line>
        <line t="X" i="488" b="3" n="1">  res%buffer = s0%buffer(start:iend)</line>
        <line t="X" i="489" b="3" n="1"></line>
        <line t="EF" i="490" b="3" n="1">end function string_from_string_selected</line>
        <line t="EF" i="491" b="1" n="1"></line>
        <line t="EF" i="492" b="1" n="1"></line>
        <line t="C" i="493" b="1" n="1">! Check initialisaiton status</line>
        <line k="string_is_initialised" t="F" i="494" b="1" n="1">elemental function string_is_initialised( this ) result(res)</line>
        <line t="F" i="495" b="1" n="1"></line>
        <line t="C" i="496" b="1" n="1">! The string</line>
        <line t="X" i="497" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="498" b="1" n="1"></line>
        <line t="C" i="499" b="1" n="1">! The initialisation status</line>
        <line t="X" i="500" b="1" n="1">  logical :: res</line>
        <line t="X" i="501" b="1" n="1"></line>
        <line t="C" i="502" b="1" n="1"> ! Return initialisaiton status</line>
        <line t="X" i="503" b="1" n="1">   res = allocated( this%buffer )</line>
        <line t="X" i="504" b="1" n="1"></line>
        <line t="EF" i="505" b="1" n="1">end function string_is_initialised</line>
        <line t="EF" i="506" b="1" n="1"></line>
        <line t="EF" i="507" b="1" n="1"></line>
        <line t="C" i="508" b="1" n="1">! String length</line>
        <line k="string_len" t="F" i="509" b="1" n="1">elemental function string_len( this ) result(res)</line>
        <line t="F" i="510" b="1" n="1"></line>
        <line t="C" i="511" b="1" n="1">! The string</line>
        <line t="X" i="512" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="513" b="1" n="1"></line>
        <line t="C" i="514" b="1" n="1">! The string length</line>
        <line t="X" i="515" b="1" n="1">  integer :: res</line>
        <line t="X" i="516" b="1" n="1"></line>
        <line t="C" i="517" b="1" n="1">! Return the length</line>
        <line t="X" i="518" b="1" n="1">  res = len(this%buffer)</line>
        <line t="X" i="519" b="1" n="1"></line>
        <line t="EF" i="520" b="1" n="1">end function string_len</line>
        <line t="EF" i="521" b="1" n="1"></line>
        <line t="EF" i="522" b="1" n="1"></line>
        <line t="C" i="523" b="1" n="1">! String length (traling blanks removed)</line>
        <line k="string_len_trim" t="F" i="524" b="1" n="1">elemental function string_len_trim( this ) result(res)</line>
        <line t="F" i="525" b="1" n="1"></line>
        <line t="C" i="526" b="1" n="1">! The string</line>
        <line t="X" i="527" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="528" b="1" n="1"></line>
        <line t="C" i="529" b="1" n="1">! The string length</line>
        <line t="X" i="530" b="1" n="1">  integer :: res</line>
        <line t="X" i="531" b="1" n="1"></line>
        <line t="C" i="532" b="1" n="1">! Return the trimmed length</line>
        <line t="X" i="533" b="1" n="1">   res = len_trim(this%buffer)</line>
        <line t="X" i="534" b="1" n="1"></line>
        <line t="EF" i="535" b="1" n="1">end function string_len_trim</line>
        <line t="EF" i="536" b="1" n="1"></line>
        <line t="EF" i="537" b="1" n="1"></line>
        <line t="C" i="538" b="1" n="1">! String length (traling leading and blanks removed)</line>
        <line k="string_len_strip" t="F" i="539" b="1" n="1">elemental function string_len_strip( this ) result(res)</line>
        <line t="F" i="540" b="1" n="1"></line>
        <line t="C" i="541" b="1" n="1">! The string</line>
        <line t="X" i="542" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="543" b="1" n="1"></line>
        <line t="C" i="544" b="1" n="1">! The string length</line>
        <line t="X" i="545" b="1" n="1">  integer :: res</line>
        <line t="X" i="546" b="1" n="1"></line>
        <line t="C" i="547" b="1" n="1">! Compute length</line>
        <line t="X" i="548" b="1" n="1">  res = len_trim(adjustl(this%buffer))</line>
        <line t="X" i="549" b="1" n="1"></line>
        <line t="EF" i="550" b="1" n="1">end function string_len_strip</line>
        <line t="EF" i="551" b="1" n="1"></line>
        <line t="EF" i="552" b="1" n="1"></line>
        <line t="C" i="553" b="1" n="1">! Remove string traling blanks</line>
        <line k="string_trim" t="F" i="554" b="1" n="1">elemental function string_trim( this ) result(res)</line>
        <line t="F" i="555" b="1" n="1"></line>
        <line t="C" i="556" b="1" n="1">! The string</line>
        <line t="X" i="557" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="558" b="1" n="1"></line>
        <line t="C" i="559" b="1" n="1">! The resulting character string</line>
        <line t="X" i="560" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="561" b="1" n="1"></line>
        <line t="C" i="562" b="1" n="1">! Compute the trimmed string</line>
        <line t="X" i="563" b="1" n="1">  res%buffer = trim(this%buffer)</line>
        <line t="X" i="564" b="1" n="1"></line>
        <line t="EF" i="565" b="1" n="1">end function string_trim</line>
        <line t="EF" i="566" b="1" n="1"></line>
        <line t="EF" i="567" b="1" n="1"></line>
        <line t="C" i="568" b="1" n="1">! Remove string leading and traling blanks</line>
        <line k="string_strip" t="F" i="569" b="1" n="1">elemental function string_strip( this ) result(res)</line>
        <line t="F" i="570" b="1" n="1"></line>
        <line t="C" i="571" b="1" n="1">! The string</line>
        <line t="X" i="572" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="573" b="1" n="1"></line>
        <line t="C" i="574" b="1" n="1">! The resulting character string</line>
        <line t="X" i="575" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="576" b="1" n="1"></line>
        <line t="C" i="577" b="1" n="1">! Compute the stripped string</line>
        <line t="X" i="578" b="1" n="1">  res%buffer = trim(adjustl(this%buffer))</line>
        <line t="X" i="579" b="1" n="1"></line>
        <line t="EF" i="580" b="1" n="1">end function string_strip</line>
        <line t="EF" i="581" b="1" n="1"></line>
        <line t="EF" i="582" b="1" n="1"></line>
        <line t="C" i="583" b="1" n="1">! Performa a character replacement in a string</line>
        <line k="string_replace_s" t="F" i="584" b="1" n="1">elemental function string_replace_s( this, c1, c2 ) result(res)</line>
        <line t="F" i="585" b="1" n="1"></line>
        <line t="C" i="586" b="1" n="1">! The string</line>
        <line t="X" i="587" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="588" b="1" n="1"></line>
        <line t="C" i="589" b="1" n="1">! The character to search for</line>
        <line t="X" i="590" b="1" n="1">  character, intent(in) :: c1</line>
        <line t="X" i="591" b="1" n="1"></line>
        <line t="C" i="592" b="1" n="1">! The character to use as replacement</line>
        <line t="X" i="593" b="1" n="1">  character, intent(in) :: c2</line>
        <line t="X" i="594" b="1" n="1"></line>
        <line t="C" i="595" b="1" n="1">! The output string</line>
        <line t="X" i="596" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="597" b="1" n="1"></line>
        <line t="C" i="598" b="1" n="1">! Make the replacement</line>
        <line t="X" i="599" b="1" n="1">  res%buffer = replace( this%buffer, c1, c2 )</line>
        <line t="X" i="600" b="1" n="1"></line>
        <line t="EF" i="601" b="1" n="1">end function string_replace_s</line>
        <line t="EF" i="602" b="1" n="1"></line>
        <line t="EF" i="603" b="1" n="1"></line>
        <line t="C" i="604" b="1" n="1">! Performa a character replacement in a character string</line>
        <line k="string_replace_c" t="F" i="605" b="1" n="1">elemental function string_replace_c( this, c1, c2 ) result(res)</line>
        <line t="F" i="606" b="1" n="1"></line>
        <line t="C" i="607" b="1" n="1">! The string</line>
        <line t="X" i="608" b="1" n="1">  character(len=*), intent(in) :: this</line>
        <line t="X" i="609" b="1" n="1"></line>
        <line t="C" i="610" b="1" n="1">! The character to search for</line>
        <line t="X" i="611" b="1" n="1">  character, intent(in) :: c1</line>
        <line t="X" i="612" b="1" n="1"></line>
        <line t="C" i="613" b="1" n="1">! The character to use as replacement</line>
        <line t="X" i="614" b="1" n="1">  character, intent(in) :: c2</line>
        <line t="X" i="615" b="1" n="1"></line>
        <line t="C" i="616" b="1" n="1">! The output string</line>
        <line t="X" i="617" b="1" n="1">  character(len=len(this)) :: res</line>
        <line t="X" i="618" b="1" n="1"></line>
        <line t="C" i="619" b="1" n="1">! Local variables</line>
        <line t="X" i="620" b="1" n="1">  integer :: ic</line>
        <line t="X" i="621" b="1" n="1"></line>
        <line t="C" i="622" b="1" n="1">! Make the replacement</line>
        <line t="X" i="623" b="1" n="1">  res = this</line>
        <line t="X" i="624" b="2" n="2">  do ic = 1, len(res)</line>
        <line t="X" i="625" b="3" n="3">    if( res(ic:ic) == c1 ) then</line>
        <line t="X" i="626" b="3" n="3">      res(ic:ic) = c2</line>
        <line t="X" i="627" b="3" n="2">    end if</line>
        <line t="X" i="628" b="3" n="1">  end do</line>
        <line t="X" i="629" b="3" n="1"></line>
        <line t="EF" i="630" b="3" n="1">end function string_replace_c</line>
        <line t="EF" i="631" b="1" n="1"></line>
        <line t="EF" i="632" b="1" n="1"></line>
        <line t="C" i="633" b="1" n="1">! Left justify string contents</line>
        <line k="string_adjustl" t="F" i="634" b="1" n="1">elemental function string_adjustl( this ) result(res)</line>
        <line t="F" i="635" b="1" n="1"></line>
        <line t="C" i="636" b="1" n="1">! The string</line>
        <line t="X" i="637" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="638" b="1" n="1"></line>
        <line t="C" i="639" b="1" n="1">! The resulting character string</line>
        <line t="X" i="640" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="641" b="1" n="1"></line>
        <line t="C" i="642" b="1" n="1">! Compute the left justified string</line>
        <line t="X" i="643" b="1" n="1">  res%buffer = adjustl(this%buffer)</line>
        <line t="X" i="644" b="1" n="1"></line>
        <line t="EF" i="645" b="1" n="1">end function string_adjustl</line>
        <line t="EF" i="646" b="1" n="1"></line>
        <line t="EF" i="647" b="1" n="1"></line>
        <line t="C" i="648" b="1" n="1">! Right justify string contents</line>
        <line k="string_adjustr" t="F" i="649" b="1" n="1">elemental function string_adjustr( this ) result(res)</line>
        <line t="F" i="650" b="1" n="1"></line>
        <line t="C" i="651" b="1" n="1">! The string</line>
        <line t="X" i="652" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="653" b="1" n="1"></line>
        <line t="C" i="654" b="1" n="1">! The resulting character string</line>
        <line t="X" i="655" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="656" b="1" n="1"></line>
        <line t="C" i="657" b="1" n="1">! Compute the right justified string</line>
        <line t="X" i="658" b="1" n="1">  res%buffer = adjustr(this%buffer)</line>
        <line t="X" i="659" b="1" n="1"></line>
        <line t="EF" i="660" b="1" n="1">end function string_adjustr</line>
        <line t="EF" i="661" b="1" n="1"></line>
        <line t="EF" i="662" b="1" n="1"></line>
        <line t="C" i="663" b="1" n="1">! Get the position of a substring in a string</line>
        <line k="string_index_s" t="F" i="664" b="1" n="1">elemental function string_index_s( this, subs, back ) result(res)</line>
        <line t="F" i="665" b="1" n="1"></line>
        <line t="C" i="666" b="1" n="1">! The string</line>
        <line t="X" i="667" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="668" b="1" n="1"></line>
        <line t="C" i="669" b="1" n="1">! The string searched</line>
        <line t="X" i="670" b="1" n="1">  type(t_string), intent(in) :: subs</line>
        <line t="X" i="671" b="1" n="1"></line>
        <line t="C" i="672" b="1" n="1">! The search direction</line>
        <line t="X" i="673" b="1" n="1">  logical, optional, intent(in) :: back</line>
        <line t="X" i="674" b="1" n="1"></line>
        <line t="C" i="675" b="1" n="1">! The character position</line>
        <line t="X" i="676" b="1" n="1">  integer :: res</line>
        <line t="X" i="677" b="1" n="1"></line>
        <line t="C" i="678" b="1" n="1">! Compute the position</line>
        <line t="X" i="679" b="1" n="1">  res = index( this%buffer, subs%buffer, back )</line>
        <line t="X" i="680" b="1" n="1"></line>
        <line t="EF" i="681" b="1" n="1">end function string_index_s</line>
        <line t="EF" i="682" b="1" n="1"></line>
        <line t="EF" i="683" b="1" n="1"></line>
        <line t="C" i="684" b="1" n="1">! Get the position of a substring in a string</line>
        <line k="string_index_c" t="F" i="685" b="1" n="1">elemental function string_index_c( this, subs, back ) result(res)</line>
        <line t="F" i="686" b="1" n="1"></line>
        <line t="C" i="687" b="1" n="1">! The string</line>
        <line t="X" i="688" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="689" b="1" n="1"></line>
        <line t="C" i="690" b="1" n="1">! The string searched</line>
        <line t="X" i="691" b="1" n="1">  character(len=*), intent(in) :: subs</line>
        <line t="X" i="692" b="1" n="1"></line>
        <line t="C" i="693" b="1" n="1">! The search direction</line>
        <line t="X" i="694" b="1" n="1">  logical, optional, intent(in) :: back</line>
        <line t="X" i="695" b="1" n="1"></line>
        <line t="C" i="696" b="1" n="1">! The character position</line>
        <line t="X" i="697" b="1" n="1">  integer :: res</line>
        <line t="X" i="698" b="1" n="1"></line>
        <line t="C" i="699" b="1" n="1">! Compute the position</line>
        <line t="X" i="700" b="1" n="1">  res = index( this%buffer, subs, back )</line>
        <line t="X" i="701" b="1" n="1"></line>
        <line t="EF" i="702" b="1" n="1">end function string_index_c</line>
        <line t="EF" i="703" b="1" n="1"></line>
        <line t="EF" i="704" b="1" n="1"></line>
        <line t="C" i="705" b="1" n="1">! Get the position of a character in substring in a string</line>
        <line k="string_scan_s" t="F" i="706" b="1" n="1">elemental function string_scan_s( this, subs, back ) result(res)</line>
        <line t="F" i="707" b="1" n="1"></line>
        <line t="C" i="708" b="1" n="1">! The string</line>
        <line t="X" i="709" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="710" b="1" n="1"></line>
        <line t="C" i="711" b="1" n="1">! The string searched</line>
        <line t="X" i="712" b="1" n="1">  type(t_string), intent(in) :: subs</line>
        <line t="X" i="713" b="1" n="1"></line>
        <line t="C" i="714" b="1" n="1">! The search direction</line>
        <line t="X" i="715" b="1" n="1">  logical, optional, intent(in) :: back</line>
        <line t="X" i="716" b="1" n="1"></line>
        <line t="C" i="717" b="1" n="1">! The character position</line>
        <line t="X" i="718" b="1" n="1">  integer :: res</line>
        <line t="X" i="719" b="1" n="1"></line>
        <line t="C" i="720" b="1" n="1">! Compute the position</line>
        <line t="X" i="721" b="1" n="1">  res = scan( this%buffer, subs%buffer, back )</line>
        <line t="X" i="722" b="1" n="1"></line>
        <line t="EF" i="723" b="1" n="1">end function string_scan_s</line>
        <line t="EF" i="724" b="1" n="1"></line>
        <line t="EF" i="725" b="1" n="1"></line>
        <line t="C" i="726" b="1" n="1">! Get the position of a character in substring in a string</line>
        <line k="string_scan_c" t="F" i="727" b="1" n="1">elemental function string_scan_c( this, subs, back ) result(res)</line>
        <line t="F" i="728" b="1" n="1"></line>
        <line t="C" i="729" b="1" n="1">! The string</line>
        <line t="X" i="730" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="731" b="1" n="1"></line>
        <line t="C" i="732" b="1" n="1">! The string searched</line>
        <line t="X" i="733" b="1" n="1">  character(len=*), intent(in) :: subs</line>
        <line t="X" i="734" b="1" n="1"></line>
        <line t="C" i="735" b="1" n="1">! The search direction</line>
        <line t="X" i="736" b="1" n="1">  logical, optional, intent(in) :: back</line>
        <line t="X" i="737" b="1" n="1"></line>
        <line t="C" i="738" b="1" n="1">! The character position</line>
        <line t="X" i="739" b="1" n="1">  integer :: res</line>
        <line t="X" i="740" b="1" n="1"></line>
        <line t="C" i="741" b="1" n="1">! Compute the position</line>
        <line t="X" i="742" b="1" n="1">  res = scan( this%buffer, subs, back )</line>
        <line t="X" i="743" b="1" n="1"></line>
        <line t="EF" i="744" b="1" n="1">end function string_scan_c</line>
        <line t="EF" i="745" b="1" n="1"></line>
        <line t="EF" i="746" b="1" n="1"></line>
        <line t="C" i="747" b="1" n="1">! Get the position of a character in substring in a string</line>
        <line k="string_verify_s" t="F" i="748" b="1" n="1">elemental function string_verify_s( this, subs, back ) result(res)</line>
        <line t="F" i="749" b="1" n="1"></line>
        <line t="C" i="750" b="1" n="1">! The string</line>
        <line t="X" i="751" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="752" b="1" n="1"></line>
        <line t="C" i="753" b="1" n="1">! The string searched</line>
        <line t="X" i="754" b="1" n="1">  type(t_string), intent(in) :: subs</line>
        <line t="X" i="755" b="1" n="1"></line>
        <line t="C" i="756" b="1" n="1">! The search direction</line>
        <line t="X" i="757" b="1" n="1">  logical, optional, intent(in) :: back</line>
        <line t="X" i="758" b="1" n="1"></line>
        <line t="C" i="759" b="1" n="1">! The character position</line>
        <line t="X" i="760" b="1" n="1">  integer :: res</line>
        <line t="X" i="761" b="1" n="1"></line>
        <line t="C" i="762" b="1" n="1">! Compute the position</line>
        <line t="X" i="763" b="1" n="1">  res = verify( this%buffer, subs%buffer, back )</line>
        <line t="X" i="764" b="1" n="1"></line>
        <line t="EF" i="765" b="1" n="1">end function string_verify_s</line>
        <line t="EF" i="766" b="1" n="1"></line>
        <line t="EF" i="767" b="1" n="1"></line>
        <line t="C" i="768" b="1" n="1">! Get the position of a character in substring in a string</line>
        <line k="string_verify_c" t="F" i="769" b="1" n="1">elemental function string_verify_c( this, subs, back ) result(res)</line>
        <line t="F" i="770" b="1" n="1"></line>
        <line t="C" i="771" b="1" n="1">! The string</line>
        <line t="X" i="772" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="773" b="1" n="1"></line>
        <line t="C" i="774" b="1" n="1">! The string searched</line>
        <line t="X" i="775" b="1" n="1">  character(len=*), intent(in) :: subs</line>
        <line t="X" i="776" b="1" n="1"></line>
        <line t="C" i="777" b="1" n="1">! The search direction</line>
        <line t="X" i="778" b="1" n="1">  logical, optional, intent(in) :: back</line>
        <line t="X" i="779" b="1" n="1"></line>
        <line t="C" i="780" b="1" n="1">! The character position</line>
        <line t="X" i="781" b="1" n="1">  integer :: res</line>
        <line t="X" i="782" b="1" n="1"></line>
        <line t="C" i="783" b="1" n="1">! Compute the position</line>
        <line t="X" i="784" b="1" n="1">  res = verify( this%buffer, subs, back )</line>
        <line t="X" i="785" b="1" n="1"></line>
        <line t="EF" i="786" b="1" n="1">end function string_verify_c</line>
        <line t="EF" i="787" b="1" n="1"></line>
        <line t="EF" i="788" b="1" n="1"></line>
        <line t="C" i="789" b="1" n="1">! Return the string as character</line>
        <line k="string_to_char" t="F" i="790" b="1" n="1">pure function string_to_char( this ) result(res)</line>
        <line t="F" i="791" b="1" n="1"></line>
        <line t="C" i="792" b="1" n="1">! The string</line>
        <line t="X" i="793" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="794" b="1" n="1"></line>
        <line t="C" i="795" b="1" n="1">! The resulting character string</line>
        <line t="X" i="796" b="1" n="1">  character(len=:), allocatable :: res</line>
        <line t="X" i="797" b="1" n="1"></line>
        <line t="C" i="798" b="1" n="1">! Return the character string</line>
        <line t="X" i="799" b="1" n="1">  allocate( res, source=this%buffer )</line>
        <line t="X" i="800" b="1" n="1"></line>
        <line t="EF" i="801" b="1" n="1">end function string_to_char</line>
        <line t="EF" i="802" b="1" n="1"></line>
        <line t="EF" i="803" b="1" n="1"></line>
        <line t="C" i="804" b="1" n="1">! Return the string as character with selected bounds</line>
        <line k="string_to_char_selected" t="F" i="805" b="1" n="1">pure function string_to_char_selected( this, start, end ) result(res)</line>
        <line t="F" i="806" b="1" n="1"></line>
        <line t="C" i="807" b="1" n="1">! The string</line>
        <line t="X" i="808" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="809" b="1" n="1"></line>
        <line t="C" i="810" b="1" n="1">! The first character to select</line>
        <line t="X" i="811" b="1" n="1">  integer, intent(in) :: start</line>
        <line t="X" i="812" b="1" n="1"></line>
        <line t="C" i="813" b="1" n="1">! The last character to select (defaults to last)</line>
        <line t="X" i="814" b="1" n="1">  integer, optional, intent(in) :: end</line>
        <line t="X" i="815" b="1" n="1"></line>
        <line t="C" i="816" b="1" n="1">! The resulting character string</line>
        <line t="X" i="817" b="1" n="1">  character(len=:), allocatable :: res</line>
        <line t="X" i="818" b="1" n="1"></line>
        <line t="C" i="819" b="1" n="1">! Local variables</line>
        <line t="X" i="820" b="1" n="1">  integer :: iend</line>
        <line t="X" i="821" b="1" n="1"></line>
        <line t="C" i="822" b="1" n="1">! Select the indexes</line>
        <line t="X" i="823" b="2" n="2">  if( present(end) ) then</line>
        <line t="X" i="824" b="2" n="2">    iend = min( end, len(this%buffer) )</line>
        <line t="X" i="825" b="3" n="2">  else</line>
        <line t="X" i="826" b="3" n="2">    iend = len(this%buffer)</line>
        <line t="X" i="827" b="3" n="1">  end if</line>
        <line t="X" i="828" b="3" n="1"></line>
        <line t="C" i="829" b="3" n="1">! Return the character string</line>
        <line t="X" i="830" b="3" n="1">  allocate( res, source=this%buffer(start:iend) )</line>
        <line t="X" i="831" b="3" n="1"></line>
        <line t="EF" i="832" b="3" n="1">end function string_to_char_selected</line>
        <line t="EF" i="833" b="1" n="1"></line>
        <line t="EF" i="834" b="1" n="1"></line>
        <line t="C" i="835" b="1" n="1">! Return the string all in lowercase</line>
        <line k="string_lowercase" t="F" i="836" b="1" n="1">elemental function string_lowercase( this ) result(res)</line>
        <line t="F" i="837" b="1" n="1"></line>
        <line t="C" i="838" b="1" n="1">! The string</line>
        <line t="X" i="839" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="840" b="1" n="1"></line>
        <line t="C" i="841" b="1" n="1">! The resulting lowercase string</line>
        <line t="X" i="842" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="843" b="1" n="1"></line>
        <line t="C" i="844" b="1" n="1">! Convert to lowercase</line>
        <line t="X" i="845" b="1" n="1">  res%buffer = lowercase( this%buffer )</line>
        <line t="X" i="846" b="1" n="1"></line>
        <line t="EF" i="847" b="1" n="1">end function string_lowercase</line>
        <line t="EF" i="848" b="1" n="1"></line>
        <line t="EF" i="849" b="1" n="1"></line>
        <line t="C" i="850" b="1" n="1">! Return the string all in uppercase</line>
        <line k="string_uppercase" t="F" i="851" b="1" n="1">elemental function string_uppercase( this ) result(res)</line>
        <line t="F" i="852" b="1" n="1"></line>
        <line t="C" i="853" b="1" n="1">! The string</line>
        <line t="X" i="854" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="855" b="1" n="1"></line>
        <line t="C" i="856" b="1" n="1">! The resulting uppercase string</line>
        <line t="X" i="857" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="858" b="1" n="1"></line>
        <line t="C" i="859" b="1" n="1">! Convert to uppercase</line>
        <line t="X" i="860" b="1" n="1">  res%buffer = uppercase( this%buffer )</line>
        <line t="X" i="861" b="1" n="1"></line>
        <line t="EF" i="862" b="1" n="1">end function string_uppercase</line>
        <line t="EF" i="863" b="1" n="1"></line>
        <line t="EF" i="864" b="1" n="1"></line>
        <line t="C" i="865" b="1" n="1">! Return the string as a character array</line>
        <line k="string_array" t="F" i="866" b="1" n="1">pure function string_array( this ) result(res)</line>
        <line t="F" i="867" b="1" n="1"></line>
        <line t="C" i="868" b="1" n="1">! The string</line>
        <line t="X" i="869" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="870" b="1" n="1"></line>
        <line t="C" i="871" b="1" n="1">! The resulting character string</line>
        <line t="X" i="872" b="1" n="1">  character, dimension(len(this%buffer)) :: res</line>
        <line t="X" i="873" b="1" n="1"></line>
        <line t="C" i="874" b="1" n="1">! Return the character string</line>
        <line t="X" i="875" b="1" n="1">  res = transfer( this%buffer, res )</line>
        <line t="X" i="876" b="1" n="1"></line>
        <line t="EF" i="877" b="1" n="1">end function string_array</line>
        <line t="EF" i="878" b="1" n="1"></line>
        <line t="EF" i="879" b="1" n="1"></line>
        <line t="C" i="880" b="1" n="1">! Return the string as a character array with selected bounds</line>
        <line k="string_array_selected" t="F" i="881" b="1" n="1">pure function string_array_selected( this, start ) result(res)</line>
        <line t="F" i="882" b="1" n="1"></line>
        <line t="C" i="883" b="1" n="1">! The string</line>
        <line t="X" i="884" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="885" b="1" n="1"></line>
        <line t="C" i="886" b="1" n="1">! The first character to select</line>
        <line t="X" i="887" b="1" n="1">  integer, intent(in) :: start</line>
        <line t="X" i="888" b="1" n="1"></line>
        <line t="C" i="889" b="1" n="1">! The resulting character string</line>
        <line t="X" i="890" b="1" n="1">  character, dimension(len(this%buffer)-start+1) :: res</line>
        <line t="X" i="891" b="1" n="1"></line>
        <line t="C" i="892" b="1" n="1">! Local variables</line>
        <line t="X" i="893" b="1" n="1">  integer :: iend</line>
        <line t="X" i="894" b="1" n="1"></line>
        <line t="C" i="895" b="1" n="1">! Check input allocation</line>
        <line t="X" i="896" b="2" n="2">  if( allocated(this%buffer) ) then</line>
        <line t="X" i="897" b="2" n="2"></line>
        <line t="C" i="898" b="2" n="2">!   Select the indexes</line>
        <line t="X" i="899" b="2" n="2">    iend = len(this%buffer)</line>
        <line t="X" i="900" b="2" n="2"></line>
        <line t="C" i="901" b="2" n="2">!   Return the character string</line>
        <line t="X" i="902" b="2" n="2">    res = transfer( this%buffer(start:iend), res )</line>
        <line t="X" i="903" b="2" n="2"></line>
        <line t="X" i="904" b="2" n="1">  end if</line>
        <line t="X" i="905" b="2" n="1"></line>
        <line t="EF" i="906" b="2" n="1">end function string_array_selected</line>
        <line t="EF" i="907" b="1" n="1"></line>
        <line t="EF" i="908" b="1" n="1"></line>
        <line t="C" i="909" b="1" n="1">! Return the string as a character array with selected bounds</line>
        <line k="string_array_selected_with_end" t="F" i="910" b="1" n="1">pure function string_array_selected_with_end( this, start, end ) result(res)</line>
        <line t="F" i="911" b="1" n="1"></line>
        <line t="C" i="912" b="1" n="1">! The string</line>
        <line t="X" i="913" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="914" b="1" n="1"></line>
        <line t="C" i="915" b="1" n="1">! The first character to select</line>
        <line t="X" i="916" b="1" n="1">  integer, intent(in) :: start</line>
        <line t="X" i="917" b="1" n="1"></line>
        <line t="C" i="918" b="1" n="1">! The last character to select</line>
        <line t="X" i="919" b="1" n="1">  integer, intent(in) :: end</line>
        <line t="X" i="920" b="1" n="1"></line>
        <line t="C" i="921" b="1" n="1">! The resulting character string</line>
        <line t="X" i="922" b="1" n="1">  character, dimension(end-start+1) :: res</line>
        <line t="X" i="923" b="1" n="1"></line>
        <line t="C" i="924" b="1" n="1">! Local variables</line>
        <line t="X" i="925" b="1" n="1">  integer :: iend</line>
        <line t="X" i="926" b="1" n="1"></line>
        <line t="C" i="927" b="1" n="1">! Check allocation</line>
        <line t="X" i="928" b="2" n="2">  if( allocated(this%buffer) ) then</line>
        <line t="X" i="929" b="2" n="2"></line>
        <line t="C" i="930" b="2" n="2">!   Select the indexes</line>
        <line t="X" i="931" b="2" n="2">    iend = min( end, len(this%buffer) )</line>
        <line t="X" i="932" b="2" n="2"></line>
        <line t="C" i="933" b="2" n="2">!   Return the character string</line>
        <line t="X" i="934" b="2" n="2">    res = transfer( this%buffer(start:iend), res )</line>
        <line t="X" i="935" b="2" n="2"></line>
        <line t="X" i="936" b="2" n="1">  end if</line>
        <line t="X" i="937" b="2" n="1"></line>
        <line t="EF" i="938" b="2" n="1">end function string_array_selected_with_end</line>
        <line t="EF" i="939" b="1" n="1"></line>
        <line t="EF" i="940" b="1" n="1"></line>
        <line t="C" i="941" b="1" n="1">! Match a character string against a pattern with wildcards</line>
        <line k="string_match_s" t="F" i="942" b="1" n="1">elemental function string_match_s( this, pattern ) result(res)</line>
        <line t="F" i="943" b="1" n="1"></line>
        <line t="C" i="944" b="1" n="1">! The string</line>
        <line t="X" i="945" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="946" b="1" n="1"></line>
        <line t="C" i="947" b="1" n="1">! The string searched</line>
        <line t="X" i="948" b="1" n="1">  type(t_string), intent(in) :: pattern</line>
        <line t="X" i="949" b="1" n="1"></line>
        <line t="C" i="950" b="1" n="1">! The matching result</line>
        <line t="X" i="951" b="1" n="1">  logical :: res</line>
        <line t="X" i="952" b="1" n="1"></line>
        <line t="C" i="953" b="1" n="1">! Compute the match using the character implementation</line>
        <line t="X" i="954" b="1" n="1">  res = match( this%buffer, pattern%buffer )</line>
        <line t="X" i="955" b="1" n="1"></line>
        <line t="EF" i="956" b="1" n="1">end function string_match_s</line>
        <line t="EF" i="957" b="1" n="1"></line>
        <line t="EF" i="958" b="1" n="1"></line>
        <line t="C" i="959" b="1" n="1">! Auxiliary function to compress the pattern for the wildcard pattern matching.</line>
        <line t="C" i="960" b="1" n="1">! All consecutive occurrences of one or more question marks ('?') and</line>
        <line t="C" i="961" b="1" n="1">! asterisks ('*') are sorted and compressed.</line>
        <line t="C" i="962" b="1" n="1">! Reference: http://fortranwiki.org/fortran/show/match_wild</line>
        <line k="string_pattern_compress" t="F" i="963" b="1" n="1">pure function string_pattern_compress( pattern ) result(res)</line>
        <line t="F" i="964" b="1" n="1"></line>
        <line t="C" i="965" b="1" n="1">! The string pattern</line>
        <line t="X" i="966" b="1" n="1">  character(len=*), intent(in) :: pattern</line>
        <line t="X" i="967" b="1" n="1"></line>
        <line t="C" i="968" b="1" n="1">! The compressed pattern</line>
        <line t="X" i="969" b="1" n="1">  character(len=:), allocatable :: res</line>
        <line t="X" i="970" b="1" n="1"></line>
        <line t="C" i="971" b="1" n="1">! Local variables</line>
        <line t="X" i="972" b="1" n="1">  character(len=len(pattern)) :: pattern2</line>
        <line t="X" i="973" b="1" n="1">  integer :: p, p2</line>
        <line t="X" i="974" b="1" n="1">  integer :: n_single, n_multi</line>
        <line t="X" i="975" b="1" n="1"></line>
        <line t="C" i="976" b="1" n="1">! Initialise</line>
        <line t="X" i="977" b="1" n="1">  pattern2 = ''</line>
        <line t="X" i="978" b="1" n="1">  p = 1 ! current position in input pattern</line>
        <line t="X" i="979" b="1" n="1">  p2 = 0 ! current position in generated pattern</line>
        <line t="X" i="980" b="1" n="1">  n_single = 0</line>
        <line t="X" i="981" b="1" n="1">  n_multi = 0</line>
        <line t="X" i="982" b="1" n="1"></line>
        <line t="C" i="983" b="1" n="1">! Main loop in pattern</line>
        <line t="X" i="984" b="2" n="2">  do</line>
        <line t="X" i="985" b="2" n="2"></line>
        <line t="C" i="986" b="2" n="2">!   Check the pattern character</line>
        <line t="X" i="987" b="2" n="3">    select case( pattern(p:p) )</line>
        <line t="X" i="988" b="2" n="3"></line>
        <line t="C" i="989" b="2" n="3">!     Single character wildcard</line>
        <line t="X" i="990" b="3" n="3">      case( single_wildcard )</line>
        <line t="X" i="991" b="3" n="3">        n_single = n_single + 1</line>
        <line t="X" i="992" b="3" n="3"></line>
        <line t="C" i="993" b="3" n="3">!     Multiple character wildcard</line>
        <line t="X" i="994" b="4" n="3">      case( multiple_wildcard )</line>
        <line t="X" i="995" b="4" n="3">        n_multi = n_multi + 1</line>
        <line t="X" i="996" b="4" n="3"></line>
        <line t="C" i="997" b="4" n="3">!     Any gneric character</line>
        <line t="X" i="998" b="5" n="3">      case default</line>
        <line t="X" i="999" b="5" n="3"></line>
        <line t="C" i="1000" b="5" n="3">!       Check single wildcard first</line>
        <line t="X" i="1001" b="6" n="4">        if( n_single &gt; 0 ) then</line>
        <line t="X" i="1002" b="6" n="4">          pattern2 = pattern2(:p2) // repeat(single_wildcard,n_single)</line>
        <line t="X" i="1003" b="6" n="4">          p2 = p2 + n_single</line>
        <line t="X" i="1004" b="6" n="3">        end if</line>
        <line t="X" i="1005" b="6" n="3"></line>
        <line t="C" i="1006" b="6" n="3">!       Check multiple wildcard (add only one)</line>
        <line t="X" i="1007" b="7" n="4">        if( n_multi &gt; 0 ) then</line>
        <line t="X" i="1008" b="7" n="4">          pattern2 = pattern2(:p2) // multiple_wildcard</line>
        <line t="X" i="1009" b="7" n="4">          p2 = p2 + n_multi</line>
        <line t="X" i="1010" b="7" n="3">        end if</line>
        <line t="X" i="1011" b="7" n="3"></line>
        <line t="C" i="1012" b="7" n="3">!       Append the character</line>
        <line t="X" i="1013" b="7" n="3">        pattern2 = pattern2(:p2) // pattern(p:p)</line>
        <line t="X" i="1014" b="7" n="3">        p2 = p2 + 1</line>
        <line t="X" i="1015" b="7" n="3"></line>
        <line t="C" i="1016" b="7" n="3">!       Reset wildcard counters</line>
        <line t="X" i="1017" b="7" n="3">        n_single = 0</line>
        <line t="X" i="1018" b="7" n="3">        n_multi = 0</line>
        <line t="X" i="1019" b="7" n="3"></line>
        <line t="X" i="1020" b="7" n="2">    end select</line>
        <line t="X" i="1021" b="7" n="2"></line>
        <line t="C" i="1022" b="7" n="2">!   Iterate</line>
        <line t="X" i="1023" b="7" n="2">    p = p + 1</line>
        <line t="X" i="1024" b="8" n="3">    if( p &gt; len(pattern) ) exit</line>
        <line t="X" i="1025" b="8" n="3"></line>
        <line t="X" i="1026" b="8" n="2">  end do</line>
        <line t="X" i="1027" b="8" n="2"></line>
        <line t="C" i="1028" b="8" n="2">! Check single wildcard first</line>
        <line t="X" i="1029" b="9" n="3">  if( n_single &gt; 0 ) then</line>
        <line t="X" i="1030" b="9" n="3">    pattern2 = pattern2(:p2) // repeat(single_wildcard,n_single)</line>
        <line t="X" i="1031" b="9" n="3">    p2 = p2 + n_single</line>
        <line t="X" i="1032" b="9" n="2">  end if</line>
        <line t="X" i="1033" b="9" n="2"></line>
        <line t="C" i="1034" b="9" n="2">! Check multiple wildcard (add only one)</line>
        <line t="X" i="1035" b="10" n="3">  if( n_multi &gt; 0 ) then</line>
        <line t="X" i="1036" b="10" n="3">    pattern2 = pattern2(:p2) // multiple_wildcard</line>
        <line t="X" i="1037" b="10" n="2">  end if</line>
        <line t="X" i="1038" b="10" n="2"></line>
        <line t="C" i="1039" b="10" n="2">! Return the pattern</line>
        <line t="X" i="1040" b="10" n="2">  allocate( res, source=pattern2 )</line>
        <line t="X" i="1041" b="10" n="2"></line>
        <line t="EF" i="1042" b="10" n="2">end function string_pattern_compress</line>
        <line t="EF" i="1043" b="1" n="2"></line>
        <line t="EF" i="1044" b="1" n="2"></line>
        <line t="C" i="1045" b="1" n="2">! Match a character string against a pattern with wildcards</line>
        <line t="C" i="1046" b="1" n="2">! Reference: http://fortranwiki.org/fortran/show/match_wild</line>
        <line k="string_match_c" t="F" i="1047" b="1" n="1">elemental function string_match_c( input, pattern ) result(res)</line>
        <line t="F" i="1048" b="1" n="1"></line>
        <line t="C" i="1049" b="1" n="1">! The string</line>
        <line t="X" i="1050" b="1" n="1">  character(len=*), intent(in) :: input</line>
        <line t="X" i="1051" b="1" n="1"></line>
        <line t="C" i="1052" b="1" n="1">! The string pattern</line>
        <line t="X" i="1053" b="1" n="1">  character(len=*), intent(in) :: pattern</line>
        <line t="X" i="1054" b="1" n="1"></line>
        <line t="C" i="1055" b="1" n="1">! The character position</line>
        <line t="X" i="1056" b="1" n="1">  logical :: res</line>
        <line t="X" i="1057" b="1" n="1"></line>
        <line t="C" i="1058" b="1" n="1">! Local variables</line>
        <line t="X" i="1059" b="1" n="1">  character(len=:), allocatable :: cpattern</line>
        <line t="X" i="1060" b="1" n="1">  integer :: p, p1, plast</line>
        <line t="X" i="1061" b="1" n="1">  integer :: s</line>
        <line t="X" i="1062" b="1" n="1">  integer :: n</line>
        <line t="X" i="1063" b="1" n="1"></line>
        <line t="C" i="1064" b="1" n="1">! Compress the input pattern</line>
        <line t="X" i="1065" b="1" n="1">  allocate( cpattern, source=string_pattern_compress( pattern ) )</line>
        <line t="X" i="1066" b="1" n="1"></line>
        <line t="C" i="1067" b="1" n="1">! Initialise</line>
        <line t="X" i="1068" b="1" n="1">  res = .false.</line>
        <line t="X" i="1069" b="1" n="1">  s = 1</line>
        <line t="X" i="1070" b="1" n="1">  p = 1</line>
        <line t="X" i="1071" b="1" n="1">  plast = 0</line>
        <line t="X" i="1072" b="1" n="1"></line>
        <line t="C" i="1073" b="1" n="1">! Main loop in the pattern characters</line>
        <line t="X" i="1074" b="2" n="2">  do</line>
        <line t="X" i="1075" b="2" n="2"></line>
        <line t="C" i="1076" b="2" n="2">!   Check the pattern character</line>
        <line t="X" i="1077" b="2" n="3">    select case( cpattern(p:p) )</line>
        <line t="X" i="1078" b="2" n="3"></line>
        <line t="C" i="1079" b="2" n="3">!     Single character wildcard</line>
        <line t="X" i="1080" b="3" n="3">      case( single_wildcard )</line>
        <line t="X" i="1081" b="3" n="3">        plast = p</line>
        <line t="X" i="1082" b="3" n="3"></line>
        <line t="C" i="1083" b="3" n="3">!       Accept any char in string</line>
        <line t="X" i="1084" b="3" n="3">        s = s + 1</line>
        <line t="X" i="1085" b="3" n="3"></line>
        <line t="C" i="1086" b="3" n="3">!     Multiple character wildcard</line>
        <line t="X" i="1087" b="4" n="3">      case( multiple_wildcard )</line>
        <line t="X" i="1088" b="4" n="3">        plast = p</line>
        <line t="X" i="1089" b="4" n="3"></line>
        <line t="C" i="1090" b="4" n="3">!       Check if at the end of the pattern</line>
        <line t="X" i="1091" b="5" n="4">        if( p == len(pattern) ) then</line>
        <line t="X" i="1092" b="5" n="4"></line>
        <line t="C" i="1093" b="5" n="4">!         The rest of the input matches</line>
        <line t="X" i="1094" b="5" n="4">          res = .true.</line>
        <line t="X" i="1095" b="5" n="4">          exit</line>
        <line t="X" i="1096" b="5" n="4"></line>
        <line t="X" i="1097" b="6" n="4">        else</line>
        <line t="X" i="1098" b="6" n="4"></line>
        <line t="C" i="1099" b="6" n="4">!         Look for the character following the wildcard in the string</line>
        <line t="C" i="1100" b="6" n="4">!         Because pattern has been compressed and in this parto of the</line>
        <line t="C" i="1101" b="6" n="4">!         if/then/else the next character is a general character</line>
        <line t="X" i="1102" b="6" n="4">          p1 = p + 1</line>
        <line t="X" i="1103" b="6" n="4">          n = index( input(s:), cpattern(p1:p1) )</line>
        <line t="X" i="1104" b="7" n="5">          if( n == 0 ) then</line>
        <line t="X" i="1105" b="7" n="5"></line>
        <line t="C" i="1106" b="7" n="5">!           Character not found; match not possible</line>
        <line t="X" i="1107" b="7" n="5">            exit</line>
        <line t="X" i="1108" b="7" n="5"></line>
        <line t="X" i="1109" b="8" n="5">          else</line>
        <line t="X" i="1110" b="8" n="5"></line>
        <line t="C" i="1111" b="8" n="5">!           Next character matches</line>
        <line t="X" i="1112" b="8" n="5">            s = n + s - 1</line>
        <line t="X" i="1113" b="8" n="5"></line>
        <line t="X" i="1114" b="8" n="4">          end if</line>
        <line t="X" i="1115" b="8" n="4"></line>
        <line t="X" i="1116" b="8" n="3">        end if</line>
        <line t="X" i="1117" b="8" n="3"></line>
        <line t="C" i="1118" b="8" n="3">!     Any gneric character</line>
        <line t="X" i="1119" b="9" n="3">      case default</line>
        <line t="X" i="1120" b="9" n="3"></line>
        <line t="C" i="1121" b="9" n="3">!       Check match against pattern</line>
        <line t="X" i="1122" b="10" n="4">        if( cpattern(p:p) == input(s:s) ) then</line>
        <line t="X" i="1123" b="10" n="4"></line>
        <line t="X" i="1124" b="11" n="4">        else</line>
        <line t="X" i="1125" b="11" n="4"></line>
        <line t="C" i="1126" b="11" n="4">!         Non-match</line>
        <line t="C" i="1127" b="11" n="4">!         Fail to match one character in the pattern but may be found later.</line>
        <line t="C" i="1128" b="11" n="4">!         Return pattern index to the last found wildcard</line>
        <line t="C" i="1129" b="11" n="4">!         If there was no prior wildcard, then return .false.</line>
        <line t="X" i="1130" b="12" n="5">          if( plast &gt; 0 ) then</line>
        <line t="X" i="1131" b="12" n="5">            p = plast</line>
        <line t="X" i="1132" b="13" n="5">          else</line>
        <line t="X" i="1133" b="13" n="5">            exit</line>
        <line t="X" i="1134" b="13" n="4">          end if</line>
        <line t="X" i="1135" b="13" n="4"></line>
        <line t="X" i="1136" b="13" n="3">      endif</line>
        <line t="X" i="1137" b="13" n="3"></line>
        <line t="C" i="1138" b="13" n="3">!     Iterate in the input string</line>
        <line t="X" i="1139" b="13" n="3">      s = s + 1</line>
        <line t="X" i="1140" b="13" n="3"></line>
        <line t="X" i="1141" b="13" n="2">    end select</line>
        <line t="X" i="1142" b="13" n="2"></line>
        <line t="C" i="1143" b="13" n="2">!   Iterate</line>
        <line t="X" i="1144" b="13" n="2">    p = p + 1</line>
        <line t="X" i="1145" b="13" n="2"></line>
        <line t="C" i="1146" b="13" n="2">!   Check pattern pointer position</line>
        <line t="X" i="1147" b="14" n="3">    if( p &gt; len(cpattern) ) then</line>
        <line t="X" i="1148" b="14" n="3"></line>
        <line t="C" i="1149" b="14" n="3">!     Check input pointer position</line>
        <line t="X" i="1150" b="15" n="4">      if( s &gt; len(input) ) then</line>
        <line t="X" i="1151" b="15" n="4"></line>
        <line t="C" i="1152" b="15" n="4">!       End of both pattern and input</line>
        <line t="X" i="1153" b="15" n="4">        res = .TRUE.</line>
        <line t="X" i="1154" b="15" n="4">        exit</line>
        <line t="X" i="1155" b="15" n="4"></line>
        <line t="X" i="1156" b="16" n="4">      else</line>
        <line t="X" i="1157" b="16" n="4"></line>
        <line t="C" i="1158" b="16" n="4">!       End of pattern only</line>
        <line t="X" i="1159" b="16" n="4">        exit</line>
        <line t="X" i="1160" b="16" n="4"></line>
        <line t="X" i="1161" b="16" n="3">      endif</line>
        <line t="X" i="1162" b="16" n="3"></line>
        <line t="C" i="1163" b="16" n="3">!     IF (s &gt; lens .AND. p2 == lenp) THEN</line>
        <line t="C" i="1164" b="16" n="3">!       IF(pattern2(p2:p2) == "*") THEN</line>
        <line t="C" i="1165" b="16" n="3">!! "*" at end of pattern2 represents an empty string</line>
        <line t="C" i="1166" b="16" n="3">!         match_wild = .TRUE.</line>
        <line t="C" i="1167" b="16" n="3">!         EXIT</line>
        <line t="C" i="1168" b="16" n="3">!       ENDIF</line>
        <line t="C" i="1169" b="16" n="3">!     ENDIF</line>
        <line t="C" i="1170" b="16" n="3"></line>
        <line t="X" i="1171" b="17" n="3">    else</line>
        <line t="X" i="1172" b="17" n="3"></line>
        <line t="C" i="1173" b="17" n="3">!     Check input pointer position</line>
        <line t="X" i="1174" b="18" n="4">      if( s &gt; len(input) ) then</line>
        <line t="X" i="1175" b="18" n="4"></line>
        <line t="C" i="1176" b="18" n="4">!       End of input only</line>
        <line t="X" i="1177" b="18" n="4">        exit</line>
        <line t="X" i="1178" b="18" n="4"></line>
        <line t="X" i="1179" b="18" n="3">      endif</line>
        <line t="X" i="1180" b="18" n="3"></line>
        <line t="X" i="1181" b="18" n="2">    end if</line>
        <line t="X" i="1182" b="18" n="2"></line>
        <line t="X" i="1183" b="18" n="1">  enddo</line>
        <line t="X" i="1184" b="18" n="1"></line>
        <line t="EF" i="1185" b="18" n="1">end function string_match_c</line>
        <line t="EF" i="1186" b="1" n="1"></line>
        <line t="EF" i="1187" b="1" n="1"></line>
        <line t="C" i="1188" b="1" n="1">! Read a string from an open unit</line>
        <line k="string_read" t="S" i="1189" b="1" n="1">subroutine string_read( this, unit, iostat, format )</line>
        <line t="S" i="1190" b="1" n="1"></line>
        <line t="C" i="1191" b="1" n="1">! The string</line>
        <line t="X" i="1192" b="1" n="1">  class(t_string), intent(out) :: this</line>
        <line t="X" i="1193" b="1" n="1"></line>
        <line t="C" i="1194" b="1" n="1">! The open file to read from</line>
        <line t="X" i="1195" b="1" n="1">  integer, intent(in) :: unit</line>
        <line t="X" i="1196" b="1" n="1"></line>
        <line t="C" i="1197" b="1" n="1">! The read condition status</line>
        <line t="X" i="1198" b="1" n="1">  integer, optional, intent(out) :: iostat</line>
        <line t="X" i="1199" b="1" n="1"></line>
        <line t="C" i="1200" b="1" n="1">! The read format (optional)</line>
        <line t="X" i="1201" b="1" n="1">  character(len=*), optional, intent(in) :: format</line>
        <line t="X" i="1202" b="1" n="1"></line>
        <line t="C" i="1203" b="1" n="1">! Local storage</line>
        <line t="X" i="1204" b="1" n="1">  character(len=1024) :: local</line>
        <line t="X" i="1205" b="1" n="1"></line>
        <line t="C" i="1206" b="1" n="1">! Check format</line>
        <line t="X" i="1207" b="2" n="2">  if( present(format) ) then</line>
        <line t="X" i="1208" b="2" n="2">    read( unit, format, iostat=iostat ) local</line>
        <line t="X" i="1209" b="2" n="2">    this%buffer = local</line>
        <line t="X" i="1210" b="3" n="2">  else</line>
        <line t="X" i="1211" b="3" n="2">    read( unit, '(A1024)', iostat=iostat ) local</line>
        <line t="X" i="1212" b="3" n="2">    this%buffer = trim(local)</line>
        <line t="X" i="1213" b="3" n="1">  end if</line>
        <line t="X" i="1214" b="3" n="1"></line>
        <line t="ES" i="1215" b="3" n="1">end subroutine string_read</line>
        <line t="ES" i="1216" b="1" n="1"></line>
        <line t="ES" i="1217" b="1" n="1"></line>
        <line t="C" i="1218" b="1" n="1">! Write in ASCII</line>
        <line k="string_write" t="S" i="1219" b="1" n="1">subroutine string_write( this, unit, advance )</line>
        <line t="S" i="1220" b="1" n="1"></line>
        <line t="C" i="1221" b="1" n="1">! The vector</line>
        <line t="X" i="1222" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="1223" b="1" n="1"></line>
        <line t="C" i="1224" b="1" n="1">! The open file to write the element to</line>
        <line t="X" i="1225" b="1" n="1">  integer, intent(in) :: unit</line>
        <line t="X" i="1226" b="1" n="1"></line>
        <line t="C" i="1227" b="1" n="1">! Write a new line after the vector (true by default)</line>
        <line t="X" i="1228" b="1" n="1">  character(len=*), optional, intent(in) :: advance</line>
        <line t="X" i="1229" b="1" n="1"></line>
        <line t="C" i="1230" b="1" n="1">! Write the string</line>
        <line t="X" i="1231" b="1" n="1">  write( unit, '(A)', advance='no' ) this%buffer</line>
        <line t="X" i="1232" b="1" n="1"></line>
        <line t="C" i="1233" b="1" n="1">! Check for newline at the end</line>
        <line t="X" i="1234" b="2" n="2">  if( present(advance) ) then</line>
        <line t="X" i="1235" b="3" n="3">    if( advance == 'YES' ) then</line>
        <line t="X" i="1236" b="3" n="3">      write(unit,*)</line>
        <line t="X" i="1237" b="3" n="2">    end if</line>
        <line t="X" i="1238" b="4" n="2">  else</line>
        <line t="X" i="1239" b="4" n="2">    write(unit,*)</line>
        <line t="X" i="1240" b="4" n="1">  end if</line>
        <line t="X" i="1241" b="4" n="1"></line>
        <line t="ES" i="1242" b="4" n="1">end subroutine string_write</line>
        <line t="ES" i="1243" b="1" n="1"></line>
        <line t="ES" i="1244" b="1" n="1"></line>
        <line t="C" i="1245" b="1" n="1">! Assign operator (string from char)</line>
        <line k="string_assign_from_char" t="S" i="1246" b="1" n="1">elemental subroutine string_assign_from_char( left, right )</line>
        <line t="S" i="1247" b="1" n="1"></line>
        <line t="C" i="1248" b="1" n="1">! The target string</line>
        <line t="X" i="1249" b="1" n="1">  class(t_string), intent(inout) :: left</line>
        <line t="X" i="1250" b="1" n="1"></line>
        <line t="C" i="1251" b="1" n="1">! The source string</line>
        <line t="X" i="1252" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1253" b="1" n="1"></line>
        <line t="C" i="1254" b="1" n="1">! Copy memory</line>
        <line t="X" i="1255" b="1" n="1">  left%buffer = right</line>
        <line t="X" i="1256" b="1" n="1"></line>
        <line t="ES" i="1257" b="1" n="1">end subroutine string_assign_from_char</line>
        <line t="ES" i="1258" b="1" n="1"></line>
        <line t="ES" i="1259" b="1" n="1"></line>
        <line t="C" i="1260" b="1" n="1">!! Assign operator (string from char array)</line>
        <line t="C" i="1261" b="1" n="1">!pure subroutine string_assign_from_array( left, right )</line>
        <line t="C" i="1262" b="1" n="1">!</line>
        <line t="C" i="1263" b="1" n="1">!! The target string</line>
        <line t="C" i="1264" b="1" n="1">!  class(t_string), intent(out) :: left</line>
        <line t="C" i="1265" b="1" n="1">!</line>
        <line t="C" i="1266" b="1" n="1">!! The source string</line>
        <line t="C" i="1267" b="1" n="1">!  character, dimension(:), intent(in) :: right</line>
        <line t="C" i="1268" b="1" n="1">!</line>
        <line t="C" i="1269" b="1" n="1">!! Copy memory</line>
        <line t="C" i="1270" b="1" n="1">!  left%buffer = transfer( right, left%buffer )</line>
        <line t="C" i="1271" b="1" n="1">!</line>
        <line t="C" i="1272" b="1" n="1">!end subroutine string_assign_from_array</line>
        <line t="C" i="1273" b="1" n="1"></line>
        <line t="C" i="1274" b="1" n="1"></line>
        <line t="C" i="1275" b="1" n="1">! Assign operator (char from string)</line>
        <line k="string_assign_from_string" t="S" i="1276" b="1" n="1">elemental subroutine string_assign_from_string( left, right )</line>
        <line t="S" i="1277" b="1" n="1"></line>
        <line t="C" i="1278" b="1" n="1">! The target string</line>
        <line t="X" i="1279" b="1" n="1">  class(t_string), intent(inout) :: left</line>
        <line t="X" i="1280" b="1" n="1"></line>
        <line t="C" i="1281" b="1" n="1">! The source string</line>
        <line t="X" i="1282" b="1" n="1">  type(t_string), intent(in) :: right</line>
        <line t="X" i="1283" b="1" n="1"></line>
        <line t="X" i="1284" b="1" n="1">  integer :: n</line>
        <line t="X" i="1285" b="1" n="1"></line>
        <line t="X" i="1286" b="1" n="1">  n = len(right%buffer)</line>
        <line t="X" i="1287" b="1" n="1"></line>
        <line t="C" i="1288" b="1" n="1">! Copy memory</line>
        <line t="X" i="1289" b="2" n="2">  if(allocated(left%buffer)) then</line>
        <line t="X" i="1290" b="2" n="2">    deallocate(left%buffer)</line>
        <line t="X" i="1291" b="2" n="1">  end if</line>
        <line t="X" i="1292" b="3" n="2">  if(allocated(right%buffer)) then</line>
        <line t="X" i="1293" b="3" n="2">    allocate( character(len=len(right%buffer)) :: left%buffer )</line>
        <line t="X" i="1294" b="3" n="2">    left%buffer = right%buffer</line>
        <line t="X" i="1295" b="3" n="1">  end if</line>
        <line t="X" i="1296" b="3" n="1"></line>
        <line t="ES" i="1297" b="3" n="1">end subroutine string_assign_from_string</line>
        <line t="ES" i="1298" b="1" n="1"></line>
        <line t="ES" i="1299" b="1" n="1"></line>
        <line t="C" i="1300" b="1" n="1">! Assign operator (char from string)</line>
        <line k="char_alloc_assign_from_string" t="S" i="1301" b="1" n="1">pure subroutine char_alloc_assign_from_string( left, right )</line>
        <line t="S" i="1302" b="1" n="1"></line>
        <line t="C" i="1303" b="1" n="1">! The target string</line>
        <line t="X" i="1304" b="1" n="1">  character(len=:), allocatable, intent(out) :: left</line>
        <line t="X" i="1305" b="1" n="1"></line>
        <line t="C" i="1306" b="1" n="1">! The source string</line>
        <line t="X" i="1307" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1308" b="1" n="1"></line>
        <line t="C" i="1309" b="1" n="1">! Copy memory</line>
        <line t="X" i="1310" b="1" n="1">  left = right%buffer</line>
        <line t="X" i="1311" b="1" n="1"></line>
        <line t="ES" i="1312" b="1" n="1">end subroutine char_alloc_assign_from_string</line>
        <line t="ES" i="1313" b="1" n="1"></line>
        <line t="ES" i="1314" b="1" n="1"></line>
        <line t="C" i="1315" b="1" n="1">! Concatenation operations</line>
        <line k="string_concat_string" t="F" i="1316" b="1" n="1">elemental function string_concat_string( left, right ) result(res)</line>
        <line t="F" i="1317" b="1" n="1"></line>
        <line t="C" i="1318" b="1" n="1">! The left string</line>
        <line t="X" i="1319" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1320" b="1" n="1"></line>
        <line t="C" i="1321" b="1" n="1">! The right string</line>
        <line t="X" i="1322" b="1" n="1">  type(t_string), intent(in) :: right</line>
        <line t="X" i="1323" b="1" n="1"></line>
        <line t="C" i="1324" b="1" n="1">! The resulting string</line>
        <line t="X" i="1325" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="1326" b="1" n="1"></line>
        <line t="C" i="1327" b="1" n="1">! Concatenate strings</line>
        <line t="X" i="1328" b="1" n="1">  res%buffer = left%buffer // right%buffer</line>
        <line t="X" i="1329" b="1" n="1"></line>
        <line t="EF" i="1330" b="1" n="1">end function string_concat_string</line>
        <line t="EF" i="1331" b="1" n="1"></line>
        <line t="EF" i="1332" b="1" n="1"></line>
        <line t="C" i="1333" b="1" n="1">! Concatenation operations</line>
        <line k="string_concat_char" t="F" i="1334" b="1" n="1">elemental function string_concat_char( left, right ) result(res)</line>
        <line t="F" i="1335" b="1" n="1"></line>
        <line t="C" i="1336" b="1" n="1">! The left string</line>
        <line t="X" i="1337" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1338" b="1" n="1"></line>
        <line t="C" i="1339" b="1" n="1">! The right string</line>
        <line t="X" i="1340" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1341" b="1" n="1"></line>
        <line t="C" i="1342" b="1" n="1">! The resulting string</line>
        <line t="X" i="1343" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="1344" b="1" n="1"></line>
        <line t="C" i="1345" b="1" n="1">! Concatenate strings</line>
        <line t="X" i="1346" b="1" n="1">  res%buffer = left%buffer // right</line>
        <line t="X" i="1347" b="1" n="1"></line>
        <line t="EF" i="1348" b="1" n="1">end function string_concat_char</line>
        <line t="EF" i="1349" b="1" n="1"></line>
        <line t="EF" i="1350" b="1" n="1"></line>
        <line t="C" i="1351" b="1" n="1">! Concatenation operations</line>
        <line k="char_concat_string" t="F" i="1352" b="1" n="1">elemental function char_concat_string( left, right ) result(res)</line>
        <line t="F" i="1353" b="1" n="1"></line>
        <line t="C" i="1354" b="1" n="1">! The left string</line>
        <line t="X" i="1355" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1356" b="1" n="1"></line>
        <line t="C" i="1357" b="1" n="1">! The right string</line>
        <line t="X" i="1358" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1359" b="1" n="1"></line>
        <line t="C" i="1360" b="1" n="1">! The resulting string</line>
        <line t="X" i="1361" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="1362" b="1" n="1"></line>
        <line t="C" i="1363" b="1" n="1">! Concatenate strings</line>
        <line t="X" i="1364" b="1" n="1">  res%buffer = left // right%buffer</line>
        <line t="X" i="1365" b="1" n="1"></line>
        <line t="EF" i="1366" b="1" n="1">end function char_concat_string</line>
        <line t="EF" i="1367" b="1" n="1"></line>
        <line t="EF" i="1368" b="1" n="1"></line>
        <line t="C" i="1369" b="1" n="1">! Concatenation operations</line>
        <line k="char_concat_char" t="F" i="1370" b="1" n="1">elemental function char_concat_char( left, right ) result(res)</line>
        <line t="F" i="1371" b="1" n="1"></line>
        <line t="C" i="1372" b="1" n="1">! The left string</line>
        <line t="X" i="1373" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1374" b="1" n="1"></line>
        <line t="C" i="1375" b="1" n="1">! The right string</line>
        <line t="X" i="1376" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1377" b="1" n="1"></line>
        <line t="C" i="1378" b="1" n="1">! The resulting string</line>
        <line t="X" i="1379" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="1380" b="1" n="1"></line>
        <line t="C" i="1381" b="1" n="1">! Concatenate strings</line>
        <line t="X" i="1382" b="1" n="1">  res%buffer = left // right</line>
        <line t="X" i="1383" b="1" n="1"></line>
        <line t="EF" i="1384" b="1" n="1">end function char_concat_char</line>
        <line t="EF" i="1385" b="1" n="1"></line>
        <line t="EF" i="1386" b="1" n="1"></line>
        <line t="C" i="1387" b="1" n="1">! Compute the number of tokens in a string</line>
        <line k="string_token_count" t="F" i="1388" b="1" n="1">pure function string_token_count( this, separator, multiple ) result(res)</line>
        <line t="F" i="1389" b="1" n="1"></line>
        <line t="C" i="1390" b="1" n="1">! The string to tokenize</line>
        <line t="X" i="1391" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="1392" b="1" n="1"></line>
        <line t="C" i="1393" b="1" n="1">! The separator character</line>
        <line t="X" i="1394" b="1" n="1">  character, intent(in) :: separator</line>
        <line t="X" i="1395" b="1" n="1"></line>
        <line t="C" i="1396" b="1" n="1">! Flag to consider consecutive separators as one (default to .false.)</line>
        <line t="X" i="1397" b="1" n="1">  logical, optional, intent(in) :: multiple</line>
        <line t="X" i="1398" b="1" n="1"></line>
        <line t="C" i="1399" b="1" n="1">! The number of tokens</line>
        <line t="X" i="1400" b="1" n="1">  integer :: res</line>
        <line t="X" i="1401" b="1" n="1"></line>
        <line t="C" i="1402" b="1" n="1">! Local variables</line>
        <line t="X" i="1403" b="1" n="1">  logical :: mult</line>
        <line t="X" i="1404" b="1" n="1">  integer :: consecutive</line>
        <line t="X" i="1405" b="1" n="1">  integer :: i, n</line>
        <line t="X" i="1406" b="1" n="1"></line>
        <line t="C" i="1407" b="1" n="1">! Initialise the number of tokens</line>
        <line t="C" i="1408" b="1" n="1">! Minimum one, even if the string is empty</line>
        <line t="X" i="1409" b="1" n="1">  res = 1</line>
        <line t="X" i="1410" b="1" n="1"></line>
        <line t="C" i="1411" b="1" n="1">! Compute the number of tokens</line>
        <line t="X" i="1412" b="1" n="1">  n = len(this%buffer)</line>
        <line t="X" i="1413" b="2" n="2">  do i = 1, n</line>
        <line t="X" i="1414" b="3" n="3">    if( this%buffer(i:i) == separator ) then</line>
        <line t="X" i="1415" b="3" n="3">      res = res + 1</line>
        <line t="X" i="1416" b="3" n="2">    end if</line>
        <line t="X" i="1417" b="3" n="1">  end do</line>
        <line t="X" i="1418" b="3" n="1"></line>
        <line t="C" i="1419" b="3" n="1">! Check if multiple separators are to be considered as one</line>
        <line t="X" i="1420" b="4" n="2">  if( present(multiple) ) then</line>
        <line t="X" i="1421" b="4" n="2">    mult = multiple</line>
        <line t="X" i="1422" b="5" n="3">    if( mult ) then</line>
        <line t="X" i="1423" b="5" n="3"></line>
        <line t="C" i="1424" b="5" n="3">!     Look for conscutive separators</line>
        <line t="X" i="1425" b="5" n="3">      consecutive = 0</line>
        <line t="X" i="1426" b="6" n="4">      do i = 1, n-1</line>
        <line t="X" i="1427" b="7" n="5">        if( this%buffer(i:i) == separator ) then</line>
        <line t="X" i="1428" b="8" n="6">          if( this%buffer(i+1:i+1) == separator ) then</line>
        <line t="X" i="1429" b="8" n="6">            consecutive = consecutive + 1</line>
        <line t="X" i="1430" b="8" n="5">          end if</line>
        <line t="X" i="1431" b="8" n="4">        end if</line>
        <line t="X" i="1432" b="8" n="3">      end do</line>
        <line t="X" i="1433" b="8" n="3"></line>
        <line t="C" i="1434" b="8" n="3">!     Remove the multiple separators</line>
        <line t="X" i="1435" b="8" n="3">      res = res - consecutive</line>
        <line t="X" i="1436" b="8" n="3"></line>
        <line t="X" i="1437" b="8" n="2">    end if</line>
        <line t="X" i="1438" b="8" n="1">  end if</line>
        <line t="X" i="1439" b="8" n="1"></line>
        <line t="EF" i="1440" b="8" n="1">end function string_token_count</line>
        <line t="EF" i="1441" b="1" n="1"></line>
        <line t="EF" i="1442" b="1" n="1"></line>
        <line t="C" i="1443" b="1" n="1">! Split a chracter string into token separated by a given character</line>
        <line k="string_split" t="S" i="1444" b="1" n="1">pure subroutine string_split( this, separator, tokens, multiple )</line>
        <line t="S" i="1445" b="1" n="1"></line>
        <line t="C" i="1446" b="1" n="1">! The string to split</line>
        <line t="X" i="1447" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="1448" b="1" n="1"></line>
        <line t="C" i="1449" b="1" n="1">! The separator character</line>
        <line t="X" i="1450" b="1" n="1">  character, intent(in) :: separator</line>
        <line t="X" i="1451" b="1" n="1"></line>
        <line t="C" i="1452" b="1" n="1">! The list of tokens</line>
        <line t="X" i="1453" b="1" n="1">  type(t_string), dimension(:), allocatable, intent(out) :: tokens</line>
        <line t="X" i="1454" b="1" n="1"></line>
        <line t="C" i="1455" b="1" n="1">! Flag to consider consecutive separators as one (default to .false.)</line>
        <line t="X" i="1456" b="1" n="1">  logical, optional, intent(in) :: multiple</line>
        <line t="X" i="1457" b="1" n="1"></line>
        <line t="C" i="1458" b="1" n="1">! Local variables</line>
        <line t="X" i="1459" b="1" n="1">  integer :: ntokens, itoken</line>
        <line t="X" i="1460" b="1" n="1">  integer :: idx, jdx, kdx</line>
        <line t="X" i="1461" b="1" n="1">  logical :: mult</line>
        <line t="X" i="1462" b="1" n="1"></line>
        <line t="C" i="1463" b="1" n="1">! Check if multiple separators are to be considered as one</line>
        <line t="X" i="1464" b="1" n="1">  mult = .false.</line>
        <line t="X" i="1465" b="2" n="2">  if( present(multiple) ) then</line>
        <line t="X" i="1466" b="2" n="2">    mult = multiple</line>
        <line t="X" i="1467" b="2" n="1">  end if</line>
        <line t="X" i="1468" b="2" n="1"></line>
        <line t="C" i="1469" b="2" n="1">! Compute number of tokens</line>
        <line t="X" i="1470" b="2" n="1">  ntokens = this%token_count( separator, multiple )</line>
        <line t="X" i="1471" b="2" n="1"></line>
        <line t="C" i="1472" b="2" n="1">! Allocate result</line>
        <line t="X" i="1473" b="2" n="1">  allocate( tokens(ntokens) )</line>
        <line t="X" i="1474" b="2" n="1"></line>
        <line t="C" i="1475" b="2" n="1">! Initialise character buffer indexing</line>
        <line t="X" i="1476" b="2" n="1">  idx = 1</line>
        <line t="X" i="1477" b="2" n="1"></line>
        <line t="C" i="1478" b="2" n="1">! Loop on the expected tokens</line>
        <line t="X" i="1479" b="3" n="2">  do itoken = 1, ntokens</line>
        <line t="X" i="1480" b="3" n="2"></line>
        <line t="C" i="1481" b="3" n="2">!   Look for the separator</line>
        <line t="X" i="1482" b="3" n="2">    jdx = index( this%buffer(idx:), separator )</line>
        <line t="X" i="1483" b="3" n="2"></line>
        <line t="C" i="1484" b="3" n="2">!   Process the return index</line>
        <line t="X" i="1485" b="4" n="3">    if( jdx == 0 ) then</line>
        <line t="X" i="1486" b="4" n="3"></line>
        <line t="C" i="1487" b="4" n="3">!     Separator not found; last token or no separator in input</line>
        <line t="X" i="1488" b="5" n="4">      if( idx &lt;= len(this%buffer) ) then</line>
        <line t="X" i="1489" b="5" n="4">        tokens(itoken) = this%buffer(idx:)</line>
        <line t="X" i="1490" b="6" n="4">      else</line>
        <line t="X" i="1491" b="6" n="4">        tokens(itoken) = string('')</line>
        <line t="X" i="1492" b="6" n="3">      end if</line>
        <line t="X" i="1493" b="6" n="3"></line>
        <line t="X" i="1494" b="7" n="3">    else</line>
        <line t="X" i="1495" b="7" n="3"></line>
        <line t="C" i="1496" b="7" n="3">!     Separator found</line>
        <line t="X" i="1497" b="7" n="3">      kdx = idx + jdx - 2</line>
        <line t="X" i="1498" b="8" n="4">      if( kdx &gt; 0  ) then</line>
        <line t="X" i="1499" b="8" n="4">        tokens(itoken) = this%buffer(idx:kdx)</line>
        <line t="X" i="1500" b="9" n="4">      else</line>
        <line t="X" i="1501" b="9" n="4">        tokens(itoken) = ''</line>
        <line t="X" i="1502" b="9" n="3">      end if</line>
        <line t="X" i="1503" b="9" n="3"></line>
        <line t="C" i="1504" b="9" n="3">!     If multiple separators are condired as 1, find start of next token</line>
        <line t="X" i="1505" b="10" n="4">      if( mult ) then</line>
        <line t="X" i="1506" b="11" n="5">        if( idx+jdx &lt; len(this%buffer) ) then</line>
        <line t="X" i="1507" b="12" n="6">          do while( this%buffer(idx+jdx:idx+jdx) == separator )</line>
        <line t="X" i="1508" b="12" n="6">            jdx = jdx + 1</line>
        <line t="X" i="1509" b="12" n="5">          end do</line>
        <line t="X" i="1510" b="12" n="4">        end if</line>
        <line t="X" i="1511" b="12" n="3">      end if</line>
        <line t="X" i="1512" b="12" n="3"></line>
        <line t="C" i="1513" b="12" n="3">!     Reset the search index</line>
        <line t="C" i="1514" b="12" n="3">!     jdx stops in the last appearence of the separator</line>
        <line t="X" i="1515" b="12" n="3">      idx = idx + jdx</line>
        <line t="X" i="1516" b="12" n="3"></line>
        <line t="X" i="1517" b="12" n="2">    end if</line>
        <line t="X" i="1518" b="12" n="2"></line>
        <line t="X" i="1519" b="12" n="1">  end do</line>
        <line t="X" i="1520" b="12" n="1"></line>
        <line t="ES" i="1521" b="12" n="1">end subroutine string_split</line>
        <line t="ES" i="1522" b="1" n="1"></line>
        <line t="ES" i="1523" b="1" n="1"></line>
        <line t="C" i="1524" b="1" n="1">! Build a string from tokens using the given characters for binding</line>
        <line k="string_join_char" t="S" i="1525" b="1" n="1">pure subroutine string_join_char( this, tokens, separator )</line>
        <line t="S" i="1526" b="1" n="1"></line>
        <line t="C" i="1527" b="1" n="1">! The calling string object</line>
        <line t="X" i="1528" b="1" n="1">  class(t_string), intent(inout) :: this</line>
        <line t="X" i="1529" b="1" n="1"></line>
        <line t="C" i="1530" b="1" n="1">! The list of tokens</line>
        <line t="X" i="1531" b="1" n="1">  type(t_string), dimension(:), intent(in) :: tokens</line>
        <line t="X" i="1532" b="1" n="1"></line>
        <line t="C" i="1533" b="1" n="1">! The separator character</line>
        <line t="X" i="1534" b="1" n="1">  character(len=*), intent(in) :: separator</line>
        <line t="X" i="1535" b="1" n="1"></line>
        <line t="C" i="1536" b="1" n="1">! Local variables</line>
        <line t="X" i="1537" b="1" n="1">  integer :: itoken</line>
        <line t="X" i="1538" b="1" n="1"></line>
        <line t="C" i="1539" b="1" n="1">! Initialise</line>
        <line t="X" i="1540" b="1" n="1">  this%buffer = tokens(1)%buffer</line>
        <line t="X" i="1541" b="1" n="1"></line>
        <line t="C" i="1542" b="1" n="1">! Loop on the tokens</line>
        <line t="X" i="1543" b="2" n="2">  do itoken = 2, size(tokens)</line>
        <line t="X" i="1544" b="2" n="2">    this%buffer = this%buffer // separator // tokens(itoken)%buffer</line>
        <line t="X" i="1545" b="2" n="1">  end do</line>
        <line t="X" i="1546" b="2" n="1"></line>
        <line t="ES" i="1547" b="2" n="1">end subroutine string_join_char</line>
        <line t="ES" i="1548" b="1" n="1"></line>
        <line t="ES" i="1549" b="1" n="1"></line>
        <line t="C" i="1550" b="1" n="1">! Build a string from tokens using the given string for binding</line>
        <line k="string_join_string" t="S" i="1551" b="1" n="1">pure subroutine string_join_string( this, tokens, separator )</line>
        <line t="S" i="1552" b="1" n="1"></line>
        <line t="C" i="1553" b="1" n="1">! The calling string object</line>
        <line t="X" i="1554" b="1" n="1">  class(t_string), intent(inout) :: this</line>
        <line t="X" i="1555" b="1" n="1"></line>
        <line t="C" i="1556" b="1" n="1">! The list of tokens</line>
        <line t="X" i="1557" b="1" n="1">  type(t_string), dimension(:), intent(in) :: tokens</line>
        <line t="X" i="1558" b="1" n="1"></line>
        <line t="C" i="1559" b="1" n="1">! The separator character</line>
        <line t="X" i="1560" b="1" n="1">  type(t_string), intent(in) :: separator</line>
        <line t="X" i="1561" b="1" n="1"></line>
        <line t="C" i="1562" b="1" n="1">! Call the character interface</line>
        <line t="X" i="1563" b="1" n="1">  call this%join( tokens, separator%character() )</line>
        <line t="X" i="1564" b="1" n="1">  </line>
        <line t="ES" i="1565" b="1" n="1">end subroutine string_join_string</line>
        <line t="ES" i="1566" b="1" n="1"></line>
        <line t="ES" i="1567" b="1" n="1"></line>
        <line t="C" i="1568" b="1" n="1">! General object comparison override</line>
        <line k="string_equals" t="F" i="1569" b="1" n="1">elemental function string_equals( this, other ) result(res)</line>
        <line t="F" i="1570" b="1" n="1"></line>
        <line t="C" i="1571" b="1" n="1">! The left string</line>
        <line t="X" i="1572" b="1" n="1">  class(t_string), intent(in) :: this</line>
        <line t="X" i="1573" b="1" n="1"></line>
        <line t="C" i="1574" b="1" n="1">! The right string</line>
        <line t="X" i="1575" b="1" n="1">  class(t_object), intent(in) :: other</line>
        <line t="X" i="1576" b="1" n="1"></line>
        <line t="C" i="1577" b="1" n="1">! Comparison result</line>
        <line t="X" i="1578" b="1" n="1">  logical :: res</line>
        <line t="X" i="1579" b="1" n="1"></line>
        <line t="C" i="1580" b="1" n="1">! Compute equality</line>
        <line t="X" i="1581" b="1" n="2">  select type(other)</line>
        <line t="X" i="1582" b="2" n="2">    type is(t_string)</line>
        <line t="X" i="1583" b="2" n="2">      res = ( this%buffer == other%buffer )</line>
        <line t="X" i="1584" b="3" n="2">    class default</line>
        <line t="X" i="1585" b="3" n="2">      res = this%t_object%equals(other)</line>
        <line t="X" i="1586" b="3" n="1">  end select</line>
        <line t="X" i="1587" b="3" n="1"></line>
        <line t="EF" i="1588" b="3" n="1">end function string_equals</line>
        <line t="EF" i="1589" b="1" n="1"></line>
        <line t="EF" i="1590" b="1" n="1"></line>
        <line t="C" i="1591" b="1" n="1">! Equality comparison operator (string == string)</line>
        <line k="string_equal_string" t="F" i="1592" b="1" n="1">elemental function string_equal_string( left, right ) result(res)</line>
        <line t="F" i="1593" b="1" n="1"></line>
        <line t="C" i="1594" b="1" n="1">! The left string</line>
        <line t="X" i="1595" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1596" b="1" n="1"></line>
        <line t="C" i="1597" b="1" n="1">! The right string</line>
        <line t="X" i="1598" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1599" b="1" n="1"></line>
        <line t="C" i="1600" b="1" n="1">! The comparison result</line>
        <line t="X" i="1601" b="1" n="1">  logical :: res</line>
        <line t="X" i="1602" b="1" n="1"></line>
        <line t="C" i="1603" b="1" n="1">! Compute equality</line>
        <line t="X" i="1604" b="1" n="1">  res = left%equals( right )</line>
        <line t="X" i="1605" b="1" n="1"></line>
        <line t="EF" i="1606" b="1" n="1">end function string_equal_string</line>
        <line t="EF" i="1607" b="1" n="1"></line>
        <line t="EF" i="1608" b="1" n="1"></line>
        <line t="C" i="1609" b="1" n="1">! Equality comparison operator (string == character)</line>
        <line k="string_equal_char" t="F" i="1610" b="1" n="1">elemental function string_equal_char( left, right ) result(res)</line>
        <line t="F" i="1611" b="1" n="1"></line>
        <line t="C" i="1612" b="1" n="1">! The left string</line>
        <line t="X" i="1613" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1614" b="1" n="1"></line>
        <line t="C" i="1615" b="1" n="1">! The right string</line>
        <line t="X" i="1616" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1617" b="1" n="1"></line>
        <line t="C" i="1618" b="1" n="1">! The comparison result</line>
        <line t="X" i="1619" b="1" n="1">  logical :: res</line>
        <line t="X" i="1620" b="1" n="1"></line>
        <line t="C" i="1621" b="1" n="1">! Compute equality</line>
        <line t="X" i="1622" b="1" n="1">  res = ( left%buffer == right )</line>
        <line t="X" i="1623" b="1" n="1"></line>
        <line t="EF" i="1624" b="1" n="1">end function string_equal_char</line>
        <line t="EF" i="1625" b="1" n="1"></line>
        <line t="EF" i="1626" b="1" n="1"></line>
        <line t="C" i="1627" b="1" n="1">! Equality comparison operator (character == string)</line>
        <line k="char_equal_string" t="F" i="1628" b="1" n="1">elemental function char_equal_string( left, right ) result(res)</line>
        <line t="F" i="1629" b="1" n="1"></line>
        <line t="C" i="1630" b="1" n="1">! The left string</line>
        <line t="X" i="1631" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1632" b="1" n="1"></line>
        <line t="C" i="1633" b="1" n="1">! The right string</line>
        <line t="X" i="1634" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1635" b="1" n="1"></line>
        <line t="C" i="1636" b="1" n="1">! The comparison result</line>
        <line t="X" i="1637" b="1" n="1">  logical :: res</line>
        <line t="X" i="1638" b="1" n="1"></line>
        <line t="C" i="1639" b="1" n="1">! Compute equality</line>
        <line t="X" i="1640" b="1" n="1">  res = ( left == right%buffer )</line>
        <line t="X" i="1641" b="1" n="1"></line>
        <line t="EF" i="1642" b="1" n="1">end function char_equal_string</line>
        <line t="EF" i="1643" b="1" n="1"></line>
        <line t="EF" i="1644" b="1" n="1"></line>
        <line t="C" i="1645" b="1" n="1">! Inequality comparison operator (string /= string)</line>
        <line k="string_nonequal_string" t="F" i="1646" b="1" n="1">elemental function string_nonequal_string( left, right ) result(res)</line>
        <line t="F" i="1647" b="1" n="1"></line>
        <line t="C" i="1648" b="1" n="1">! The left string</line>
        <line t="X" i="1649" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1650" b="1" n="1"></line>
        <line t="C" i="1651" b="1" n="1">! The right string</line>
        <line t="X" i="1652" b="1" n="1">  type(t_string), intent(in) :: right</line>
        <line t="X" i="1653" b="1" n="1"></line>
        <line t="C" i="1654" b="1" n="1">! The comparison result</line>
        <line t="X" i="1655" b="1" n="1">  logical :: res</line>
        <line t="X" i="1656" b="1" n="1"></line>
        <line t="C" i="1657" b="1" n="1">! Compute equality</line>
        <line t="X" i="1658" b="1" n="1">  res = .not. left%equals( right )</line>
        <line t="X" i="1659" b="1" n="1"></line>
        <line t="EF" i="1660" b="1" n="1">end function string_nonequal_string</line>
        <line t="EF" i="1661" b="1" n="1"></line>
        <line t="EF" i="1662" b="1" n="1"></line>
        <line t="C" i="1663" b="1" n="1">! Inequality comparison operator (string /= character)</line>
        <line k="string_nonequal_char" t="F" i="1664" b="1" n="1">elemental function string_nonequal_char( left, right ) result(res)</line>
        <line t="F" i="1665" b="1" n="1"></line>
        <line t="C" i="1666" b="1" n="1">! The left string</line>
        <line t="X" i="1667" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1668" b="1" n="1"></line>
        <line t="C" i="1669" b="1" n="1">! The right string</line>
        <line t="X" i="1670" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1671" b="1" n="1"></line>
        <line t="C" i="1672" b="1" n="1">! The comparison result</line>
        <line t="X" i="1673" b="1" n="1">  logical :: res</line>
        <line t="X" i="1674" b="1" n="1"></line>
        <line t="C" i="1675" b="1" n="1">! Compute equality</line>
        <line t="X" i="1676" b="1" n="1">  res = ( left%buffer /= right )</line>
        <line t="X" i="1677" b="1" n="1"></line>
        <line t="EF" i="1678" b="1" n="1">end function string_nonequal_char</line>
        <line t="EF" i="1679" b="1" n="1"></line>
        <line t="EF" i="1680" b="1" n="1"></line>
        <line t="C" i="1681" b="1" n="1">! Inequality comparison operator (character /= string)</line>
        <line k="char_nonequal_string" t="F" i="1682" b="1" n="1">elemental function char_nonequal_string( left, right ) result(res)</line>
        <line t="F" i="1683" b="1" n="1"></line>
        <line t="C" i="1684" b="1" n="1">! The left string</line>
        <line t="X" i="1685" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1686" b="1" n="1"></line>
        <line t="C" i="1687" b="1" n="1">! The right string</line>
        <line t="X" i="1688" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1689" b="1" n="1"></line>
        <line t="C" i="1690" b="1" n="1">! The comparison result</line>
        <line t="X" i="1691" b="1" n="1">  logical :: res</line>
        <line t="X" i="1692" b="1" n="1"></line>
        <line t="C" i="1693" b="1" n="1">! Compute equality</line>
        <line t="X" i="1694" b="1" n="1">  res = ( left /= right%buffer )</line>
        <line t="X" i="1695" b="1" n="1"></line>
        <line t="EF" i="1696" b="1" n="1">end function char_nonequal_string</line>
        <line t="EF" i="1697" b="1" n="1"></line>
        <line t="EF" i="1698" b="1" n="1"></line>
        <line t="C" i="1699" b="1" n="1">! Comparison operator 'string &gt; string'</line>
        <line k="string_greater_string" t="F" i="1700" b="1" n="1">elemental function string_greater_string( left, right ) result(res)</line>
        <line t="F" i="1701" b="1" n="1"></line>
        <line t="C" i="1702" b="1" n="1">! The left string</line>
        <line t="X" i="1703" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1704" b="1" n="1"></line>
        <line t="C" i="1705" b="1" n="1">! The right string</line>
        <line t="X" i="1706" b="1" n="1">  type(t_string), intent(in) :: right</line>
        <line t="X" i="1707" b="1" n="1"></line>
        <line t="C" i="1708" b="1" n="1">! The comparison result</line>
        <line t="X" i="1709" b="1" n="1">  logical :: res</line>
        <line t="X" i="1710" b="1" n="1"></line>
        <line t="C" i="1711" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1712" b="1" n="1">  res = ( left%buffer &gt; right%buffer )</line>
        <line t="X" i="1713" b="1" n="1"></line>
        <line t="EF" i="1714" b="1" n="1">end function string_greater_string</line>
        <line t="EF" i="1715" b="1" n="1"></line>
        <line t="EF" i="1716" b="1" n="1"></line>
        <line t="C" i="1717" b="1" n="1">! Comparison operator 'string &gt; character'</line>
        <line k="string_greater_char" t="F" i="1718" b="1" n="1">elemental function string_greater_char( left, right ) result(res)</line>
        <line t="F" i="1719" b="1" n="1"></line>
        <line t="C" i="1720" b="1" n="1">! The left string</line>
        <line t="X" i="1721" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1722" b="1" n="1"></line>
        <line t="C" i="1723" b="1" n="1">! The right string</line>
        <line t="X" i="1724" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1725" b="1" n="1"></line>
        <line t="C" i="1726" b="1" n="1">! The comparison result</line>
        <line t="X" i="1727" b="1" n="1">  logical :: res</line>
        <line t="X" i="1728" b="1" n="1"></line>
        <line t="C" i="1729" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1730" b="1" n="1">  res = ( left%buffer &gt; right )</line>
        <line t="X" i="1731" b="1" n="1"></line>
        <line t="EF" i="1732" b="1" n="1">end function string_greater_char</line>
        <line t="EF" i="1733" b="1" n="1"></line>
        <line t="EF" i="1734" b="1" n="1"></line>
        <line t="C" i="1735" b="1" n="1">! Comparison operator 'character &gt; string'</line>
        <line k="char_greater_string" t="F" i="1736" b="1" n="1">elemental function char_greater_string( left, right ) result(res)</line>
        <line t="F" i="1737" b="1" n="1"></line>
        <line t="C" i="1738" b="1" n="1">! The left string</line>
        <line t="X" i="1739" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1740" b="1" n="1"></line>
        <line t="C" i="1741" b="1" n="1">! The right string</line>
        <line t="X" i="1742" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1743" b="1" n="1"></line>
        <line t="C" i="1744" b="1" n="1">! The comparison result</line>
        <line t="X" i="1745" b="1" n="1">  logical :: res</line>
        <line t="X" i="1746" b="1" n="1"></line>
        <line t="C" i="1747" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1748" b="1" n="1">  res = ( left &gt; right%buffer )</line>
        <line t="X" i="1749" b="1" n="1"></line>
        <line t="EF" i="1750" b="1" n="1">end function char_greater_string</line>
        <line t="EF" i="1751" b="1" n="1"></line>
        <line t="EF" i="1752" b="1" n="1"></line>
        <line t="C" i="1753" b="1" n="1">! Comparison operator 'string &gt;= string'</line>
        <line k="string_greater_equal_string" t="F" i="1754" b="1" n="1">elemental function string_greater_equal_string( left, right ) result(res)</line>
        <line t="F" i="1755" b="1" n="1"></line>
        <line t="C" i="1756" b="1" n="1">! The left string</line>
        <line t="X" i="1757" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1758" b="1" n="1"></line>
        <line t="C" i="1759" b="1" n="1">! The right string</line>
        <line t="X" i="1760" b="1" n="1">  type(t_string), intent(in) :: right</line>
        <line t="X" i="1761" b="1" n="1"></line>
        <line t="C" i="1762" b="1" n="1">! The comparison result</line>
        <line t="X" i="1763" b="1" n="1">  logical :: res</line>
        <line t="X" i="1764" b="1" n="1"></line>
        <line t="C" i="1765" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1766" b="1" n="1">  res = ( left%buffer &gt;= right%buffer )</line>
        <line t="X" i="1767" b="1" n="1"></line>
        <line t="EF" i="1768" b="1" n="1">end function string_greater_equal_string</line>
        <line t="EF" i="1769" b="1" n="1"></line>
        <line t="EF" i="1770" b="1" n="1"></line>
        <line t="C" i="1771" b="1" n="1">! Comparison operator 'string &gt;= character'</line>
        <line k="string_greater_equal_char" t="F" i="1772" b="1" n="1">elemental function string_greater_equal_char( left, right ) result(res)</line>
        <line t="F" i="1773" b="1" n="1"></line>
        <line t="C" i="1774" b="1" n="1">! The left string</line>
        <line t="X" i="1775" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1776" b="1" n="1"></line>
        <line t="C" i="1777" b="1" n="1">! The right string</line>
        <line t="X" i="1778" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1779" b="1" n="1"></line>
        <line t="C" i="1780" b="1" n="1">! The comparison result</line>
        <line t="X" i="1781" b="1" n="1">  logical :: res</line>
        <line t="X" i="1782" b="1" n="1"></line>
        <line t="C" i="1783" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1784" b="1" n="1">  res = ( left%buffer &gt;= right )</line>
        <line t="X" i="1785" b="1" n="1"></line>
        <line t="EF" i="1786" b="1" n="1">end function string_greater_equal_char</line>
        <line t="EF" i="1787" b="1" n="1"></line>
        <line t="EF" i="1788" b="1" n="1"></line>
        <line t="C" i="1789" b="1" n="1">! Comparison operator 'character &gt;= string'</line>
        <line k="char_greater_equal_string" t="F" i="1790" b="1" n="1">elemental function char_greater_equal_string( left, right ) result(res)</line>
        <line t="F" i="1791" b="1" n="1"></line>
        <line t="C" i="1792" b="1" n="1">! The left string</line>
        <line t="X" i="1793" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1794" b="1" n="1"></line>
        <line t="C" i="1795" b="1" n="1">! The right string</line>
        <line t="X" i="1796" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1797" b="1" n="1"></line>
        <line t="C" i="1798" b="1" n="1">! The comparison result</line>
        <line t="X" i="1799" b="1" n="1">  logical :: res</line>
        <line t="X" i="1800" b="1" n="1"></line>
        <line t="C" i="1801" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1802" b="1" n="1">  res = ( left &gt;= right%buffer )</line>
        <line t="X" i="1803" b="1" n="1"></line>
        <line t="EF" i="1804" b="1" n="1">end function char_greater_equal_string</line>
        <line t="EF" i="1805" b="1" n="1"></line>
        <line t="EF" i="1806" b="1" n="1"></line>
        <line t="C" i="1807" b="1" n="1">! Comparison operator 'string &lt; string'</line>
        <line k="string_less_string" t="F" i="1808" b="1" n="1">elemental function string_less_string( left, right ) result(res)</line>
        <line t="F" i="1809" b="1" n="1"></line>
        <line t="C" i="1810" b="1" n="1">! The left string</line>
        <line t="X" i="1811" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1812" b="1" n="1"></line>
        <line t="C" i="1813" b="1" n="1">! The right string</line>
        <line t="X" i="1814" b="1" n="1">  type(t_string), intent(in) :: right</line>
        <line t="X" i="1815" b="1" n="1"></line>
        <line t="C" i="1816" b="1" n="1">! The comparison result</line>
        <line t="X" i="1817" b="1" n="1">  logical :: res</line>
        <line t="X" i="1818" b="1" n="1"></line>
        <line t="C" i="1819" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1820" b="1" n="1">  res = ( left%buffer &lt; right%buffer )</line>
        <line t="X" i="1821" b="1" n="1"></line>
        <line t="EF" i="1822" b="1" n="1">end function string_less_string</line>
        <line t="EF" i="1823" b="1" n="1"></line>
        <line t="EF" i="1824" b="1" n="1"></line>
        <line t="C" i="1825" b="1" n="1">! Comparison operator 'string &lt; character'</line>
        <line k="string_less_char" t="F" i="1826" b="1" n="1">elemental function string_less_char( left, right ) result(res)</line>
        <line t="F" i="1827" b="1" n="1"></line>
        <line t="C" i="1828" b="1" n="1">! The left string</line>
        <line t="X" i="1829" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1830" b="1" n="1"></line>
        <line t="C" i="1831" b="1" n="1">! The right string</line>
        <line t="X" i="1832" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1833" b="1" n="1"></line>
        <line t="C" i="1834" b="1" n="1">! The comparison result</line>
        <line t="X" i="1835" b="1" n="1">  logical :: res</line>
        <line t="X" i="1836" b="1" n="1"></line>
        <line t="C" i="1837" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1838" b="1" n="1">  res = ( left%buffer &lt; right )</line>
        <line t="X" i="1839" b="1" n="1"></line>
        <line t="EF" i="1840" b="1" n="1">end function string_less_char</line>
        <line t="EF" i="1841" b="1" n="1"></line>
        <line t="EF" i="1842" b="1" n="1"></line>
        <line t="C" i="1843" b="1" n="1">! Comparison operator 'character &lt; string'</line>
        <line k="char_less_string" t="F" i="1844" b="1" n="1">elemental function char_less_string( left, right ) result(res)</line>
        <line t="F" i="1845" b="1" n="1"></line>
        <line t="C" i="1846" b="1" n="1">! The left string</line>
        <line t="X" i="1847" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1848" b="1" n="1"></line>
        <line t="C" i="1849" b="1" n="1">! The right string</line>
        <line t="X" i="1850" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1851" b="1" n="1"></line>
        <line t="C" i="1852" b="1" n="1">! The comparison result</line>
        <line t="X" i="1853" b="1" n="1">  logical :: res</line>
        <line t="X" i="1854" b="1" n="1"></line>
        <line t="C" i="1855" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1856" b="1" n="1">  res = ( left &lt; right%buffer )</line>
        <line t="X" i="1857" b="1" n="1"></line>
        <line t="EF" i="1858" b="1" n="1">end function char_less_string</line>
        <line t="EF" i="1859" b="1" n="1"></line>
        <line t="EF" i="1860" b="1" n="1"></line>
        <line t="C" i="1861" b="1" n="1">! Comparison operator 'string &lt;= string'</line>
        <line k="string_less_equal_string" t="F" i="1862" b="1" n="1">elemental function string_less_equal_string( left, right ) result(res)</line>
        <line t="F" i="1863" b="1" n="1"></line>
        <line t="C" i="1864" b="1" n="1">! The left string</line>
        <line t="X" i="1865" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1866" b="1" n="1"></line>
        <line t="C" i="1867" b="1" n="1">! The right string</line>
        <line t="X" i="1868" b="1" n="1">  type(t_string), intent(in) :: right</line>
        <line t="X" i="1869" b="1" n="1"></line>
        <line t="C" i="1870" b="1" n="1">! The comparison result</line>
        <line t="X" i="1871" b="1" n="1">  logical :: res</line>
        <line t="X" i="1872" b="1" n="1"></line>
        <line t="C" i="1873" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1874" b="1" n="1">  res = ( left%buffer &lt;= right%buffer )</line>
        <line t="X" i="1875" b="1" n="1"></line>
        <line t="EF" i="1876" b="1" n="1">end function string_less_equal_string</line>
        <line t="EF" i="1877" b="1" n="1"></line>
        <line t="EF" i="1878" b="1" n="1"></line>
        <line t="C" i="1879" b="1" n="1">! Comparison operator 'string &lt;= character'</line>
        <line k="string_less_equal_char" t="F" i="1880" b="1" n="1">elemental function string_less_equal_char( left, right ) result(res)</line>
        <line t="F" i="1881" b="1" n="1"></line>
        <line t="C" i="1882" b="1" n="1">! The left string</line>
        <line t="X" i="1883" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1884" b="1" n="1"></line>
        <line t="C" i="1885" b="1" n="1">! The right string</line>
        <line t="X" i="1886" b="1" n="1">  character(len=*), intent(in) :: right</line>
        <line t="X" i="1887" b="1" n="1"></line>
        <line t="C" i="1888" b="1" n="1">! The comparison result</line>
        <line t="X" i="1889" b="1" n="1">  logical :: res</line>
        <line t="X" i="1890" b="1" n="1"></line>
        <line t="C" i="1891" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1892" b="1" n="1">  res = ( left%buffer &lt;= right )</line>
        <line t="X" i="1893" b="1" n="1"></line>
        <line t="EF" i="1894" b="1" n="1">end function string_less_equal_char</line>
        <line t="EF" i="1895" b="1" n="1"></line>
        <line t="EF" i="1896" b="1" n="1"></line>
        <line t="C" i="1897" b="1" n="1">! Comparison operator 'character &lt;= string'</line>
        <line k="char_less_equal_string" t="F" i="1898" b="1" n="1">elemental function char_less_equal_string( left, right ) result(res)</line>
        <line t="F" i="1899" b="1" n="1"></line>
        <line t="C" i="1900" b="1" n="1">! The left string</line>
        <line t="X" i="1901" b="1" n="1">  character(len=*), intent(in) :: left</line>
        <line t="X" i="1902" b="1" n="1"></line>
        <line t="C" i="1903" b="1" n="1">! The right string</line>
        <line t="X" i="1904" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1905" b="1" n="1"></line>
        <line t="C" i="1906" b="1" n="1">! The comparison result</line>
        <line t="X" i="1907" b="1" n="1">  logical :: res</line>
        <line t="X" i="1908" b="1" n="1"></line>
        <line t="C" i="1909" b="1" n="1">! Compute comparison</line>
        <line t="X" i="1910" b="1" n="1">  res = ( left &lt;= right%buffer )</line>
        <line t="X" i="1911" b="1" n="1"></line>
        <line t="EF" i="1912" b="1" n="1">end function char_less_equal_string</line>
        <line t="EF" i="1913" b="1" n="1"></line>
        <line t="EF" i="1914" b="1" n="1"></line>
        <line t="C" i="1915" b="1" n="1">! Comparison function for quicksort</line>
        <line k="string_less" t="F" i="1916" b="1" n="1">pure function string_less( left, right ) result(res)</line>
        <line t="F" i="1917" b="1" n="1"></line>
        <line t="C" i="1918" b="1" n="1">! Calling object</line>
        <line t="X" i="1919" b="1" n="1">  class(t_string), intent(in) :: left</line>
        <line t="X" i="1920" b="1" n="1"></line>
        <line t="C" i="1921" b="1" n="1">! Other comparison object</line>
        <line t="X" i="1922" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1923" b="1" n="1"></line>
        <line t="C" i="1924" b="1" n="1">! Comparison result</line>
        <line t="X" i="1925" b="1" n="1">  logical :: res</line>
        <line t="X" i="1926" b="1" n="1"></line>
        <line t="C" i="1927" b="1" n="1">! Do the comparison</line>
        <line t="X" i="1928" b="1" n="1">  res = ( left%buffer &lt; right%buffer )</line>
        <line t="X" i="1929" b="1" n="1"></line>
        <line t="EF" i="1930" b="1" n="1">end function string_less</line>
        <line t="EF" i="1931" b="1" n="1"></line>
        <line t="EF" i="1932" b="1" n="1"></line>
        <line t="C" i="1933" b="1" n="1">! Assignment for quicksort</line>
        <line k="string_assign" t="S" i="1934" b="1" n="1">pure subroutine string_assign( left, right )</line>
        <line t="S" i="1935" b="1" n="1"></line>
        <line t="C" i="1936" b="1" n="1">! Calling object</line>
        <line t="X" i="1937" b="1" n="1">  class(t_string), intent(inout) :: left</line>
        <line t="X" i="1938" b="1" n="1"></line>
        <line t="C" i="1939" b="1" n="1">! Other comparison object</line>
        <line t="X" i="1940" b="1" n="1">  class(t_string), intent(in) :: right</line>
        <line t="X" i="1941" b="1" n="1"></line>
        <line t="C" i="1942" b="1" n="1">! Do the comparison</line>
        <line t="X" i="1943" b="1" n="1">  left%buffer = right%buffer</line>
        <line t="X" i="1944" b="1" n="1"></line>
        <line t="ES" i="1945" b="1" n="1">end subroutine string_assign</line>
        <line t="ES" i="1946" b="1" n="1"></line>
        <line t="M" i="1947" b="1" n="1">end module m_string</line>
        <line t="M" i="1948" b="1" n="1"></line>
    </code>
</fmx>