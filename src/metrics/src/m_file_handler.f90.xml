<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_file_handler.f90">
    <context>
        <time>2025-03-09T18:18:31</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Fommons</project>
        <name>m_file_handler.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_file_handler" type="module">
            <main>
                <lines>
                    <source percent="35.83">43</source>
                    <comments percent="37.50">45</comments>
                    <empty percent="26.67">32</empty>
                    <total>120</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="file_handler_assign" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="44.44">8</source>
                            <comments percent="22.22">4</comments>
                            <empty percent="33.33">6</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_close" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="44.83">13</source>
                            <comments percent="24.14">7</comments>
                            <empty percent="31.03">9</empty>
                            <total>29</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="44.44">12</source>
                            <comments percent="25.93">7</comments>
                            <empty percent="29.63">8</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_exists" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_flush" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">4</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="41.67">5</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_get_file_path" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_get_iostat" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_get_unit" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_is_open" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_open" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="74.81">101</source>
                            <comments percent="11.85">16</comments>
                            <empty percent="13.33">18</empty>
                            <total>135</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>29</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_rewind" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">4</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="41.67">5</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="file_handler_to_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="55.17">48</source>
                            <comments percent="18.39">16</comments>
                            <empty percent="26.44">23</empty>
                            <total>87</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>14</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="free_lun" type="function">
                    <statistics>
                        <lines>
                            <source percent="58.33">14</source>
                            <comments percent="16.67">4</comments>
                            <empty percent="25.00">6</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="49.91">278</source>
                    <comments percent="23.34">130</comments>
                    <empty percent="26.75">149</empty>
                    <total>557</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>29</maximum>
                    <average>4.43</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>6</maximum>
                    <average>1.93</average>
                </nesting>
                <methods>14</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="49.91">278</source>
            <comments percent="23.34">130</comments>
            <empty percent="26.75">149</empty>
            <total>557</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>29</maximum>
            <average>4.43</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>6</maximum>
            <average>1.93</average>
        </nesting>
        <methods>14</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_file_handler</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Module for the implementation of file handler</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of Fommons.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             Fommons is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             Fommons is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with Fommons.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use, intrinsic :: iso_fortran_env</line>
        <line t="X" i="30" b="0" n="0"></line>
        <line t="X" i="31" b="0" n="0">  use m_object</line>
        <line t="X" i="32" b="0" n="0">  use m_string</line>
        <line t="X" i="33" b="0" n="0"></line>
        <line t="C" i="34" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="35" b="0" n="0"></line>
        <line t="X" i="36" b="0" n="0">  implicit none</line>
        <line t="X" i="37" b="0" n="0"></line>
        <line t="C" i="38" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="39" b="0" n="0"></line>
        <line t="X" i="40" b="0" n="0">  private</line>
        <line t="X" i="41" b="0" n="0">  public t_file_handler</line>
        <line t="X" i="42" b="0" n="0">  public file_handler</line>
        <line t="X" i="43" b="0" n="0"></line>
        <line t="X" i="44" b="0" n="0">  public file_handler_unix_eol, file_handler_dos_eol, file_handler_mac_eol</line>
        <line t="X" i="45" b="0" n="0">  public file_handler_eol</line>
        <line t="X" i="46" b="0" n="0"></line>
        <line t="C" i="47" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="48" b="0" n="0"></line>
        <line t="C" i="49" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="50" b="0" n="0"></line>
        <line t="C" i="51" b="0" n="0">! Carriage control (EOL) symbols</line>
        <line t="X" i="52" b="0" n="0">  integer, parameter :: file_handler_unix_eol = 1</line>
        <line t="X" i="53" b="0" n="0">  integer, parameter :: file_handler_dos_eol  = 2</line>
        <line t="X" i="54" b="0" n="0">  integer, parameter :: file_handler_mac_eol  = 3</line>
        <line t="X" i="55" b="0" n="0">  character(len=2), parameter, dimension(3) :: file_handler_eol = (/ char(10)//' ', char(13) // char(10), char(13)//' ' /)</line>
        <line t="X" i="56" b="0" n="0"></line>
        <line t="C" i="57" b="0" n="0">! The file handler class</line>
        <line t="T" i="58" b="0" n="0">  type, extends(t_object) :: t_file_handler</line>
        <line t="X" i="59" b="0" n="0">    private</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="C" i="61" b="0" n="0">!     File path</line>
        <line t="X" i="62" b="0" n="0">      type(t_string) :: file_path</line>
        <line t="X" i="63" b="0" n="0"></line>
        <line t="C" i="64" b="0" n="0">!     Type of end of line to use</line>
        <line t="X" i="65" b="0" n="0">      integer :: eol = file_handler_unix_eol</line>
        <line t="X" i="66" b="0" n="0"></line>
        <line t="C" i="67" b="0" n="0">!     Fortran unit used by the handler</line>
        <line t="X" i="68" b="0" n="0">      integer :: unit = -1</line>
        <line t="X" i="69" b="0" n="0"></line>
        <line t="C" i="70" b="0" n="0">!     Current handler unit access status</line>
        <line t="X" i="71" b="0" n="0">      integer :: iostat = 0</line>
        <line t="X" i="72" b="0" n="0"></line>
        <line t="X" i="73" b="0" n="0">    contains</line>
        <line t="X" i="74" b="0" n="0"></line>
        <line t="C" i="75" b="0" n="0">!     Access functions</line>
        <line t="X" i="76" b="0" n="0">      generic :: get_unit =&gt; file_handler_get_unit</line>
        <line t="X" i="77" b="0" n="0">      procedure, private :: file_handler_get_unit</line>
        <line t="X" i="78" b="0" n="0">      generic :: get_iostat =&gt; file_handler_get_iostat</line>
        <line t="X" i="79" b="0" n="0">      procedure, private :: file_handler_get_iostat</line>
        <line t="X" i="80" b="0" n="0">      generic :: get_file_path =&gt; file_handler_get_file_path</line>
        <line t="X" i="81" b="0" n="0">      procedure, private :: file_handler_get_file_path</line>
        <line t="X" i="82" b="0" n="0"></line>
        <line t="C" i="83" b="0" n="0">!     Check if file exists</line>
        <line t="X" i="84" b="0" n="0">      procedure :: exists =&gt; file_handler_exists</line>
        <line t="X" i="85" b="0" n="0"></line>
        <line t="C" i="86" b="0" n="0">!     Open the file</line>
        <line t="X" i="87" b="0" n="0">      procedure :: open =&gt; file_handler_open</line>
        <line t="X" i="88" b="0" n="0"></line>
        <line t="C" i="89" b="0" n="0">!     Flush the contents of the buffer to file</line>
        <line t="X" i="90" b="0" n="0">      procedure :: flush =&gt; file_handler_flush</line>
        <line t="X" i="91" b="0" n="0"></line>
        <line t="C" i="92" b="0" n="0">!     Rewind the file reading</line>
        <line t="X" i="93" b="0" n="0">      procedure :: rewind =&gt; file_handler_rewind</line>
        <line t="X" i="94" b="0" n="0"></line>
        <line t="C" i="95" b="0" n="0">!     Close the file</line>
        <line t="X" i="96" b="0" n="0">      procedure :: close =&gt; file_handler_close</line>
        <line t="X" i="97" b="0" n="0"></line>
        <line t="C" i="98" b="0" n="0">!     Check the open status</line>
        <line t="X" i="99" b="0" n="0">      procedure :: is_open =&gt; file_handler_is_open</line>
        <line t="X" i="100" b="0" n="0"></line>
        <line t="C" i="101" b="0" n="0">!     Load the file contents to string</line>
        <line t="X" i="102" b="0" n="0">      procedure :: to_string =&gt; file_handler_to_string</line>
        <line t="X" i="103" b="0" n="0"></line>
        <line t="C" i="104" b="0" n="0">!     Assignment operator</line>
        <line t="X" i="105" b="0" n="0">      generic :: assignment(=) =&gt; file_handler_assign</line>
        <line t="X" i="106" b="0" n="0">      procedure, private :: file_handler_assign</line>
        <line t="X" i="107" b="0" n="0"></line>
        <line t="T" i="108" b="0" n="0">  end type t_file_handler</line>
        <line t="T" i="109" b="0" n="0"></line>
        <line t="C" i="110" b="0" n="0">! Constructor interface</line>
        <line t="X" i="111" b="0" n="0">  interface file_handler</line>
        <line t="X" i="112" b="0" n="0">    module procedure file_handler_default</line>
        <line t="X" i="113" b="0" n="0">    module procedure file_handler_string</line>
        <line t="X" i="114" b="0" n="0">  end interface file_handler</line>
        <line t="X" i="115" b="0" n="0"></line>
        <line t="C" i="116" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="117" b="0" n="0"></line>
        <line t="X" i="118" b="0" n="0">contains</line>
        <line t="X" i="119" b="0" n="0"></line>
        <line t="C" i="120" b="0" n="0">! Constructor</line>
        <line k="file_handler_default" t="F" i="121" b="1" n="1">elemental function file_handler_default( file, eol ) result(handler)</line>
        <line t="F" i="122" b="1" n="1"></line>
        <line t="C" i="123" b="1" n="1">! The file name</line>
        <line t="X" i="124" b="1" n="1">  character(len=*), intent(in) :: file</line>
        <line t="X" i="125" b="1" n="1"></line>
        <line t="C" i="126" b="1" n="1">! The record separator (defaults to unis=lf)</line>
        <line t="X" i="127" b="1" n="1">  integer, optional, intent(in) :: eol</line>
        <line t="X" i="128" b="1" n="1"></line>
        <line t="C" i="129" b="1" n="1">! The file hander</line>
        <line t="X" i="130" b="1" n="1">  type(t_file_handler) :: handler</line>
        <line t="X" i="131" b="1" n="1"></line>
        <line t="C" i="132" b="1" n="1">! Normalise the path</line>
        <line t="X" i="133" b="1" n="1">  handler%file_path = string( file )</line>
        <line t="X" i="134" b="1" n="1"></line>
        <line t="C" i="135" b="1" n="1">! Initialise the file unit</line>
        <line t="X" i="136" b="1" n="1">  handler%unit = -1</line>
        <line t="X" i="137" b="1" n="1"></line>
        <line t="C" i="138" b="1" n="1">! Set the EOL symbol</line>
        <line t="X" i="139" b="2" n="2">  if( present(eol) ) then</line>
        <line t="X" i="140" b="2" n="2">    handler%eol = eol</line>
        <line t="X" i="141" b="3" n="2">  else</line>
        <line t="X" i="142" b="3" n="2">    handler%eol = file_handler_unix_eol</line>
        <line t="X" i="143" b="3" n="1">  end if</line>
        <line t="X" i="144" b="3" n="1"></line>
        <line t="EF" i="145" b="3" n="1">end function file_handler_default</line>
        <line t="EF" i="146" b="1" n="1"></line>
        <line t="EF" i="147" b="1" n="1"></line>
        <line t="C" i="148" b="1" n="1">! Constructor</line>
        <line k="file_handler_string" t="F" i="149" b="1" n="1">elemental function file_handler_string( path, eol ) result(handler)</line>
        <line t="F" i="150" b="1" n="1"></line>
        <line t="C" i="151" b="1" n="1">! The file name</line>
        <line t="X" i="152" b="1" n="1">  type(t_string), intent(in) :: path</line>
        <line t="X" i="153" b="1" n="1"></line>
        <line t="C" i="154" b="1" n="1">! The record separator (defaults to unis=lf)</line>
        <line t="X" i="155" b="1" n="1">  integer, optional, intent(in) :: eol</line>
        <line t="X" i="156" b="1" n="1"></line>
        <line t="C" i="157" b="1" n="1">! The file hander</line>
        <line t="X" i="158" b="1" n="1">  type(t_file_handler) :: handler</line>
        <line t="X" i="159" b="1" n="1"></line>
        <line t="C" i="160" b="1" n="1">! Invoke the character interface</line>
        <line t="X" i="161" b="1" n="1">  handler = file_handler_default( path%character(), eol )</line>
        <line t="X" i="162" b="1" n="1"></line>
        <line t="EF" i="163" b="1" n="1">end function file_handler_string</line>
        <line t="EF" i="164" b="1" n="1"></line>
        <line t="EF" i="165" b="1" n="1"></line>
        <line t="C" i="166" b="1" n="1">! Assignment operator</line>
        <line k="file_handler_assign" t="S" i="167" b="1" n="1">elemental subroutine file_handler_assign( left, right )</line>
        <line t="S" i="168" b="1" n="1"></line>
        <line t="C" i="169" b="1" n="1">! The left file handler</line>
        <line t="X" i="170" b="1" n="1">  class(t_file_handler), intent(inout) :: left</line>
        <line t="X" i="171" b="1" n="1"></line>
        <line t="C" i="172" b="1" n="1">! The left file handler</line>
        <line t="X" i="173" b="1" n="1">  type(t_file_handler), intent(in) :: right</line>
        <line t="X" i="174" b="1" n="1"></line>
        <line t="C" i="175" b="1" n="1">! Implement the assignment</line>
        <line t="X" i="176" b="1" n="1">  left%file_path = right%file_path</line>
        <line t="X" i="177" b="1" n="1">  left%eol = right%eol</line>
        <line t="X" i="178" b="1" n="1">  left%unit = right%unit</line>
        <line t="X" i="179" b="1" n="1">  left%iostat = right%iostat</line>
        <line t="X" i="180" b="1" n="1"></line>
        <line t="ES" i="181" b="1" n="1">end subroutine file_handler_assign</line>
        <line t="ES" i="182" b="1" n="1"></line>
        <line t="ES" i="183" b="1" n="1"></line>
        <line t="C" i="184" b="1" n="1">! Check if file in handler exists</line>
        <line k="file_handler_exists" t="F" i="185" b="1" n="1">function file_handler_exists( this ) result(res)</line>
        <line t="F" i="186" b="1" n="1"></line>
        <line t="C" i="187" b="1" n="1">! The file handler</line>
        <line t="X" i="188" b="1" n="1">  class(t_file_handler), intent(inout) :: this</line>
        <line t="X" i="189" b="1" n="1"></line>
        <line t="C" i="190" b="1" n="1">! The status flag</line>
        <line t="X" i="191" b="1" n="1">  logical :: res</line>
        <line t="X" i="192" b="1" n="1"></line>
        <line t="C" i="193" b="1" n="1">! Check if the file exists</line>
        <line t="X" i="194" b="1" n="1">  inquire( file=trim(this%file_path%character()), exist=res )</line>
        <line t="X" i="195" b="1" n="1"></line>
        <line t="EF" i="196" b="1" n="1">end function file_handler_exists</line>
        <line t="EF" i="197" b="1" n="1"></line>
        <line t="EF" i="198" b="1" n="1"></line>
        <line t="C" i="199" b="1" n="1">! Open the file</line>
        <line k="file_handler_open" t="S" i="200" b="1" n="1">subroutine file_handler_open( this, write, binary, append, stream, recl, unit )</line>
        <line t="S" i="201" b="1" n="1"></line>
        <line t="C" i="202" b="1" n="1">! The file handler</line>
        <line t="X" i="203" b="1" n="1">  class(t_file_handler), intent(inout) :: this</line>
        <line t="X" i="204" b="1" n="1"></line>
        <line t="C" i="205" b="1" n="1">! The flag to open for writing (.false. by default)</line>
        <line t="X" i="206" b="1" n="1">  logical, optional, intent(in) :: write</line>
        <line t="X" i="207" b="1" n="1"></line>
        <line t="C" i="208" b="1" n="1">! The flag to open a binary file (.false. by default)</line>
        <line t="X" i="209" b="1" n="1">  logical, optional, intent(in) :: binary</line>
        <line t="X" i="210" b="1" n="1"></line>
        <line t="C" i="211" b="1" n="1">! The flag to open a file for append (.false. by default)</line>
        <line t="X" i="212" b="1" n="1">  logical, optional, intent(in) :: append</line>
        <line t="X" i="213" b="1" n="1"></line>
        <line t="C" i="214" b="1" n="1">! Open the file as a stream</line>
        <line t="X" i="215" b="1" n="1">  logical, optional, intent(in) :: stream</line>
        <line t="X" i="216" b="1" n="1"></line>
        <line t="C" i="217" b="1" n="1">! Record length for direct access</line>
        <line t="X" i="218" b="1" n="1">  integer, optional, intent(in) :: recl</line>
        <line t="X" i="219" b="1" n="1"></line>
        <line t="C" i="220" b="1" n="1">! The file unit (optional; forced by user)</line>
        <line t="X" i="221" b="1" n="1">  integer, optional, intent(in) :: unit</line>
        <line t="X" i="222" b="1" n="1"></line>
        <line t="C" i="223" b="1" n="1">! Local variables</line>
        <line t="X" i="224" b="1" n="1">  integer :: lun</line>
        <line t="X" i="225" b="1" n="1">  character(len=32) :: action, form, access, status</line>
        <line t="X" i="226" b="1" n="1">  type(t_string) :: local</line>
        <line t="X" i="227" b="1" n="1">  integer :: ios</line>
        <line t="X" i="228" b="1" n="1"></line>
        <line t="C" i="229" b="1" n="1">! Get a free unit number</line>
        <line t="C" i="230" b="1" n="1">! IF given by user, take it without further checks</line>
        <line t="X" i="231" b="2" n="2">  if( present(unit) ) then</line>
        <line t="X" i="232" b="2" n="2">    lun = unit</line>
        <line t="X" i="233" b="3" n="2">  else</line>
        <line t="X" i="234" b="3" n="2">    lun = free_lun()</line>
        <line t="X" i="235" b="3" n="1">  end if</line>
        <line t="X" i="236" b="4" n="2">  if( lun &gt;= 0 ) then</line>
        <line t="X" i="237" b="4" n="2"></line>
        <line t="C" i="238" b="4" n="2">!   Select read/write</line>
        <line t="X" i="239" b="5" n="3">    if( present(write) ) then</line>
        <line t="X" i="240" b="6" n="4">      if( write ) then</line>
        <line t="X" i="241" b="6" n="4">        action = 'write'</line>
        <line t="X" i="242" b="6" n="4">        status = 'unknown'</line>
        <line t="X" i="243" b="7" n="4">      else</line>
        <line t="X" i="244" b="7" n="4">        action = 'read'</line>
        <line t="X" i="245" b="7" n="4">        status = 'old'</line>
        <line t="X" i="246" b="7" n="3">      end if</line>
        <line t="X" i="247" b="8" n="3">    else</line>
        <line t="X" i="248" b="8" n="3">      action = 'read'</line>
        <line t="X" i="249" b="8" n="3">      status = 'old'</line>
        <line t="X" i="250" b="8" n="2">    end if</line>
        <line t="X" i="251" b="8" n="2"></line>
        <line t="C" i="252" b="8" n="2">!   Select binary</line>
        <line t="X" i="253" b="9" n="3">    if( present(binary) ) then</line>
        <line t="X" i="254" b="10" n="4">      if( binary ) then</line>
        <line t="X" i="255" b="10" n="4">        form = 'unformatted'</line>
        <line t="X" i="256" b="11" n="4">      else</line>
        <line t="X" i="257" b="11" n="4">        form = 'formatted'</line>
        <line t="X" i="258" b="11" n="3">      end if</line>
        <line t="X" i="259" b="12" n="3">    else</line>
        <line t="X" i="260" b="12" n="3">      form = 'formatted'</line>
        <line t="X" i="261" b="12" n="2">    end if</line>
        <line t="X" i="262" b="12" n="2"></line>
        <line t="C" i="263" b="12" n="2">!   Select access</line>
        <line t="X" i="264" b="13" n="3">    if( present(recl) ) then</line>
        <line t="X" i="265" b="13" n="3">      access = 'direct'</line>
        <line t="X" i="266" b="14" n="3">    else if( present(append) ) then</line>
        <line t="X" i="267" b="15" n="4">      if( append ) then</line>
        <line t="X" i="268" b="15" n="4">        access = 'append'</line>
        <line t="X" i="269" b="16" n="4">      else</line>
        <line t="X" i="270" b="16" n="4">        access = 'sequential'</line>
        <line t="X" i="271" b="16" n="3">      end if</line>
        <line t="X" i="272" b="17" n="3">    else if( present(stream) ) then</line>
        <line t="X" i="273" b="18" n="4">      if( stream ) then</line>
        <line t="X" i="274" b="18" n="4">        access = 'stream'</line>
        <line t="X" i="275" b="19" n="5">        if( present(binary) ) then</line>
        <line t="X" i="276" b="20" n="6">          if( binary ) then</line>
        <line t="X" i="277" b="20" n="6">            form = 'unformatted'</line>
        <line t="X" i="278" b="21" n="6">          else</line>
        <line t="X" i="279" b="21" n="6">            form = 'formatted'</line>
        <line t="X" i="280" b="21" n="5">          end if</line>
        <line t="X" i="281" b="22" n="5">        else</line>
        <line t="X" i="282" b="22" n="5">          form = 'unformatted'</line>
        <line t="X" i="283" b="22" n="4">        end if</line>
        <line t="X" i="284" b="23" n="4">      else</line>
        <line t="X" i="285" b="23" n="4">        access = 'sequential'</line>
        <line t="X" i="286" b="23" n="3">      end if</line>
        <line t="X" i="287" b="24" n="3">    else</line>
        <line t="X" i="288" b="24" n="3">      access = 'sequential'</line>
        <line t="X" i="289" b="24" n="2">    end if</line>
        <line t="X" i="290" b="24" n="2"></line>
        <line t="C" i="291" b="24" n="2">!   Open the file</line>
        <line t="X" i="292" b="24" n="2">    local = this%file_path%character()</line>
        <line t="X" i="293" b="25" n="3">    if( present(recl) ) then</line>
        <line t="X" i="294" b="25" n="3">      open( lun, &amp;</line>
        <line t="X" i="295" b="25" n="3">            file=trim(local%character()), &amp;</line>
        <line t="X" i="296" b="25" n="3">            status=trim(status), &amp;</line>
        <line t="X" i="297" b="25" n="3">            action=trim(action), &amp;</line>
        <line t="X" i="298" b="25" n="3">            form=trim(form), &amp;</line>
        <line t="X" i="299" b="25" n="3">            access=trim(access), &amp;</line>
        <line t="X" i="300" b="25" n="3">            recl=recl, &amp;</line>
        <line t="X" i="301" b="25" n="3">            iostat=ios )</line>
        <line t="X" i="302" b="26" n="3">    else if( access == 'stream' ) then</line>
        <line t="X" i="303" b="26" n="3">      open( lun, &amp;</line>
        <line t="X" i="304" b="26" n="3">            file=trim(local%character()), &amp;</line>
        <line t="X" i="305" b="26" n="3">            status=trim(status), &amp;</line>
        <line t="X" i="306" b="26" n="3">            action=trim(action), &amp;</line>
        <line t="X" i="307" b="26" n="3">            form=trim(form), &amp;</line>
        <line t="X" i="308" b="26" n="3">            access=trim(access), &amp;</line>
        <line t="X" i="309" b="26" n="3">            iostat=ios )</line>
        <line t="X" i="310" b="27" n="3">    else</line>
        <line t="X" i="311" b="27" n="3">      open( lun, &amp;</line>
        <line t="X" i="312" b="27" n="3">            file=trim(local%character()), &amp;</line>
        <line t="X" i="313" b="27" n="3">            status=trim(status), &amp;</line>
        <line t="X" i="314" b="27" n="3">            action=trim(action), &amp;</line>
        <line t="X" i="315" b="27" n="3">            form=trim(form), &amp;</line>
        <line t="X" i="316" b="27" n="3">            access=trim(access), &amp;</line>
        <line t="X" i="317" b="27" n="3">            iostat=ios )</line>
        <line t="X" i="318" b="27" n="2">    end if</line>
        <line t="X" i="319" b="27" n="2"></line>
        <line t="C" i="320" b="27" n="2">!   Check open status</line>
        <line t="X" i="321" b="28" n="3">    if( ios == 0 ) then</line>
        <line t="X" i="322" b="28" n="3">      this%unit = lun</line>
        <line t="X" i="323" b="28" n="3">      this%iostat = 0</line>
        <line t="X" i="324" b="29" n="3">    else</line>
        <line t="X" i="325" b="29" n="3">      this%unit = -1</line>
        <line t="X" i="326" b="29" n="3">      this%iostat = ios</line>
        <line t="X" i="327" b="29" n="2">    end if</line>
        <line t="X" i="328" b="29" n="2"></line>
        <line t="X" i="329" b="29" n="1">  end if</line>
        <line t="X" i="330" b="29" n="1"></line>
        <line t="ES" i="331" b="29" n="1">end subroutine file_handler_open</line>
        <line t="ES" i="332" b="1" n="1"></line>
        <line t="ES" i="333" b="1" n="1"></line>
        <line t="C" i="334" b="1" n="1">! Flush the file</line>
        <line k="file_handler_flush" t="S" i="335" b="1" n="1">subroutine file_handler_flush( this )</line>
        <line t="S" i="336" b="1" n="1"></line>
        <line t="C" i="337" b="1" n="1">! The file handler</line>
        <line t="X" i="338" b="1" n="1">  class(t_file_handler), intent(in) :: this</line>
        <line t="X" i="339" b="1" n="1"></line>
        <line t="C" i="340" b="1" n="1">! Flush the file</line>
        <line t="X" i="341" b="1" n="1">  flush( this%unit )</line>
        <line t="X" i="342" b="1" n="1"></line>
        <line t="ES" i="343" b="1" n="1">end subroutine file_handler_flush</line>
        <line t="ES" i="344" b="1" n="1"></line>
        <line t="ES" i="345" b="1" n="1"></line>
        <line t="C" i="346" b="1" n="1">! Rewind the file</line>
        <line k="file_handler_rewind" t="S" i="347" b="1" n="1">subroutine file_handler_rewind( this )</line>
        <line t="S" i="348" b="1" n="1"></line>
        <line t="C" i="349" b="1" n="1">! The file handler</line>
        <line t="X" i="350" b="1" n="1">  class(t_file_handler), intent(in) :: this</line>
        <line t="X" i="351" b="1" n="1"></line>
        <line t="C" i="352" b="1" n="1">! Rewind the file</line>
        <line t="X" i="353" b="1" n="1">  rewind( this%unit )</line>
        <line t="X" i="354" b="1" n="1"></line>
        <line t="ES" i="355" b="1" n="1">end subroutine file_handler_rewind</line>
        <line t="ES" i="356" b="1" n="1"></line>
        <line t="ES" i="357" b="1" n="1"></line>
        <line t="C" i="358" b="1" n="1">! Close the file</line>
        <line k="file_handler_close" t="S" i="359" b="1" n="1">subroutine file_handler_close( this, delete )</line>
        <line t="S" i="360" b="1" n="1"></line>
        <line t="C" i="361" b="1" n="1">! The file handler</line>
        <line t="X" i="362" b="1" n="1">  class(t_file_handler), intent(inout) :: this</line>
        <line t="X" i="363" b="1" n="1"></line>
        <line t="C" i="364" b="1" n="1">! The flag to delete the file</line>
        <line t="X" i="365" b="1" n="1">  logical, optional, intent(in) :: delete</line>
        <line t="X" i="366" b="1" n="1"></line>
        <line t="C" i="367" b="1" n="1">! Local variables</line>
        <line t="X" i="368" b="1" n="1">  type(t_string) :: status</line>
        <line t="X" i="369" b="1" n="1"></line>
        <line t="C" i="370" b="1" n="1">! Set the close status</line>
        <line t="X" i="371" b="1" n="1">  status = 'keep'</line>
        <line t="X" i="372" b="2" n="2">  if( present(delete) ) then</line>
        <line t="X" i="373" b="3" n="3">    if( delete ) then</line>
        <line t="X" i="374" b="3" n="3">      status = 'delete'</line>
        <line t="X" i="375" b="3" n="2">    end if</line>
        <line t="X" i="376" b="3" n="1">  end if</line>
        <line t="X" i="377" b="3" n="1"></line>
        <line t="C" i="378" b="3" n="1">! Close the file</line>
        <line t="X" i="379" b="3" n="1">  close( this%unit, status=status%character() )</line>
        <line t="X" i="380" b="3" n="1"></line>
        <line t="C" i="381" b="3" n="1">! Reset the file unit</line>
        <line t="X" i="382" b="3" n="1">  this%unit = -1</line>
        <line t="X" i="383" b="3" n="1"></line>
        <line t="ES" i="384" b="3" n="1">end subroutine file_handler_close</line>
        <line t="ES" i="385" b="1" n="1"></line>
        <line t="ES" i="386" b="1" n="1"></line>
        <line t="C" i="387" b="1" n="1">! Verify if the file is open</line>
        <line k="file_handler_is_open" t="F" i="388" b="1" n="1">elemental function file_handler_is_open( this ) result(res)</line>
        <line t="F" i="389" b="1" n="1"></line>
        <line t="C" i="390" b="1" n="1">! The file handler</line>
        <line t="X" i="391" b="1" n="1">  class(t_file_handler), intent(in) :: this</line>
        <line t="X" i="392" b="1" n="1"></line>
        <line t="C" i="393" b="1" n="1">! The file open status (.true. if open)</line>
        <line t="X" i="394" b="1" n="1">  logical :: res</line>
        <line t="X" i="395" b="1" n="1"></line>
        <line t="C" i="396" b="1" n="1">! Return the file open status</line>
        <line t="X" i="397" b="1" n="1">  res = ( this%unit &gt;= 0 )</line>
        <line t="X" i="398" b="1" n="1"></line>
        <line t="EF" i="399" b="1" n="1">end function file_handler_is_open</line>
        <line t="EF" i="400" b="1" n="1"></line>
        <line t="EF" i="401" b="1" n="1"></line>
        <line t="C" i="402" b="1" n="1">! Get the file path</line>
        <line k="file_handler_get_file_path" t="F" i="403" b="1" n="1">elemental function file_handler_get_file_path( this ) result(res)</line>
        <line t="F" i="404" b="1" n="1"></line>
        <line t="C" i="405" b="1" n="1">! The file handler</line>
        <line t="X" i="406" b="1" n="1">  class(t_file_handler), intent(in) :: this</line>
        <line t="X" i="407" b="1" n="1"></line>
        <line t="C" i="408" b="1" n="1">! The file path</line>
        <line t="X" i="409" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="410" b="1" n="1"></line>
        <line t="C" i="411" b="1" n="1">! Return the file path</line>
        <line t="X" i="412" b="1" n="1">  res = this%file_path</line>
        <line t="X" i="413" b="1" n="1"></line>
        <line t="EF" i="414" b="1" n="1">end function file_handler_get_file_path</line>
        <line t="EF" i="415" b="1" n="1"></line>
        <line t="EF" i="416" b="1" n="1"></line>
        <line t="C" i="417" b="1" n="1">! Get the file unit</line>
        <line k="file_handler_get_unit" t="F" i="418" b="1" n="1">elemental function file_handler_get_unit( this ) result(res)</line>
        <line t="F" i="419" b="1" n="1"></line>
        <line t="C" i="420" b="1" n="1">! The file handler</line>
        <line t="X" i="421" b="1" n="1">  class(t_file_handler), intent(in) :: this</line>
        <line t="X" i="422" b="1" n="1"></line>
        <line t="C" i="423" b="1" n="1">! The file unit</line>
        <line t="X" i="424" b="1" n="1">  integer :: res</line>
        <line t="X" i="425" b="1" n="1"></line>
        <line t="C" i="426" b="1" n="1">! Return the unit</line>
        <line t="X" i="427" b="1" n="1">  res = this%unit</line>
        <line t="X" i="428" b="1" n="1"></line>
        <line t="EF" i="429" b="1" n="1">end function file_handler_get_unit</line>
        <line t="EF" i="430" b="1" n="1"></line>
        <line t="EF" i="431" b="1" n="1"></line>
        <line t="C" i="432" b="1" n="1">! Get the file open iostat</line>
        <line k="file_handler_get_iostat" t="F" i="433" b="1" n="1">elemental function file_handler_get_iostat( this ) result(res)</line>
        <line t="F" i="434" b="1" n="1"></line>
        <line t="C" i="435" b="1" n="1">! The file handler</line>
        <line t="X" i="436" b="1" n="1">  class(t_file_handler), intent(in) :: this</line>
        <line t="X" i="437" b="1" n="1"></line>
        <line t="C" i="438" b="1" n="1">! The iostat</line>
        <line t="X" i="439" b="1" n="1">  integer :: res</line>
        <line t="X" i="440" b="1" n="1"></line>
        <line t="C" i="441" b="1" n="1">! Return the iostat</line>
        <line t="X" i="442" b="1" n="1">  res = this%iostat</line>
        <line t="X" i="443" b="1" n="1"></line>
        <line t="EF" i="444" b="1" n="1">end function file_handler_get_iostat</line>
        <line t="EF" i="445" b="1" n="1"></line>
        <line t="EF" i="446" b="1" n="1"></line>
        <line t="C" i="447" b="1" n="1">! Convert a file to a character string</line>
        <line k="file_handler_to_string" t="F" i="448" b="1" n="1">function file_handler_to_string( this, eol, binary ) result(res)</line>
        <line t="F" i="449" b="1" n="1"></line>
        <line t="C" i="450" b="1" n="1">! The file handler</line>
        <line t="X" i="451" b="1" n="1">  class(t_file_handler), intent(in) :: this</line>
        <line t="X" i="452" b="1" n="1"></line>
        <line t="C" i="453" b="1" n="1">! The flag to select separation of record with carriage control symbol</line>
        <line t="X" i="454" b="1" n="1">  logical, optional, intent(in) :: eol</line>
        <line t="X" i="455" b="1" n="1"></line>
        <line t="C" i="456" b="1" n="1">! Implement a binary comparison</line>
        <line t="X" i="457" b="1" n="1">  logical, optional, intent(in) :: binary</line>
        <line t="X" i="458" b="1" n="1"></line>
        <line t="C" i="459" b="1" n="1">! The resulting character string</line>
        <line t="X" i="460" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="461" b="1" n="1"></line>
        <line t="C" i="462" b="1" n="1">! Local variables</line>
        <line t="X" i="463" b="1" n="1">  character(len=2) :: c_eol</line>
        <line t="X" i="464" b="1" n="1">  integer :: ios</line>
        <line t="X" i="465" b="1" n="1">  character(len=8192) :: rec</line>
        <line t="X" i="466" b="1" n="1">  type(t_file_handler) :: local</line>
        <line t="X" i="467" b="1" n="1">  logical :: bin</line>
        <line t="X" i="468" b="1" n="1"></line>
        <line t="C" i="469" b="1" n="1">! Initialise</line>
        <line t="X" i="470" b="1" n="1">  ios = 0</line>
        <line t="X" i="471" b="1" n="1">  local = this</line>
        <line t="X" i="472" b="1" n="1">  res = ''</line>
        <line t="X" i="473" b="1" n="1">  rec = ''</line>
        <line t="X" i="474" b="1" n="1"></line>
        <line t="C" i="475" b="1" n="1">! Set the EOL characters</line>
        <line t="X" i="476" b="2" n="2">  if( present(eol) ) then</line>
        <line t="X" i="477" b="2" n="2">    c_eol =  file_handler_eol(local%eol)</line>
        <line t="X" i="478" b="3" n="2">  else</line>
        <line t="X" i="479" b="3" n="2">    c_eol = ''</line>
        <line t="X" i="480" b="3" n="1">  end if</line>
        <line t="X" i="481" b="3" n="1"></line>
        <line t="C" i="482" b="3" n="1">! Check for binary access</line>
        <line t="X" i="483" b="4" n="2">  if( present(binary) ) then</line>
        <line t="X" i="484" b="4" n="2">    bin = binary</line>
        <line t="X" i="485" b="5" n="2">  else</line>
        <line t="X" i="486" b="5" n="2">    bin = .false.</line>
        <line t="X" i="487" b="5" n="1">  end if</line>
        <line t="X" i="488" b="5" n="1"></line>
        <line t="C" i="489" b="5" n="1">! Open the file</line>
        <line t="X" i="490" b="6" n="2">  if( bin ) then</line>
        <line t="X" i="491" b="6" n="2">    call local%open( stream=.true., binary=.true. )</line>
        <line t="X" i="492" b="7" n="2">  else</line>
        <line t="X" i="493" b="7" n="2">    call local%open()</line>
        <line t="X" i="494" b="7" n="1">  end if</line>
        <line t="X" i="495" b="8" n="2">  if( local%is_open() ) then</line>
        <line t="X" i="496" b="8" n="2"></line>
        <line t="C" i="497" b="8" n="2">!   Loop reading records</line>
        <line t="X" i="498" b="9" n="3">    do</line>
        <line t="X" i="499" b="9" n="3"></line>
        <line t="C" i="500" b="9" n="3">!     Read next record</line>
        <line t="X" i="501" b="10" n="4">      if( bin ) then</line>
        <line t="X" i="502" b="10" n="4">        read( local%unit, iostat=ios ) rec</line>
        <line t="X" i="503" b="11" n="4">      else</line>
        <line t="X" i="504" b="11" n="4">        read( local%unit, '(a8192)', iostat=ios ) rec</line>
        <line t="X" i="505" b="11" n="3">      end if</line>
        <line t="X" i="506" b="12" n="4">      if( ios &lt; 0 ) then</line>
        <line t="X" i="507" b="12" n="4"></line>
        <line t="C" i="508" b="12" n="4">!       End of file; exit</line>
        <line t="X" i="509" b="12" n="4">        exit</line>
        <line t="X" i="510" b="12" n="4"></line>
        <line t="X" i="511" b="13" n="4">      else if( ios &gt; 0 ) then</line>
        <line t="X" i="512" b="13" n="4"></line>
        <line t="C" i="513" b="13" n="4">!       Error found; empty the resulting string and exit</line>
        <line t="X" i="514" b="13" n="4">        res = ''</line>
        <line t="X" i="515" b="13" n="4">        exit</line>
        <line t="X" i="516" b="13" n="4"></line>
        <line t="X" i="517" b="14" n="4">      else</line>
        <line t="X" i="518" b="14" n="4"></line>
        <line t="C" i="519" b="14" n="4">!       Append record with carraiage control</line>
        <line t="X" i="520" b="14" n="4">        res = res // trim(rec) // trim(c_eol)</line>
        <line t="X" i="521" b="14" n="4"></line>
        <line t="X" i="522" b="14" n="3">      end if</line>
        <line t="X" i="523" b="14" n="3"></line>
        <line t="X" i="524" b="14" n="2">    end do</line>
        <line t="X" i="525" b="14" n="2"></line>
        <line t="C" i="526" b="14" n="2">!   Close the file</line>
        <line t="X" i="527" b="14" n="2">    call local%close()</line>
        <line t="X" i="528" b="14" n="2"></line>
        <line t="X" i="529" b="14" n="1">  end if</line>
        <line t="X" i="530" b="14" n="1"></line>
        <line t="EF" i="531" b="14" n="1">end function file_handler_to_string</line>
        <line t="EF" i="532" b="1" n="1"></line>
        <line t="EF" i="533" b="1" n="1"></line>
        <line t="C" i="534" b="1" n="1">! Find a free unit to open a file</line>
        <line k="free_lun" t="F" i="535" b="1" n="1">function free_lun() result(res)</line>
        <line t="F" i="536" b="1" n="1"></line>
        <line t="C" i="537" b="1" n="1">! The free unit</line>
        <line t="X" i="538" b="1" n="1">  integer :: res</line>
        <line t="X" i="539" b="1" n="1"></line>
        <line t="C" i="540" b="1" n="1">! Local variables</line>
        <line t="X" i="541" b="1" n="1">  integer :: unit, ios</line>
        <line t="X" i="542" b="1" n="1">  logical :: is_open</line>
        <line t="X" i="543" b="1" n="1"></line>
        <line t="C" i="544" b="1" n="1">! Loop looking for available units</line>
        <line t="X" i="545" b="2" n="2">  do unit = 10, 99</line>
        <line t="X" i="546" b="2" n="2">    inquire( unit, opened=is_open, iostat=ios )</line>
        <line t="X" i="547" b="3" n="3">    if( ios /= 0 ) then</line>
        <line t="X" i="548" b="3" n="3">      exit</line>
        <line t="X" i="549" b="4" n="3">    else if( .not. is_open ) then</line>
        <line t="X" i="550" b="4" n="3">      res = unit</line>
        <line t="X" i="551" b="4" n="3">      exit</line>
        <line t="X" i="552" b="4" n="2">    end if</line>
        <line t="X" i="553" b="4" n="1">  end do</line>
        <line t="X" i="554" b="4" n="1"></line>
        <line t="EF" i="555" b="4" n="1">end function free_lun</line>
        <line t="EF" i="556" b="1" n="1"></line>
        <line t="M" i="557" b="1" n="1">end module m_file_handler</line>
        <line t="M" i="558" b="1" n="1"></line>
    </code>
</fmx>