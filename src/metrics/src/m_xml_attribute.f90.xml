<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_xml_attribute.f90">
    <context>
        <time>2025-03-09T18:18:31</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Fommons</project>
        <name>m_xml_attribute.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_xml_attribute" type="module">
            <main>
                <lines>
                    <source percent="47.86">56</source>
                    <comments percent="31.62">37</comments>
                    <empty percent="20.51">24</empty>
                    <total>117</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="xml_attribute_assign" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="37.50">6</source>
                            <comments percent="25.00">4</comments>
                            <empty percent="37.50">6</empty>
                            <total>16</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_decode" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.84">7</source>
                            <comments percent="26.32">5</comments>
                            <empty percent="36.84">7</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="41.67">5</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="33.33">4</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_encode" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.84">7</source>
                            <comments percent="26.32">5</comments>
                            <empty percent="36.84">7</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.84">7</source>
                            <comments percent="26.32">5</comments>
                            <empty percent="36.84">7</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_double" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_int1" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_int2" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_int4" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_logical1" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_logical2" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_logical4" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_real" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_char_and_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.84">7</source>
                            <comments percent="26.32">5</comments>
                            <empty percent="36.84">7</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_char" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.84">7</source>
                            <comments percent="26.32">5</comments>
                            <empty percent="36.84">7</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_double" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_int1" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_int2" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_int4" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_logical1" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_logical2" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_logical4" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_real" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_from_string_and_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.84">7</source>
                            <comments percent="26.32">5</comments>
                            <empty percent="36.84">7</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_get_name" type="function">
                    <statistics>
                        <lines>
                            <source percent="47.37">9</source>
                            <comments percent="21.05">4</comments>
                            <empty percent="31.58">6</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_get_value" type="function">
                    <statistics>
                        <lines>
                            <source percent="47.37">9</source>
                            <comments percent="21.05">4</comments>
                            <empty percent="31.58">6</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_set_name" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_set_name_character" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_set_value" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_set_value_character" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_to_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="46.67">14</source>
                            <comments percent="23.33">7</comments>
                            <empty percent="30.00">9</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xml_attribute_value" type="function">
                    <statistics>
                        <lines>
                            <source percent="48.39">15</source>
                            <comments percent="22.58">7</comments>
                            <empty percent="29.03">9</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="39.48">304</source>
                    <comments percent="27.01">208</comments>
                    <empty percent="33.51">258</empty>
                    <total>770</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>3</maximum>
                    <average>1.25</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>3</maximum>
                    <average>1.16</average>
                </nesting>
                <methods>32</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="39.48">304</source>
            <comments percent="27.01">208</comments>
            <empty percent="33.51">258</empty>
            <total>770</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>3</maximum>
            <average>1.25</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>3</maximum>
            <average>1.16</average>
        </nesting>
        <methods>32</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_xml_attribute</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : XML attribute handling</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of Fommons.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             Fommons is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             Fommons is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with Fommons.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use m_util_convert</line>
        <line t="X" i="30" b="0" n="0">  use m_object</line>
        <line t="X" i="31" b="0" n="0">  use m_string</line>
        <line t="X" i="32" b="0" n="0"></line>
        <line t="X" i="33" b="0" n="0">  use m_xml_encoder</line>
        <line t="X" i="34" b="0" n="0"></line>
        <line t="C" i="35" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="36" b="0" n="0"></line>
        <line t="X" i="37" b="0" n="0">  implicit none</line>
        <line t="X" i="38" b="0" n="0"></line>
        <line t="C" i="39" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="40" b="0" n="0"></line>
        <line t="X" i="41" b="0" n="0">  private</line>
        <line t="X" i="42" b="0" n="0">  public t_xml_attribute</line>
        <line t="X" i="43" b="0" n="0">  public xml_attribute</line>
        <line t="X" i="44" b="0" n="0"></line>
        <line t="X" i="45" b="0" n="0">  public xml_attribute_value</line>
        <line t="X" i="46" b="0" n="0"></line>
        <line t="C" i="47" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="48" b="0" n="0"></line>
        <line t="C" i="49" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="50" b="0" n="0"></line>
        <line t="C" i="51" b="0" n="0">! Attribute type (associated to an XML tag)</line>
        <line t="T" i="52" b="0" n="0">  type, extends(t_object) :: t_xml_attribute</line>
        <line t="X" i="53" b="0" n="0">    private</line>
        <line t="X" i="54" b="0" n="0"></line>
        <line t="C" i="55" b="0" n="0">!     Attribute name</line>
        <line t="X" i="56" b="0" n="0">      type(t_string) :: name</line>
        <line t="X" i="57" b="0" n="0"></line>
        <line t="C" i="58" b="0" n="0">!     Attribute type</line>
        <line t="X" i="59" b="0" n="0">      type(t_string) :: value</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="X" i="61" b="0" n="0">    contains</line>
        <line t="X" i="62" b="0" n="0"></line>
        <line t="C" i="63" b="0" n="0">!     Assignment</line>
        <line t="X" i="64" b="0" n="0">      generic :: assignment(=) =&gt; xml_attribute_assign</line>
        <line t="X" i="65" b="0" n="0">      procedure, private :: xml_attribute_assign</line>
        <line t="X" i="66" b="0" n="0"></line>
        <line t="C" i="67" b="0" n="0">!     Encoding/decoding interfaces</line>
        <line t="X" i="68" b="0" n="0">      procedure :: encode =&gt; xml_attribute_encode</line>
        <line t="X" i="69" b="0" n="0">      procedure :: decode =&gt; xml_attribute_decode</line>
        <line t="X" i="70" b="0" n="0"></line>
        <line t="C" i="71" b="0" n="0">!     Serialization interface (convert to character string)</line>
        <line t="X" i="72" b="0" n="0">      procedure :: to_string =&gt; xml_attribute_to_string</line>
        <line t="X" i="73" b="0" n="0"></line>
        <line t="C" i="74" b="0" n="0">!     Access function interfaces</line>
        <line t="X" i="75" b="0" n="0">      procedure :: get_name =&gt; xml_attribute_get_name</line>
        <line t="X" i="76" b="0" n="0">      generic :: set_name =&gt; xml_attribute_set_name, &amp;</line>
        <line t="X" i="77" b="0" n="0">                             xml_attribute_set_name_character</line>
        <line t="X" i="78" b="0" n="0">      procedure, private :: xml_attribute_set_name</line>
        <line t="X" i="79" b="0" n="0">      procedure, private :: xml_attribute_set_name_character</line>
        <line t="X" i="80" b="0" n="0">      procedure :: get_value =&gt; xml_attribute_get_value</line>
        <line t="X" i="81" b="0" n="0">      generic :: set_value =&gt; xml_attribute_set_value, &amp;</line>
        <line t="X" i="82" b="0" n="0">                              xml_attribute_set_value_character</line>
        <line t="X" i="83" b="0" n="0">      procedure, private :: xml_attribute_set_value</line>
        <line t="X" i="84" b="0" n="0">      procedure, private :: xml_attribute_set_value_character</line>
        <line t="X" i="85" b="0" n="0"></line>
        <line t="T" i="86" b="0" n="0">  end type t_xml_attribute</line>
        <line t="T" i="87" b="0" n="0"></line>
        <line t="C" i="88" b="0" n="0">! Constructor interface</line>
        <line t="X" i="89" b="0" n="0">  interface xml_attribute</line>
        <line t="X" i="90" b="0" n="0">    module procedure xml_attribute_default</line>
        <line t="X" i="91" b="0" n="0">    module procedure xml_attribute_from_char_and_char</line>
        <line t="X" i="92" b="0" n="0">    module procedure xml_attribute_from_char_and_string</line>
        <line t="X" i="93" b="0" n="0">    module procedure xml_attribute_from_char_and_int1</line>
        <line t="X" i="94" b="0" n="0">    module procedure xml_attribute_from_char_and_int2</line>
        <line t="X" i="95" b="0" n="0">    module procedure xml_attribute_from_char_and_int4</line>
        <line t="X" i="96" b="0" n="0">    module procedure xml_attribute_from_char_and_real</line>
        <line t="X" i="97" b="0" n="0">    module procedure xml_attribute_from_char_and_double</line>
        <line t="X" i="98" b="0" n="0">    module procedure xml_attribute_from_char_and_logical1</line>
        <line t="X" i="99" b="0" n="0">    module procedure xml_attribute_from_char_and_logical2</line>
        <line t="X" i="100" b="0" n="0">    module procedure xml_attribute_from_char_and_logical4</line>
        <line t="X" i="101" b="0" n="0">    module procedure xml_attribute_from_string_and_string</line>
        <line t="X" i="102" b="0" n="0">    module procedure xml_attribute_from_string_and_char</line>
        <line t="X" i="103" b="0" n="0">    module procedure xml_attribute_from_string_and_int1</line>
        <line t="X" i="104" b="0" n="0">    module procedure xml_attribute_from_string_and_int2</line>
        <line t="X" i="105" b="0" n="0">    module procedure xml_attribute_from_string_and_int4</line>
        <line t="X" i="106" b="0" n="0">    module procedure xml_attribute_from_string_and_real</line>
        <line t="X" i="107" b="0" n="0">    module procedure xml_attribute_from_string_and_double</line>
        <line t="X" i="108" b="0" n="0">    module procedure xml_attribute_from_string_and_logical1</line>
        <line t="X" i="109" b="0" n="0">    module procedure xml_attribute_from_string_and_logical2</line>
        <line t="X" i="110" b="0" n="0">    module procedure xml_attribute_from_string_and_logical4</line>
        <line t="X" i="111" b="0" n="0">  end interface xml_attribute</line>
        <line t="X" i="112" b="0" n="0"></line>
        <line t="C" i="113" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="114" b="0" n="0"></line>
        <line t="X" i="115" b="0" n="0">contains</line>
        <line t="X" i="116" b="0" n="0"></line>
        <line t="C" i="117" b="0" n="0">! Initialise an attribute from name (character) and value (character)</line>
        <line k="xml_attribute_default" t="F" i="118" b="1" n="1">elemental function xml_attribute_default() result(res)</line>
        <line t="F" i="119" b="1" n="1"></line>
        <line t="C" i="120" b="1" n="1">! The returned attribute</line>
        <line t="X" i="121" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="122" b="1" n="1"></line>
        <line t="C" i="123" b="1" n="1">! Set the attribute</line>
        <line t="X" i="124" b="1" n="1">  res%name = t_string()</line>
        <line t="X" i="125" b="1" n="1">  res%value = t_string()</line>
        <line t="X" i="126" b="1" n="1"></line>
        <line t="EF" i="127" b="1" n="1">end function xml_attribute_default</line>
        <line t="EF" i="128" b="1" n="1"></line>
        <line t="EF" i="129" b="1" n="1"></line>
        <line t="C" i="130" b="1" n="1">! Initialise an attribute from name (character) and value (character)</line>
        <line k="xml_attribute_from_char_and_char" t="F" i="131" b="1" n="1">elemental function xml_attribute_from_char_and_char( name, value ) result(res)</line>
        <line t="F" i="132" b="1" n="1"></line>
        <line t="C" i="133" b="1" n="1">! The name</line>
        <line t="X" i="134" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="135" b="1" n="1"></line>
        <line t="C" i="136" b="1" n="1">! The value</line>
        <line t="X" i="137" b="1" n="1">  character(len=*), intent(in) :: value</line>
        <line t="X" i="138" b="1" n="1"></line>
        <line t="C" i="139" b="1" n="1">! The returned attribute</line>
        <line t="X" i="140" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="141" b="1" n="1"></line>
        <line t="C" i="142" b="1" n="1">! Set the attribute</line>
        <line t="X" i="143" b="1" n="1">  res%name = name</line>
        <line t="X" i="144" b="1" n="1">  res%value = value</line>
        <line t="X" i="145" b="1" n="1"></line>
        <line t="EF" i="146" b="1" n="1">end function xml_attribute_from_char_and_char</line>
        <line t="EF" i="147" b="1" n="1"></line>
        <line t="EF" i="148" b="1" n="1"></line>
        <line t="C" i="149" b="1" n="1">! Initialise an attribute from name (character) and value (string)</line>
        <line k="xml_attribute_from_char_and_string" t="F" i="150" b="1" n="1">elemental function xml_attribute_from_char_and_string( name, value ) result(res)</line>
        <line t="F" i="151" b="1" n="1"></line>
        <line t="C" i="152" b="1" n="1">! The name</line>
        <line t="X" i="153" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="154" b="1" n="1"></line>
        <line t="C" i="155" b="1" n="1">! The value</line>
        <line t="X" i="156" b="1" n="1">  type(t_string), intent(in) :: value</line>
        <line t="X" i="157" b="1" n="1"></line>
        <line t="C" i="158" b="1" n="1">! The returned attribute</line>
        <line t="X" i="159" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="160" b="1" n="1"></line>
        <line t="C" i="161" b="1" n="1">! Set the attribute</line>
        <line t="X" i="162" b="1" n="1">  res%name = name</line>
        <line t="X" i="163" b="1" n="1">  res%value = value</line>
        <line t="X" i="164" b="1" n="1"></line>
        <line t="EF" i="165" b="1" n="1">end function xml_attribute_from_char_and_string</line>
        <line t="EF" i="166" b="1" n="1"></line>
        <line t="EF" i="167" b="1" n="1"></line>
        <line t="C" i="168" b="1" n="1">! Initialise an attribute from name (character) and value (integer kind=1)</line>
        <line k="xml_attribute_from_char_and_int1" t="F" i="169" b="1" n="1">elemental function xml_attribute_from_char_and_int1( name, value, fmt ) result(res)</line>
        <line t="F" i="170" b="1" n="1"></line>
        <line t="C" i="171" b="1" n="1">! The name</line>
        <line t="X" i="172" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="173" b="1" n="1"></line>
        <line t="C" i="174" b="1" n="1">! The value</line>
        <line t="X" i="175" b="1" n="1">  integer(kind=1), intent(in) :: value</line>
        <line t="X" i="176" b="1" n="1"></line>
        <line t="C" i="177" b="1" n="1">! Optional output format</line>
        <line t="X" i="178" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="179" b="1" n="1"></line>
        <line t="C" i="180" b="1" n="1">! The returned attribute</line>
        <line t="X" i="181" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="182" b="1" n="1"></line>
        <line t="C" i="183" b="1" n="1">! Set the attribute</line>
        <line t="X" i="184" b="1" n="1">  res%name = name</line>
        <line t="X" i="185" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="186" b="1" n="1"></line>
        <line t="EF" i="187" b="1" n="1">end function xml_attribute_from_char_and_int1</line>
        <line t="EF" i="188" b="1" n="1"></line>
        <line t="EF" i="189" b="1" n="1"></line>
        <line t="C" i="190" b="1" n="1">! Initialise an attribute from name (character) and value (integer kind=2)</line>
        <line k="xml_attribute_from_char_and_int2" t="F" i="191" b="1" n="1">elemental function xml_attribute_from_char_and_int2( name, value, fmt ) result(res)</line>
        <line t="F" i="192" b="1" n="1"></line>
        <line t="C" i="193" b="1" n="1">! The name</line>
        <line t="X" i="194" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="195" b="1" n="1"></line>
        <line t="C" i="196" b="1" n="1">! The value</line>
        <line t="X" i="197" b="1" n="1">  integer(kind=2), intent(in) :: value</line>
        <line t="X" i="198" b="1" n="1"></line>
        <line t="C" i="199" b="1" n="1">! Optional output format</line>
        <line t="X" i="200" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="201" b="1" n="1"></line>
        <line t="C" i="202" b="1" n="1">! The returned attribute</line>
        <line t="X" i="203" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="204" b="1" n="1"></line>
        <line t="C" i="205" b="1" n="1">! Set the attribute</line>
        <line t="X" i="206" b="1" n="1">  res%name = name</line>
        <line t="X" i="207" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="208" b="1" n="1"></line>
        <line t="EF" i="209" b="1" n="1">end function xml_attribute_from_char_and_int2</line>
        <line t="EF" i="210" b="1" n="1"></line>
        <line t="EF" i="211" b="1" n="1"></line>
        <line t="C" i="212" b="1" n="1">! Initialise an attribute from name (character) and value (integer kind=4)</line>
        <line k="xml_attribute_from_char_and_int4" t="F" i="213" b="1" n="1">elemental function xml_attribute_from_char_and_int4( name, value, fmt ) result(res)</line>
        <line t="F" i="214" b="1" n="1"></line>
        <line t="C" i="215" b="1" n="1">! The name</line>
        <line t="X" i="216" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="217" b="1" n="1"></line>
        <line t="C" i="218" b="1" n="1">! The value</line>
        <line t="X" i="219" b="1" n="1">  integer(kind=4), intent(in) :: value</line>
        <line t="X" i="220" b="1" n="1"></line>
        <line t="C" i="221" b="1" n="1">! Optional output format</line>
        <line t="X" i="222" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="223" b="1" n="1"></line>
        <line t="C" i="224" b="1" n="1">! The returned attribute</line>
        <line t="X" i="225" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="226" b="1" n="1"></line>
        <line t="C" i="227" b="1" n="1">! Set the attribute</line>
        <line t="X" i="228" b="1" n="1">  res%name = name</line>
        <line t="X" i="229" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="230" b="1" n="1"></line>
        <line t="EF" i="231" b="1" n="1">end function xml_attribute_from_char_and_int4</line>
        <line t="EF" i="232" b="1" n="1"></line>
        <line t="EF" i="233" b="1" n="1"></line>
        <line t="C" i="234" b="1" n="1">! Initialise an attribute from name (character) and value (real kind=4)</line>
        <line k="xml_attribute_from_char_and_real" t="F" i="235" b="1" n="1">elemental function xml_attribute_from_char_and_real( name, value, fmt ) result(res)</line>
        <line t="F" i="236" b="1" n="1"></line>
        <line t="C" i="237" b="1" n="1">! The name</line>
        <line t="X" i="238" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="239" b="1" n="1"></line>
        <line t="C" i="240" b="1" n="1">! The value</line>
        <line t="X" i="241" b="1" n="1">  real(kind=4), intent(in) :: value</line>
        <line t="X" i="242" b="1" n="1"></line>
        <line t="C" i="243" b="1" n="1">! Optional output format</line>
        <line t="X" i="244" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="245" b="1" n="1"></line>
        <line t="C" i="246" b="1" n="1">! The returned attribute</line>
        <line t="X" i="247" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="248" b="1" n="1"></line>
        <line t="C" i="249" b="1" n="1">! Set the attribute</line>
        <line t="X" i="250" b="1" n="1">  res%name = name</line>
        <line t="X" i="251" b="1" n="1">  res%value = character(value,fmt=fmt)</line>
        <line t="X" i="252" b="1" n="1"></line>
        <line t="EF" i="253" b="1" n="1">end function xml_attribute_from_char_and_real</line>
        <line t="EF" i="254" b="1" n="1"></line>
        <line t="EF" i="255" b="1" n="1"></line>
        <line t="C" i="256" b="1" n="1">! Initialise an attribute from name (character) and value (real kind=8)</line>
        <line k="xml_attribute_from_char_and_double" t="F" i="257" b="1" n="1">elemental function xml_attribute_from_char_and_double( name, value, fmt ) result(res)</line>
        <line t="F" i="258" b="1" n="1"></line>
        <line t="C" i="259" b="1" n="1">! The name</line>
        <line t="X" i="260" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="261" b="1" n="1"></line>
        <line t="C" i="262" b="1" n="1">! The value</line>
        <line t="X" i="263" b="1" n="1">  real(kind=8), intent(in) :: value</line>
        <line t="X" i="264" b="1" n="1"></line>
        <line t="C" i="265" b="1" n="1">! Optional output format</line>
        <line t="X" i="266" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="267" b="1" n="1"></line>
        <line t="C" i="268" b="1" n="1">! The returned attribute</line>
        <line t="X" i="269" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="270" b="1" n="1"></line>
        <line t="C" i="271" b="1" n="1">! Set the attribute</line>
        <line t="X" i="272" b="1" n="1">  res%name = name</line>
        <line t="X" i="273" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="274" b="1" n="1"></line>
        <line t="EF" i="275" b="1" n="1">end function xml_attribute_from_char_and_double</line>
        <line t="EF" i="276" b="1" n="1"></line>
        <line t="EF" i="277" b="1" n="1"></line>
        <line t="C" i="278" b="1" n="1">! Initialise an attribute from name (character) and value (logical kind=1)</line>
        <line k="xml_attribute_from_char_and_logical1" t="F" i="279" b="1" n="1">elemental function xml_attribute_from_char_and_logical1( name, value, fmt ) result(res)</line>
        <line t="F" i="280" b="1" n="1"></line>
        <line t="C" i="281" b="1" n="1">! The name</line>
        <line t="X" i="282" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="283" b="1" n="1"></line>
        <line t="C" i="284" b="1" n="1">! The value</line>
        <line t="X" i="285" b="1" n="1">  logical(kind=1), intent(in) :: value</line>
        <line t="X" i="286" b="1" n="1"></line>
        <line t="C" i="287" b="1" n="1">! Optional output format</line>
        <line t="X" i="288" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="289" b="1" n="1"></line>
        <line t="C" i="290" b="1" n="1">! The returned attribute</line>
        <line t="X" i="291" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="292" b="1" n="1"></line>
        <line t="C" i="293" b="1" n="1">! Set the attribute</line>
        <line t="X" i="294" b="1" n="1">  res%name = name</line>
        <line t="X" i="295" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="296" b="1" n="1"></line>
        <line t="EF" i="297" b="1" n="1">end function xml_attribute_from_char_and_logical1</line>
        <line t="EF" i="298" b="1" n="1"></line>
        <line t="EF" i="299" b="1" n="1"></line>
        <line t="C" i="300" b="1" n="1">! Initialise an attribute from name (character) and value (logical kind=2)</line>
        <line k="xml_attribute_from_char_and_logical2" t="F" i="301" b="1" n="1">elemental function xml_attribute_from_char_and_logical2( name, value, fmt ) result(res)</line>
        <line t="F" i="302" b="1" n="1"></line>
        <line t="C" i="303" b="1" n="1">! The name</line>
        <line t="X" i="304" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="305" b="1" n="1"></line>
        <line t="C" i="306" b="1" n="1">! The value</line>
        <line t="X" i="307" b="1" n="1">  logical(kind=2), intent(in) :: value</line>
        <line t="X" i="308" b="1" n="1"></line>
        <line t="C" i="309" b="1" n="1">! Optional output format</line>
        <line t="X" i="310" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="311" b="1" n="1"></line>
        <line t="C" i="312" b="1" n="1">! The returned attribute</line>
        <line t="X" i="313" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="314" b="1" n="1"></line>
        <line t="C" i="315" b="1" n="1">! Set the attribute</line>
        <line t="X" i="316" b="1" n="1">  res%name = name</line>
        <line t="X" i="317" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="318" b="1" n="1"></line>
        <line t="EF" i="319" b="1" n="1">end function xml_attribute_from_char_and_logical2</line>
        <line t="EF" i="320" b="1" n="1"></line>
        <line t="EF" i="321" b="1" n="1"></line>
        <line t="C" i="322" b="1" n="1">! Initialise an attribute from name (character) and value (logical kind=4)</line>
        <line k="xml_attribute_from_char_and_logical4" t="F" i="323" b="1" n="1">elemental function xml_attribute_from_char_and_logical4( name, value, fmt ) result(res)</line>
        <line t="F" i="324" b="1" n="1"></line>
        <line t="C" i="325" b="1" n="1">! The name</line>
        <line t="X" i="326" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="327" b="1" n="1"></line>
        <line t="C" i="328" b="1" n="1">! The value</line>
        <line t="X" i="329" b="1" n="1">  logical(kind=4), intent(in) :: value</line>
        <line t="X" i="330" b="1" n="1"></line>
        <line t="C" i="331" b="1" n="1">! Optional output format</line>
        <line t="X" i="332" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="333" b="1" n="1"></line>
        <line t="C" i="334" b="1" n="1">! The returned attribute</line>
        <line t="X" i="335" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="336" b="1" n="1"></line>
        <line t="C" i="337" b="1" n="1">! Set the attribute</line>
        <line t="X" i="338" b="1" n="1">  res%name = name</line>
        <line t="X" i="339" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="340" b="1" n="1"></line>
        <line t="EF" i="341" b="1" n="1">end function xml_attribute_from_char_and_logical4</line>
        <line t="EF" i="342" b="1" n="1"></line>
        <line t="EF" i="343" b="1" n="1"></line>
        <line t="C" i="344" b="1" n="1">! Initialise an attribute from name (string)  and value (string)</line>
        <line k="xml_attribute_from_string_and_string" t="F" i="345" b="1" n="1">elemental function xml_attribute_from_string_and_string( name, value ) result(res)</line>
        <line t="F" i="346" b="1" n="1"></line>
        <line t="C" i="347" b="1" n="1">! The name</line>
        <line t="X" i="348" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="349" b="1" n="1"></line>
        <line t="C" i="350" b="1" n="1">! The value</line>
        <line t="X" i="351" b="1" n="1">  type(t_string), intent(in) :: value</line>
        <line t="X" i="352" b="1" n="1"></line>
        <line t="C" i="353" b="1" n="1">! The returned attribute</line>
        <line t="X" i="354" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="355" b="1" n="1"></line>
        <line t="C" i="356" b="1" n="1">! Set the attribute</line>
        <line t="X" i="357" b="1" n="1">  res%name = name</line>
        <line t="X" i="358" b="1" n="1">  res%value = value</line>
        <line t="X" i="359" b="1" n="1"></line>
        <line t="EF" i="360" b="1" n="1">end function xml_attribute_from_string_and_string</line>
        <line t="EF" i="361" b="1" n="1"></line>
        <line t="EF" i="362" b="1" n="1"></line>
        <line t="C" i="363" b="1" n="1">! Initialise an attribute from name (string)  and value (character)</line>
        <line k="xml_attribute_from_string_and_char" t="F" i="364" b="1" n="1">elemental function xml_attribute_from_string_and_char( name, value ) result(res)</line>
        <line t="F" i="365" b="1" n="1"></line>
        <line t="C" i="366" b="1" n="1">! The name</line>
        <line t="X" i="367" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="368" b="1" n="1"></line>
        <line t="C" i="369" b="1" n="1">! The value</line>
        <line t="X" i="370" b="1" n="1">  character(len=*), intent(in) :: value</line>
        <line t="X" i="371" b="1" n="1"></line>
        <line t="C" i="372" b="1" n="1">! The returned attribute</line>
        <line t="X" i="373" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="374" b="1" n="1"></line>
        <line t="C" i="375" b="1" n="1">! Set the attribute</line>
        <line t="X" i="376" b="1" n="1">  res%name = name</line>
        <line t="X" i="377" b="1" n="1">  res%value = value</line>
        <line t="X" i="378" b="1" n="1"></line>
        <line t="EF" i="379" b="1" n="1">end function xml_attribute_from_string_and_char</line>
        <line t="EF" i="380" b="1" n="1"></line>
        <line t="EF" i="381" b="1" n="1"></line>
        <line t="C" i="382" b="1" n="1">! Initialise an attribute from name (string) and value (integer kind=1)</line>
        <line k="xml_attribute_from_string_and_int1" t="F" i="383" b="1" n="1">elemental function xml_attribute_from_string_and_int1( name, value, fmt ) result(res)</line>
        <line t="F" i="384" b="1" n="1"></line>
        <line t="C" i="385" b="1" n="1">! The name</line>
        <line t="X" i="386" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="387" b="1" n="1"></line>
        <line t="C" i="388" b="1" n="1">! The value</line>
        <line t="X" i="389" b="1" n="1">  integer(kind=1), intent(in) :: value</line>
        <line t="X" i="390" b="1" n="1"></line>
        <line t="C" i="391" b="1" n="1">! Optional output format</line>
        <line t="X" i="392" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="393" b="1" n="1"></line>
        <line t="C" i="394" b="1" n="1">! The returned attribute</line>
        <line t="X" i="395" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="396" b="1" n="1"></line>
        <line t="C" i="397" b="1" n="1">! Set the attribute</line>
        <line t="X" i="398" b="1" n="1">  res%name = name</line>
        <line t="X" i="399" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="400" b="1" n="1"></line>
        <line t="EF" i="401" b="1" n="1">end function xml_attribute_from_string_and_int1</line>
        <line t="EF" i="402" b="1" n="1"></line>
        <line t="EF" i="403" b="1" n="1"></line>
        <line t="C" i="404" b="1" n="1">! Initialise an attribute from name (string) and value (integer kind=2)</line>
        <line k="xml_attribute_from_string_and_int2" t="F" i="405" b="1" n="1">elemental function xml_attribute_from_string_and_int2( name, value, fmt ) result(res)</line>
        <line t="F" i="406" b="1" n="1"></line>
        <line t="C" i="407" b="1" n="1">! The name</line>
        <line t="X" i="408" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="409" b="1" n="1"></line>
        <line t="C" i="410" b="1" n="1">! The value</line>
        <line t="X" i="411" b="1" n="1">  integer(kind=2), intent(in) :: value</line>
        <line t="X" i="412" b="1" n="1"></line>
        <line t="C" i="413" b="1" n="1">! Optional output format</line>
        <line t="X" i="414" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="415" b="1" n="1"></line>
        <line t="C" i="416" b="1" n="1">! The returned attribute</line>
        <line t="X" i="417" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="418" b="1" n="1"></line>
        <line t="C" i="419" b="1" n="1">! Set the attribute</line>
        <line t="X" i="420" b="1" n="1">  res%name = name</line>
        <line t="X" i="421" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="422" b="1" n="1"></line>
        <line t="EF" i="423" b="1" n="1">end function xml_attribute_from_string_and_int2</line>
        <line t="EF" i="424" b="1" n="1"></line>
        <line t="EF" i="425" b="1" n="1"></line>
        <line t="C" i="426" b="1" n="1">! Initialise an attribute from name (string) and value (integer kind=4)</line>
        <line k="xml_attribute_from_string_and_int4" t="F" i="427" b="1" n="1">elemental function xml_attribute_from_string_and_int4( name, value, fmt ) result(res)</line>
        <line t="F" i="428" b="1" n="1"></line>
        <line t="C" i="429" b="1" n="1">! The name</line>
        <line t="X" i="430" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="431" b="1" n="1"></line>
        <line t="C" i="432" b="1" n="1">! The value</line>
        <line t="X" i="433" b="1" n="1">  integer(kind=4), intent(in) :: value</line>
        <line t="X" i="434" b="1" n="1"></line>
        <line t="C" i="435" b="1" n="1">! Optional output format</line>
        <line t="X" i="436" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="437" b="1" n="1"></line>
        <line t="C" i="438" b="1" n="1">! The returned attribute</line>
        <line t="X" i="439" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="440" b="1" n="1"></line>
        <line t="C" i="441" b="1" n="1">! Set the attribute</line>
        <line t="X" i="442" b="1" n="1">  res%name = name</line>
        <line t="X" i="443" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="444" b="1" n="1"></line>
        <line t="EF" i="445" b="1" n="1">end function xml_attribute_from_string_and_int4</line>
        <line t="EF" i="446" b="1" n="1"></line>
        <line t="EF" i="447" b="1" n="1"></line>
        <line t="C" i="448" b="1" n="1">! Initialise an attribute from name (string) and value (real kind=4)</line>
        <line k="xml_attribute_from_string_and_real" t="F" i="449" b="1" n="1">elemental function xml_attribute_from_string_and_real( name, value, fmt ) result(res)</line>
        <line t="F" i="450" b="1" n="1"></line>
        <line t="C" i="451" b="1" n="1">! The name</line>
        <line t="X" i="452" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="453" b="1" n="1"></line>
        <line t="C" i="454" b="1" n="1">! The value</line>
        <line t="X" i="455" b="1" n="1">  real(kind=4), intent(in) :: value</line>
        <line t="X" i="456" b="1" n="1"></line>
        <line t="C" i="457" b="1" n="1">! Optional output format</line>
        <line t="X" i="458" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="459" b="1" n="1"></line>
        <line t="C" i="460" b="1" n="1">! The returned attribute</line>
        <line t="X" i="461" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="462" b="1" n="1"></line>
        <line t="C" i="463" b="1" n="1">! Set the attribute</line>
        <line t="X" i="464" b="1" n="1">  res%name = name</line>
        <line t="X" i="465" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="466" b="1" n="1"></line>
        <line t="EF" i="467" b="1" n="1">end function xml_attribute_from_string_and_real</line>
        <line t="EF" i="468" b="1" n="1"></line>
        <line t="EF" i="469" b="1" n="1"></line>
        <line t="C" i="470" b="1" n="1">! Initialise an attribute from name (string) and value (real kind=8)</line>
        <line k="xml_attribute_from_string_and_double" t="F" i="471" b="1" n="1">elemental function xml_attribute_from_string_and_double( name, value, fmt ) result(res)</line>
        <line t="F" i="472" b="1" n="1"></line>
        <line t="C" i="473" b="1" n="1">! The name</line>
        <line t="X" i="474" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="475" b="1" n="1"></line>
        <line t="C" i="476" b="1" n="1">! The value</line>
        <line t="X" i="477" b="1" n="1">  real(kind=8), intent(in) :: value</line>
        <line t="X" i="478" b="1" n="1"></line>
        <line t="C" i="479" b="1" n="1">! Optional output format</line>
        <line t="X" i="480" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="481" b="1" n="1"></line>
        <line t="C" i="482" b="1" n="1">! The returned attribute</line>
        <line t="X" i="483" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="484" b="1" n="1"></line>
        <line t="C" i="485" b="1" n="1">! Set the attribute</line>
        <line t="X" i="486" b="1" n="1">  res%name = name</line>
        <line t="X" i="487" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="488" b="1" n="1"></line>
        <line t="EF" i="489" b="1" n="1">end function xml_attribute_from_string_and_double</line>
        <line t="EF" i="490" b="1" n="1"></line>
        <line t="EF" i="491" b="1" n="1"></line>
        <line t="C" i="492" b="1" n="1">! Initialise an attribute from name (string) and value (logical kind=1)</line>
        <line k="xml_attribute_from_string_and_logical1" t="F" i="493" b="1" n="1">elemental function xml_attribute_from_string_and_logical1( name, value, fmt ) result(res)</line>
        <line t="F" i="494" b="1" n="1"></line>
        <line t="C" i="495" b="1" n="1">! The name</line>
        <line t="X" i="496" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="497" b="1" n="1"></line>
        <line t="C" i="498" b="1" n="1">! The value</line>
        <line t="X" i="499" b="1" n="1">  logical(kind=1), intent(in) :: value</line>
        <line t="X" i="500" b="1" n="1"></line>
        <line t="C" i="501" b="1" n="1">! Optional output format</line>
        <line t="X" i="502" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="503" b="1" n="1"></line>
        <line t="C" i="504" b="1" n="1">! The returned attribute</line>
        <line t="X" i="505" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="506" b="1" n="1"></line>
        <line t="C" i="507" b="1" n="1">! Set the attribute</line>
        <line t="X" i="508" b="1" n="1">  res%name = name</line>
        <line t="X" i="509" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="510" b="1" n="1"></line>
        <line t="EF" i="511" b="1" n="1">end function xml_attribute_from_string_and_logical1</line>
        <line t="EF" i="512" b="1" n="1"></line>
        <line t="EF" i="513" b="1" n="1"></line>
        <line t="C" i="514" b="1" n="1">! Initialise an attribute from name (string) and value (logical kind=2)</line>
        <line k="xml_attribute_from_string_and_logical2" t="F" i="515" b="1" n="1">elemental function xml_attribute_from_string_and_logical2( name, value, fmt ) result(res)</line>
        <line t="F" i="516" b="1" n="1"></line>
        <line t="C" i="517" b="1" n="1">! The name</line>
        <line t="X" i="518" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="519" b="1" n="1"></line>
        <line t="C" i="520" b="1" n="1">! The value</line>
        <line t="X" i="521" b="1" n="1">  logical(kind=2), intent(in) :: value</line>
        <line t="X" i="522" b="1" n="1"></line>
        <line t="C" i="523" b="1" n="1">! Optional output format</line>
        <line t="X" i="524" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="525" b="1" n="1"></line>
        <line t="C" i="526" b="1" n="1">! The returned attribute</line>
        <line t="X" i="527" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="528" b="1" n="1"></line>
        <line t="C" i="529" b="1" n="1">! Set the attribute</line>
        <line t="X" i="530" b="1" n="1">  res%name = name</line>
        <line t="X" i="531" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="532" b="1" n="1"></line>
        <line t="EF" i="533" b="1" n="1">end function xml_attribute_from_string_and_logical2</line>
        <line t="EF" i="534" b="1" n="1"></line>
        <line t="EF" i="535" b="1" n="1"></line>
        <line t="C" i="536" b="1" n="1">! Initialise an attribute from name (string) and value (logical kind=4)</line>
        <line k="xml_attribute_from_string_and_logical4" t="F" i="537" b="1" n="1">elemental function xml_attribute_from_string_and_logical4( name, value, fmt ) result(res)</line>
        <line t="F" i="538" b="1" n="1"></line>
        <line t="C" i="539" b="1" n="1">! The name</line>
        <line t="X" i="540" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="541" b="1" n="1"></line>
        <line t="C" i="542" b="1" n="1">! The value</line>
        <line t="X" i="543" b="1" n="1">  logical(kind=4), intent(in) :: value</line>
        <line t="X" i="544" b="1" n="1"></line>
        <line t="C" i="545" b="1" n="1">! Optional output format</line>
        <line t="X" i="546" b="1" n="1">  character(len=*), optional, intent(in) :: fmt</line>
        <line t="X" i="547" b="1" n="1"></line>
        <line t="C" i="548" b="1" n="1">! The returned attribute</line>
        <line t="X" i="549" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="550" b="1" n="1"></line>
        <line t="C" i="551" b="1" n="1">! Set the attribute</line>
        <line t="X" i="552" b="1" n="1">  res%name = name</line>
        <line t="X" i="553" b="1" n="1">  res%value = trim(character(value,fmt=fmt))</line>
        <line t="X" i="554" b="1" n="1"></line>
        <line t="EF" i="555" b="1" n="1">end function xml_attribute_from_string_and_logical4</line>
        <line t="EF" i="556" b="1" n="1"></line>
        <line t="EF" i="557" b="1" n="1"></line>
        <line t="C" i="558" b="1" n="1">! Assignment</line>
        <line k="xml_attribute_assign" t="S" i="559" b="1" n="1">elemental subroutine xml_attribute_assign( this, other )</line>
        <line t="S" i="560" b="1" n="1"></line>
        <line t="C" i="561" b="1" n="1">! The calling object (maybe in with intel; gofrtran forces inout)</line>
        <line t="X" i="562" b="1" n="1">  class(t_xml_attribute), intent(inout) :: this</line>
        <line t="X" i="563" b="1" n="1"></line>
        <line t="C" i="564" b="1" n="1">! The other object</line>
        <line t="X" i="565" b="1" n="1">  class(t_xml_attribute), intent(in) :: other</line>
        <line t="X" i="566" b="1" n="1"></line>
        <line t="C" i="567" b="1" n="1">! Assign the elements</line>
        <line t="X" i="568" b="1" n="1">  this%name = other%name</line>
        <line t="X" i="569" b="1" n="1">  this%value = other%value</line>
        <line t="X" i="570" b="1" n="1"></line>
        <line t="ES" i="571" b="1" n="1">end subroutine xml_attribute_assign</line>
        <line t="ES" i="572" b="1" n="1"></line>
        <line t="ES" i="573" b="1" n="1"></line>
        <line t="C" i="574" b="1" n="1">! Encode the contents of an attribute</line>
        <line k="xml_attribute_encode" t="F" i="575" b="1" n="1">elemental function xml_attribute_encode( this, encoder ) result(res)</line>
        <line t="F" i="576" b="1" n="1"></line>
        <line t="C" i="577" b="1" n="1">! The input attribute</line>
        <line t="X" i="578" b="1" n="1">  class(t_xml_attribute), intent(in) :: this</line>
        <line t="X" i="579" b="1" n="1"></line>
        <line t="C" i="580" b="1" n="1">! The XML encoder</line>
        <line t="X" i="581" b="1" n="1">  type(t_xml_encoder), intent(in) :: encoder</line>
        <line t="X" i="582" b="1" n="1"></line>
        <line t="C" i="583" b="1" n="1">! The decoded attribute</line>
        <line t="X" i="584" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="585" b="1" n="1"></line>
        <line t="C" i="586" b="1" n="1">! Decode the attribute value</line>
        <line t="X" i="587" b="1" n="1">  res%name = this%name</line>
        <line t="X" i="588" b="1" n="1">  res%value = encoder%encode( this%value )</line>
        <line t="X" i="589" b="1" n="1"></line>
        <line t="EF" i="590" b="1" n="1">end function xml_attribute_encode</line>
        <line t="EF" i="591" b="1" n="1"></line>
        <line t="EF" i="592" b="1" n="1"></line>
        <line t="C" i="593" b="1" n="1">! Decode the contents of an attribute</line>
        <line k="xml_attribute_decode" t="F" i="594" b="1" n="1">elemental function xml_attribute_decode( this, encoder ) result(res)</line>
        <line t="F" i="595" b="1" n="1"></line>
        <line t="C" i="596" b="1" n="1">! The input attribute</line>
        <line t="X" i="597" b="1" n="1">  class(t_xml_attribute), intent(in) :: this</line>
        <line t="X" i="598" b="1" n="1"></line>
        <line t="C" i="599" b="1" n="1">! The XML encoder</line>
        <line t="X" i="600" b="1" n="1">  type(t_xml_encoder), intent(in) :: encoder</line>
        <line t="X" i="601" b="1" n="1"></line>
        <line t="C" i="602" b="1" n="1">! The decoded attribute</line>
        <line t="X" i="603" b="1" n="1">  type(t_xml_attribute) :: res</line>
        <line t="X" i="604" b="1" n="1"></line>
        <line t="C" i="605" b="1" n="1">! Decode the attribute value</line>
        <line t="X" i="606" b="1" n="1">  res%name = this%name</line>
        <line t="X" i="607" b="1" n="1">  res%value = encoder%decode( this%value )</line>
        <line t="X" i="608" b="1" n="1"></line>
        <line t="EF" i="609" b="1" n="1">end function xml_attribute_decode</line>
        <line t="EF" i="610" b="1" n="1"></line>
        <line t="EF" i="611" b="1" n="1"></line>
        <line t="C" i="612" b="1" n="1">! to_string an attribute (convert to string)</line>
        <line k="xml_attribute_to_string" t="F" i="613" b="1" n="1">elemental function xml_attribute_to_string( this, encoder ) result(res)</line>
        <line t="F" i="614" b="1" n="1"></line>
        <line t="C" i="615" b="1" n="1">! The input attribute</line>
        <line t="X" i="616" b="1" n="1">  class(t_xml_attribute), intent(in) :: this</line>
        <line t="X" i="617" b="1" n="1"></line>
        <line t="C" i="618" b="1" n="1">! The XML encoder</line>
        <line t="X" i="619" b="1" n="1">  type(t_xml_encoder), optional, intent(in) :: encoder</line>
        <line t="X" i="620" b="1" n="1"></line>
        <line t="C" i="621" b="1" n="1">! The to_stringd attribute</line>
        <line t="X" i="622" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="623" b="1" n="1"></line>
        <line t="C" i="624" b="1" n="1">! Local storage for encoding</line>
        <line t="X" i="625" b="1" n="1">  type(t_string) :: local</line>
        <line t="X" i="626" b="1" n="1"></line>
        <line t="C" i="627" b="1" n="1">! Encode the attribute value</line>
        <line t="X" i="628" b="2" n="2">  if( present(encoder) ) then</line>
        <line t="X" i="629" b="2" n="2">    local = encoder%encode( this%value )</line>
        <line t="X" i="630" b="3" n="2">  else</line>
        <line t="X" i="631" b="3" n="2">    local = xml_default_encoder%encode(this%value)</line>
        <line t="X" i="632" b="3" n="1">  end if</line>
        <line t="X" i="633" b="3" n="1"></line>
        <line t="C" i="634" b="3" n="1">! Form the to_stringd attribute</line>
        <line t="X" i="635" b="3" n="1">  local = local%adjustl()</line>
        <line t="X" i="636" b="3" n="1">  res = this%name%adjustl()</line>
        <line t="X" i="637" b="3" n="1">  res = res%trim() // '=' // '"' // local%trim() // '"'</line>
        <line t="X" i="638" b="3" n="1"></line>
        <line t="EF" i="639" b="3" n="1">end function xml_attribute_to_string</line>
        <line t="EF" i="640" b="1" n="1"></line>
        <line t="EF" i="641" b="1" n="1"></line>
        <line t="C" i="642" b="1" n="1">! Retrieve the attribute value from an array of attribute structures</line>
        <line k="xml_attribute_value" t="F" i="643" b="1" n="1">pure function xml_attribute_value( attr, name ) result(res)</line>
        <line t="F" i="644" b="1" n="1"></line>
        <line t="C" i="645" b="1" n="1">! The array of input attribute structures</line>
        <line t="X" i="646" b="1" n="1">  type(t_xml_attribute), dimension(:), intent(in) :: attr</line>
        <line t="X" i="647" b="1" n="1"></line>
        <line t="C" i="648" b="1" n="1">! The attribute name to look for</line>
        <line t="X" i="649" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="650" b="1" n="1"></line>
        <line t="C" i="651" b="1" n="1">! The returned attribute value (empty if not found)</line>
        <line t="X" i="652" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="653" b="1" n="1"></line>
        <line t="C" i="654" b="1" n="1">! Local variables</line>
        <line t="X" i="655" b="1" n="1">  integer :: i</line>
        <line t="X" i="656" b="1" n="1">  type(t_string) :: local</line>
        <line t="X" i="657" b="1" n="1"></line>
        <line t="C" i="658" b="1" n="1">! Initialise return string</line>
        <line t="X" i="659" b="1" n="1">  res = ' '</line>
        <line t="X" i="660" b="1" n="1"></line>
        <line t="C" i="661" b="1" n="1">! Look for the requested attribute</line>
        <line t="X" i="662" b="2" n="2">  do i = 1, size(attr)</line>
        <line t="X" i="663" b="2" n="2">    local = attr(i)%get_name()</line>
        <line t="X" i="664" b="3" n="3">    if( adjustl(name) == local%adjustl() ) then</line>
        <line t="X" i="665" b="3" n="3">      res = attr(i)%get_value()</line>
        <line t="X" i="666" b="3" n="3">      exit</line>
        <line t="X" i="667" b="3" n="2">    end if</line>
        <line t="X" i="668" b="3" n="1">  end do</line>
        <line t="X" i="669" b="3" n="1"></line>
        <line t="EF" i="670" b="3" n="1">end function xml_attribute_value</line>
        <line t="EF" i="671" b="1" n="1"></line>
        <line t="EF" i="672" b="1" n="1"></line>
        <line t="C" i="673" b="1" n="1">! Getter for name</line>
        <line k="xml_attribute_get_name" t="F" i="674" b="1" n="1">elemental function xml_attribute_get_name( this ) result(res)</line>
        <line t="F" i="675" b="1" n="1"></line>
        <line t="C" i="676" b="1" n="1">! Calling object</line>
        <line t="X" i="677" b="1" n="1">  class(t_xml_attribute), intent(in) :: this</line>
        <line t="X" i="678" b="1" n="1"></line>
        <line t="C" i="679" b="1" n="1">! Getter result</line>
        <line t="X" i="680" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="681" b="1" n="1"></line>
        <line t="C" i="682" b="1" n="1">! Return value (protect from not initialised name)</line>
        <line t="X" i="683" b="2" n="2">  if( this%name%len_trim() &gt; 0 ) then</line>
        <line t="X" i="684" b="2" n="2">    res = this%name</line>
        <line t="X" i="685" b="3" n="2">  else</line>
        <line t="X" i="686" b="3" n="2">    res = string('')</line>
        <line t="X" i="687" b="3" n="1">  end if</line>
        <line t="X" i="688" b="3" n="1"></line>
        <line t="EF" i="689" b="3" n="1">end function xml_attribute_get_name</line>
        <line t="EF" i="690" b="1" n="1"></line>
        <line t="EF" i="691" b="1" n="1"></line>
        <line t="C" i="692" b="1" n="1">! Getter for value</line>
        <line k="xml_attribute_get_value" t="F" i="693" b="1" n="1">elemental function xml_attribute_get_value( this ) result(res)</line>
        <line t="F" i="694" b="1" n="1"></line>
        <line t="C" i="695" b="1" n="1">! Calling object</line>
        <line t="X" i="696" b="1" n="1">  class(t_xml_attribute), intent(in) :: this</line>
        <line t="X" i="697" b="1" n="1"></line>
        <line t="C" i="698" b="1" n="1">! Getter result</line>
        <line t="X" i="699" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="700" b="1" n="1"></line>
        <line t="C" i="701" b="1" n="1">! Return value (protect from not initialised name)</line>
        <line t="X" i="702" b="2" n="2">  if( this%value%len_trim() &gt; 0 ) then</line>
        <line t="X" i="703" b="2" n="2">    res = this%value</line>
        <line t="X" i="704" b="3" n="2">  else</line>
        <line t="X" i="705" b="3" n="2">    res = string('')</line>
        <line t="X" i="706" b="3" n="1">  end if</line>
        <line t="X" i="707" b="3" n="1"></line>
        <line t="EF" i="708" b="3" n="1">end function xml_attribute_get_value</line>
        <line t="EF" i="709" b="1" n="1"></line>
        <line t="EF" i="710" b="1" n="1"></line>
        <line t="C" i="711" b="1" n="1">! Setter for name</line>
        <line k="xml_attribute_set_name" t="S" i="712" b="1" n="1">elemental subroutine xml_attribute_set_name( this, value )</line>
        <line t="S" i="713" b="1" n="1"></line>
        <line t="C" i="714" b="1" n="1">! Calling object</line>
        <line t="X" i="715" b="1" n="1">  class(t_xml_attribute), intent(inout) :: this</line>
        <line t="X" i="716" b="1" n="1"></line>
        <line t="C" i="717" b="1" n="1">! Value to set</line>
        <line t="X" i="718" b="1" n="1">  type(t_string), intent(in) :: value</line>
        <line t="X" i="719" b="1" n="1"></line>
        <line t="C" i="720" b="1" n="1">! Set the value</line>
        <line t="X" i="721" b="1" n="1">  this%name = value</line>
        <line t="X" i="722" b="1" n="1"></line>
        <line t="ES" i="723" b="1" n="1">end subroutine xml_attribute_set_name</line>
        <line t="ES" i="724" b="1" n="1"></line>
        <line t="ES" i="725" b="1" n="1"></line>
        <line t="C" i="726" b="1" n="1">! Setter for name (character)</line>
        <line k="xml_attribute_set_name_character" t="S" i="727" b="1" n="1">elemental subroutine xml_attribute_set_name_character( this, value )</line>
        <line t="S" i="728" b="1" n="1"></line>
        <line t="C" i="729" b="1" n="1">! Calling object</line>
        <line t="X" i="730" b="1" n="1">  class(t_xml_attribute), intent(inout) :: this</line>
        <line t="X" i="731" b="1" n="1"></line>
        <line t="C" i="732" b="1" n="1">! Value to set</line>
        <line t="X" i="733" b="1" n="1">  character(len=*), intent(in) :: value</line>
        <line t="X" i="734" b="1" n="1"></line>
        <line t="C" i="735" b="1" n="1">! Set the value</line>
        <line t="X" i="736" b="1" n="1">  this%name = string(value)</line>
        <line t="X" i="737" b="1" n="1"></line>
        <line t="ES" i="738" b="1" n="1">end subroutine xml_attribute_set_name_character</line>
        <line t="ES" i="739" b="1" n="1"></line>
        <line t="ES" i="740" b="1" n="1"></line>
        <line t="C" i="741" b="1" n="1">! Setter for value</line>
        <line k="xml_attribute_set_value" t="S" i="742" b="1" n="1">elemental subroutine xml_attribute_set_value( this, value )</line>
        <line t="S" i="743" b="1" n="1"></line>
        <line t="C" i="744" b="1" n="1">! Calling object</line>
        <line t="X" i="745" b="1" n="1">  class(t_xml_attribute), intent(inout) :: this</line>
        <line t="X" i="746" b="1" n="1"></line>
        <line t="C" i="747" b="1" n="1">! Value to set</line>
        <line t="X" i="748" b="1" n="1">  type(t_string), intent(in) :: value</line>
        <line t="X" i="749" b="1" n="1"></line>
        <line t="C" i="750" b="1" n="1">! Set the value</line>
        <line t="X" i="751" b="1" n="1">  this%value = value</line>
        <line t="X" i="752" b="1" n="1"></line>
        <line t="ES" i="753" b="1" n="1">end subroutine xml_attribute_set_value</line>
        <line t="ES" i="754" b="1" n="1"></line>
        <line t="ES" i="755" b="1" n="1"></line>
        <line t="C" i="756" b="1" n="1">! Setter for value (character)</line>
        <line k="xml_attribute_set_value_character" t="S" i="757" b="1" n="1">elemental subroutine xml_attribute_set_value_character( this, value )</line>
        <line t="S" i="758" b="1" n="1"></line>
        <line t="C" i="759" b="1" n="1">! Calling object</line>
        <line t="X" i="760" b="1" n="1">  class(t_xml_attribute), intent(inout) :: this</line>
        <line t="X" i="761" b="1" n="1"></line>
        <line t="C" i="762" b="1" n="1">! Value to set</line>
        <line t="X" i="763" b="1" n="1">  character(len=*), intent(in) :: value</line>
        <line t="X" i="764" b="1" n="1"></line>
        <line t="C" i="765" b="1" n="1">! Set the value</line>
        <line t="X" i="766" b="1" n="1">  this%value = string(value)</line>
        <line t="X" i="767" b="1" n="1"></line>
        <line t="ES" i="768" b="1" n="1">end subroutine xml_attribute_set_value_character</line>
        <line t="ES" i="769" b="1" n="1"></line>
        <line t="M" i="770" b="1" n="1">end module m_xml_attribute</line>
        <line t="M" i="771" b="1" n="1"></line>
    </code>
</fmx>